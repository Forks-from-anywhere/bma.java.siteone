/**
 * Autogenerated by Thrift Compiler (0.8.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package bma.common.thrift.sample;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TMedal implements org.apache.thrift.TBase<TMedal, TMedal._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TMedal");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ACTIVITY_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("activity_url", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField HIGHLIGHT_ICON_FIELD_DESC = new org.apache.thrift.protocol.TField("highlight_icon", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ASH_ICON_FIELD_DESC = new org.apache.thrift.protocol.TField("ash_icon", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField HD_ICON_FIELD_DESC = new org.apache.thrift.protocol.TField("hd_icon", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ICON_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("icon_url", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("num", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField RULES_FIELD_DESC = new org.apache.thrift.protocol.TField("rules", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("start_time", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("end_time", org.apache.thrift.protocol.TType.I32, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TMedalStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TMedalTupleSchemeFactory());
  }

  public int id; // required
  public String name; // required
  public String description; // required
  public String activity_url; // required
  public String highlight_icon; // required
  public String ash_icon; // required
  public String hd_icon; // required
  public String icon_url; // optional
  public int num; // required
  public String rules; // optional
  public int start_time; // required
  public int end_time; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    DESCRIPTION((short)3, "description"),
    ACTIVITY_URL((short)4, "activity_url"),
    HIGHLIGHT_ICON((short)5, "highlight_icon"),
    ASH_ICON((short)6, "ash_icon"),
    HD_ICON((short)7, "hd_icon"),
    ICON_URL((short)8, "icon_url"),
    NUM((short)9, "num"),
    RULES((short)10, "rules"),
    START_TIME((short)11, "start_time"),
    END_TIME((short)12, "end_time");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // DESCRIPTION
          return DESCRIPTION;
        case 4: // ACTIVITY_URL
          return ACTIVITY_URL;
        case 5: // HIGHLIGHT_ICON
          return HIGHLIGHT_ICON;
        case 6: // ASH_ICON
          return ASH_ICON;
        case 7: // HD_ICON
          return HD_ICON;
        case 8: // ICON_URL
          return ICON_URL;
        case 9: // NUM
          return NUM;
        case 10: // RULES
          return RULES;
        case 11: // START_TIME
          return START_TIME;
        case 12: // END_TIME
          return END_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __NUM_ISSET_ID = 1;
  private static final int __START_TIME_ISSET_ID = 2;
  private static final int __END_TIME_ISSET_ID = 3;
  private BitSet __isset_bit_vector = new BitSet(4);
  private _Fields optionals[] = {_Fields.ICON_URL,_Fields.RULES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTIVITY_URL, new org.apache.thrift.meta_data.FieldMetaData("activity_url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HIGHLIGHT_ICON, new org.apache.thrift.meta_data.FieldMetaData("highlight_icon", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ASH_ICON, new org.apache.thrift.meta_data.FieldMetaData("ash_icon", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HD_ICON, new org.apache.thrift.meta_data.FieldMetaData("hd_icon", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ICON_URL, new org.apache.thrift.meta_data.FieldMetaData("icon_url", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NUM, new org.apache.thrift.meta_data.FieldMetaData("num", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RULES, new org.apache.thrift.meta_data.FieldMetaData("rules", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("start_time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("end_time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TMedal.class, metaDataMap);
  }

  public TMedal() {
  }

  public TMedal(
    int id,
    String name,
    String description,
    String activity_url,
    String highlight_icon,
    String ash_icon,
    String hd_icon,
    int num,
    int start_time,
    int end_time)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.name = name;
    this.description = description;
    this.activity_url = activity_url;
    this.highlight_icon = highlight_icon;
    this.ash_icon = ash_icon;
    this.hd_icon = hd_icon;
    this.num = num;
    setNumIsSet(true);
    this.start_time = start_time;
    setStart_timeIsSet(true);
    this.end_time = end_time;
    setEnd_timeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TMedal(TMedal other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.id = other.id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    if (other.isSetActivity_url()) {
      this.activity_url = other.activity_url;
    }
    if (other.isSetHighlight_icon()) {
      this.highlight_icon = other.highlight_icon;
    }
    if (other.isSetAsh_icon()) {
      this.ash_icon = other.ash_icon;
    }
    if (other.isSetHd_icon()) {
      this.hd_icon = other.hd_icon;
    }
    if (other.isSetIcon_url()) {
      this.icon_url = other.icon_url;
    }
    this.num = other.num;
    if (other.isSetRules()) {
      this.rules = other.rules;
    }
    this.start_time = other.start_time;
    this.end_time = other.end_time;
  }

  public TMedal deepCopy() {
    return new TMedal(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.name = null;
    this.description = null;
    this.activity_url = null;
    this.highlight_icon = null;
    this.ash_icon = null;
    this.hd_icon = null;
    this.icon_url = null;
    setNumIsSet(false);
    this.num = 0;
    this.rules = null;
    setStart_timeIsSet(false);
    this.start_time = 0;
    setEnd_timeIsSet(false);
    this.end_time = 0;
  }

  public int getId() {
    return this.id;
  }

  public TMedal setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bit_vector.clear(__ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return __isset_bit_vector.get(__ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bit_vector.set(__ID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public TMedal setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getDescription() {
    return this.description;
  }

  public TMedal setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public String getActivity_url() {
    return this.activity_url;
  }

  public TMedal setActivity_url(String activity_url) {
    this.activity_url = activity_url;
    return this;
  }

  public void unsetActivity_url() {
    this.activity_url = null;
  }

  /** Returns true if field activity_url is set (has been assigned a value) and false otherwise */
  public boolean isSetActivity_url() {
    return this.activity_url != null;
  }

  public void setActivity_urlIsSet(boolean value) {
    if (!value) {
      this.activity_url = null;
    }
  }

  public String getHighlight_icon() {
    return this.highlight_icon;
  }

  public TMedal setHighlight_icon(String highlight_icon) {
    this.highlight_icon = highlight_icon;
    return this;
  }

  public void unsetHighlight_icon() {
    this.highlight_icon = null;
  }

  /** Returns true if field highlight_icon is set (has been assigned a value) and false otherwise */
  public boolean isSetHighlight_icon() {
    return this.highlight_icon != null;
  }

  public void setHighlight_iconIsSet(boolean value) {
    if (!value) {
      this.highlight_icon = null;
    }
  }

  public String getAsh_icon() {
    return this.ash_icon;
  }

  public TMedal setAsh_icon(String ash_icon) {
    this.ash_icon = ash_icon;
    return this;
  }

  public void unsetAsh_icon() {
    this.ash_icon = null;
  }

  /** Returns true if field ash_icon is set (has been assigned a value) and false otherwise */
  public boolean isSetAsh_icon() {
    return this.ash_icon != null;
  }

  public void setAsh_iconIsSet(boolean value) {
    if (!value) {
      this.ash_icon = null;
    }
  }

  public String getHd_icon() {
    return this.hd_icon;
  }

  public TMedal setHd_icon(String hd_icon) {
    this.hd_icon = hd_icon;
    return this;
  }

  public void unsetHd_icon() {
    this.hd_icon = null;
  }

  /** Returns true if field hd_icon is set (has been assigned a value) and false otherwise */
  public boolean isSetHd_icon() {
    return this.hd_icon != null;
  }

  public void setHd_iconIsSet(boolean value) {
    if (!value) {
      this.hd_icon = null;
    }
  }

  public String getIcon_url() {
    return this.icon_url;
  }

  public TMedal setIcon_url(String icon_url) {
    this.icon_url = icon_url;
    return this;
  }

  public void unsetIcon_url() {
    this.icon_url = null;
  }

  /** Returns true if field icon_url is set (has been assigned a value) and false otherwise */
  public boolean isSetIcon_url() {
    return this.icon_url != null;
  }

  public void setIcon_urlIsSet(boolean value) {
    if (!value) {
      this.icon_url = null;
    }
  }

  public int getNum() {
    return this.num;
  }

  public TMedal setNum(int num) {
    this.num = num;
    setNumIsSet(true);
    return this;
  }

  public void unsetNum() {
    __isset_bit_vector.clear(__NUM_ISSET_ID);
  }

  /** Returns true if field num is set (has been assigned a value) and false otherwise */
  public boolean isSetNum() {
    return __isset_bit_vector.get(__NUM_ISSET_ID);
  }

  public void setNumIsSet(boolean value) {
    __isset_bit_vector.set(__NUM_ISSET_ID, value);
  }

  public String getRules() {
    return this.rules;
  }

  public TMedal setRules(String rules) {
    this.rules = rules;
    return this;
  }

  public void unsetRules() {
    this.rules = null;
  }

  /** Returns true if field rules is set (has been assigned a value) and false otherwise */
  public boolean isSetRules() {
    return this.rules != null;
  }

  public void setRulesIsSet(boolean value) {
    if (!value) {
      this.rules = null;
    }
  }

  public int getStart_time() {
    return this.start_time;
  }

  public TMedal setStart_time(int start_time) {
    this.start_time = start_time;
    setStart_timeIsSet(true);
    return this;
  }

  public void unsetStart_time() {
    __isset_bit_vector.clear(__START_TIME_ISSET_ID);
  }

  /** Returns true if field start_time is set (has been assigned a value) and false otherwise */
  public boolean isSetStart_time() {
    return __isset_bit_vector.get(__START_TIME_ISSET_ID);
  }

  public void setStart_timeIsSet(boolean value) {
    __isset_bit_vector.set(__START_TIME_ISSET_ID, value);
  }

  public int getEnd_time() {
    return this.end_time;
  }

  public TMedal setEnd_time(int end_time) {
    this.end_time = end_time;
    setEnd_timeIsSet(true);
    return this;
  }

  public void unsetEnd_time() {
    __isset_bit_vector.clear(__END_TIME_ISSET_ID);
  }

  /** Returns true if field end_time is set (has been assigned a value) and false otherwise */
  public boolean isSetEnd_time() {
    return __isset_bit_vector.get(__END_TIME_ISSET_ID);
  }

  public void setEnd_timeIsSet(boolean value) {
    __isset_bit_vector.set(__END_TIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case ACTIVITY_URL:
      if (value == null) {
        unsetActivity_url();
      } else {
        setActivity_url((String)value);
      }
      break;

    case HIGHLIGHT_ICON:
      if (value == null) {
        unsetHighlight_icon();
      } else {
        setHighlight_icon((String)value);
      }
      break;

    case ASH_ICON:
      if (value == null) {
        unsetAsh_icon();
      } else {
        setAsh_icon((String)value);
      }
      break;

    case HD_ICON:
      if (value == null) {
        unsetHd_icon();
      } else {
        setHd_icon((String)value);
      }
      break;

    case ICON_URL:
      if (value == null) {
        unsetIcon_url();
      } else {
        setIcon_url((String)value);
      }
      break;

    case NUM:
      if (value == null) {
        unsetNum();
      } else {
        setNum((Integer)value);
      }
      break;

    case RULES:
      if (value == null) {
        unsetRules();
      } else {
        setRules((String)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStart_time();
      } else {
        setStart_time((Integer)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEnd_time();
      } else {
        setEnd_time((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case NAME:
      return getName();

    case DESCRIPTION:
      return getDescription();

    case ACTIVITY_URL:
      return getActivity_url();

    case HIGHLIGHT_ICON:
      return getHighlight_icon();

    case ASH_ICON:
      return getAsh_icon();

    case HD_ICON:
      return getHd_icon();

    case ICON_URL:
      return getIcon_url();

    case NUM:
      return Integer.valueOf(getNum());

    case RULES:
      return getRules();

    case START_TIME:
      return Integer.valueOf(getStart_time());

    case END_TIME:
      return Integer.valueOf(getEnd_time());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case DESCRIPTION:
      return isSetDescription();
    case ACTIVITY_URL:
      return isSetActivity_url();
    case HIGHLIGHT_ICON:
      return isSetHighlight_icon();
    case ASH_ICON:
      return isSetAsh_icon();
    case HD_ICON:
      return isSetHd_icon();
    case ICON_URL:
      return isSetIcon_url();
    case NUM:
      return isSetNum();
    case RULES:
      return isSetRules();
    case START_TIME:
      return isSetStart_time();
    case END_TIME:
      return isSetEnd_time();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TMedal)
      return this.equals((TMedal)that);
    return false;
  }

  public boolean equals(TMedal that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_activity_url = true && this.isSetActivity_url();
    boolean that_present_activity_url = true && that.isSetActivity_url();
    if (this_present_activity_url || that_present_activity_url) {
      if (!(this_present_activity_url && that_present_activity_url))
        return false;
      if (!this.activity_url.equals(that.activity_url))
        return false;
    }

    boolean this_present_highlight_icon = true && this.isSetHighlight_icon();
    boolean that_present_highlight_icon = true && that.isSetHighlight_icon();
    if (this_present_highlight_icon || that_present_highlight_icon) {
      if (!(this_present_highlight_icon && that_present_highlight_icon))
        return false;
      if (!this.highlight_icon.equals(that.highlight_icon))
        return false;
    }

    boolean this_present_ash_icon = true && this.isSetAsh_icon();
    boolean that_present_ash_icon = true && that.isSetAsh_icon();
    if (this_present_ash_icon || that_present_ash_icon) {
      if (!(this_present_ash_icon && that_present_ash_icon))
        return false;
      if (!this.ash_icon.equals(that.ash_icon))
        return false;
    }

    boolean this_present_hd_icon = true && this.isSetHd_icon();
    boolean that_present_hd_icon = true && that.isSetHd_icon();
    if (this_present_hd_icon || that_present_hd_icon) {
      if (!(this_present_hd_icon && that_present_hd_icon))
        return false;
      if (!this.hd_icon.equals(that.hd_icon))
        return false;
    }

    boolean this_present_icon_url = true && this.isSetIcon_url();
    boolean that_present_icon_url = true && that.isSetIcon_url();
    if (this_present_icon_url || that_present_icon_url) {
      if (!(this_present_icon_url && that_present_icon_url))
        return false;
      if (!this.icon_url.equals(that.icon_url))
        return false;
    }

    boolean this_present_num = true;
    boolean that_present_num = true;
    if (this_present_num || that_present_num) {
      if (!(this_present_num && that_present_num))
        return false;
      if (this.num != that.num)
        return false;
    }

    boolean this_present_rules = true && this.isSetRules();
    boolean that_present_rules = true && that.isSetRules();
    if (this_present_rules || that_present_rules) {
      if (!(this_present_rules && that_present_rules))
        return false;
      if (!this.rules.equals(that.rules))
        return false;
    }

    boolean this_present_start_time = true;
    boolean that_present_start_time = true;
    if (this_present_start_time || that_present_start_time) {
      if (!(this_present_start_time && that_present_start_time))
        return false;
      if (this.start_time != that.start_time)
        return false;
    }

    boolean this_present_end_time = true;
    boolean that_present_end_time = true;
    if (this_present_end_time || that_present_end_time) {
      if (!(this_present_end_time && that_present_end_time))
        return false;
      if (this.end_time != that.end_time)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TMedal other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TMedal typedOther = (TMedal)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(typedOther.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, typedOther.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActivity_url()).compareTo(typedOther.isSetActivity_url());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActivity_url()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activity_url, typedOther.activity_url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHighlight_icon()).compareTo(typedOther.isSetHighlight_icon());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHighlight_icon()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.highlight_icon, typedOther.highlight_icon);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAsh_icon()).compareTo(typedOther.isSetAsh_icon());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAsh_icon()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ash_icon, typedOther.ash_icon);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHd_icon()).compareTo(typedOther.isSetHd_icon());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHd_icon()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hd_icon, typedOther.hd_icon);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIcon_url()).compareTo(typedOther.isSetIcon_url());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIcon_url()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.icon_url, typedOther.icon_url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum()).compareTo(typedOther.isSetNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num, typedOther.num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRules()).compareTo(typedOther.isSetRules());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRules()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rules, typedOther.rules);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStart_time()).compareTo(typedOther.isSetStart_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStart_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start_time, typedOther.start_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnd_time()).compareTo(typedOther.isSetEnd_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnd_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.end_time, typedOther.end_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TMedal(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("description:");
    if (this.description == null) {
      sb.append("null");
    } else {
      sb.append(this.description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("activity_url:");
    if (this.activity_url == null) {
      sb.append("null");
    } else {
      sb.append(this.activity_url);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("highlight_icon:");
    if (this.highlight_icon == null) {
      sb.append("null");
    } else {
      sb.append(this.highlight_icon);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ash_icon:");
    if (this.ash_icon == null) {
      sb.append("null");
    } else {
      sb.append(this.ash_icon);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hd_icon:");
    if (this.hd_icon == null) {
      sb.append("null");
    } else {
      sb.append(this.hd_icon);
    }
    first = false;
    if (isSetIcon_url()) {
      if (!first) sb.append(", ");
      sb.append("icon_url:");
      if (this.icon_url == null) {
        sb.append("null");
      } else {
        sb.append(this.icon_url);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("num:");
    sb.append(this.num);
    first = false;
    if (isSetRules()) {
      if (!first) sb.append(", ");
      sb.append("rules:");
      if (this.rules == null) {
        sb.append("null");
      } else {
        sb.append(this.rules);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("start_time:");
    sb.append(this.start_time);
    first = false;
    if (!first) sb.append(", ");
    sb.append("end_time:");
    sb.append(this.end_time);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TMedalStandardSchemeFactory implements SchemeFactory {
    public TMedalStandardScheme getScheme() {
      return new TMedalStandardScheme();
    }
  }

  private static class TMedalStandardScheme extends StandardScheme<TMedal> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TMedal struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ACTIVITY_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.activity_url = iprot.readString();
              struct.setActivity_urlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // HIGHLIGHT_ICON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.highlight_icon = iprot.readString();
              struct.setHighlight_iconIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ASH_ICON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ash_icon = iprot.readString();
              struct.setAsh_iconIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // HD_ICON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hd_icon = iprot.readString();
              struct.setHd_iconIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ICON_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.icon_url = iprot.readString();
              struct.setIcon_urlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num = iprot.readI32();
              struct.setNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // RULES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rules = iprot.readString();
              struct.setRulesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.start_time = iprot.readI32();
              struct.setStart_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.end_time = iprot.readI32();
              struct.setEnd_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TMedal struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.description);
        oprot.writeFieldEnd();
      }
      if (struct.activity_url != null) {
        oprot.writeFieldBegin(ACTIVITY_URL_FIELD_DESC);
        oprot.writeString(struct.activity_url);
        oprot.writeFieldEnd();
      }
      if (struct.highlight_icon != null) {
        oprot.writeFieldBegin(HIGHLIGHT_ICON_FIELD_DESC);
        oprot.writeString(struct.highlight_icon);
        oprot.writeFieldEnd();
      }
      if (struct.ash_icon != null) {
        oprot.writeFieldBegin(ASH_ICON_FIELD_DESC);
        oprot.writeString(struct.ash_icon);
        oprot.writeFieldEnd();
      }
      if (struct.hd_icon != null) {
        oprot.writeFieldBegin(HD_ICON_FIELD_DESC);
        oprot.writeString(struct.hd_icon);
        oprot.writeFieldEnd();
      }
      if (struct.icon_url != null) {
        if (struct.isSetIcon_url()) {
          oprot.writeFieldBegin(ICON_URL_FIELD_DESC);
          oprot.writeString(struct.icon_url);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(NUM_FIELD_DESC);
      oprot.writeI32(struct.num);
      oprot.writeFieldEnd();
      if (struct.rules != null) {
        if (struct.isSetRules()) {
          oprot.writeFieldBegin(RULES_FIELD_DESC);
          oprot.writeString(struct.rules);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(START_TIME_FIELD_DESC);
      oprot.writeI32(struct.start_time);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(END_TIME_FIELD_DESC);
      oprot.writeI32(struct.end_time);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TMedalTupleSchemeFactory implements SchemeFactory {
    public TMedalTupleScheme getScheme() {
      return new TMedalTupleScheme();
    }
  }

  private static class TMedalTupleScheme extends TupleScheme<TMedal> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TMedal struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetDescription()) {
        optionals.set(2);
      }
      if (struct.isSetActivity_url()) {
        optionals.set(3);
      }
      if (struct.isSetHighlight_icon()) {
        optionals.set(4);
      }
      if (struct.isSetAsh_icon()) {
        optionals.set(5);
      }
      if (struct.isSetHd_icon()) {
        optionals.set(6);
      }
      if (struct.isSetIcon_url()) {
        optionals.set(7);
      }
      if (struct.isSetNum()) {
        optionals.set(8);
      }
      if (struct.isSetRules()) {
        optionals.set(9);
      }
      if (struct.isSetStart_time()) {
        optionals.set(10);
      }
      if (struct.isSetEnd_time()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetActivity_url()) {
        oprot.writeString(struct.activity_url);
      }
      if (struct.isSetHighlight_icon()) {
        oprot.writeString(struct.highlight_icon);
      }
      if (struct.isSetAsh_icon()) {
        oprot.writeString(struct.ash_icon);
      }
      if (struct.isSetHd_icon()) {
        oprot.writeString(struct.hd_icon);
      }
      if (struct.isSetIcon_url()) {
        oprot.writeString(struct.icon_url);
      }
      if (struct.isSetNum()) {
        oprot.writeI32(struct.num);
      }
      if (struct.isSetRules()) {
        oprot.writeString(struct.rules);
      }
      if (struct.isSetStart_time()) {
        oprot.writeI32(struct.start_time);
      }
      if (struct.isSetEnd_time()) {
        oprot.writeI32(struct.end_time);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TMedal struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.activity_url = iprot.readString();
        struct.setActivity_urlIsSet(true);
      }
      if (incoming.get(4)) {
        struct.highlight_icon = iprot.readString();
        struct.setHighlight_iconIsSet(true);
      }
      if (incoming.get(5)) {
        struct.ash_icon = iprot.readString();
        struct.setAsh_iconIsSet(true);
      }
      if (incoming.get(6)) {
        struct.hd_icon = iprot.readString();
        struct.setHd_iconIsSet(true);
      }
      if (incoming.get(7)) {
        struct.icon_url = iprot.readString();
        struct.setIcon_urlIsSet(true);
      }
      if (incoming.get(8)) {
        struct.num = iprot.readI32();
        struct.setNumIsSet(true);
      }
      if (incoming.get(9)) {
        struct.rules = iprot.readString();
        struct.setRulesIsSet(true);
      }
      if (incoming.get(10)) {
        struct.start_time = iprot.readI32();
        struct.setStart_timeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.end_time = iprot.readI32();
        struct.setEnd_timeIsSet(true);
      }
    }
  }

}

