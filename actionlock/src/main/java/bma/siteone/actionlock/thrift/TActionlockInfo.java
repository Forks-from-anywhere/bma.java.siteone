/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package bma.siteone.actionlock.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TActionlockInfo implements org.apache.thrift.TBase<TActionlockInfo, TActionlockInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TActionlockInfo");

  private static final org.apache.thrift.protocol.TField GROUP_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("groupType", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("itemId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ACCESS_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("accessCount", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField CLEAN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("cleanTime", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TActionlockInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TActionlockInfoTupleSchemeFactory());
  }

  public String groupType; // required
  public String itemId; // required
  public int accessCount; // required
  public String cleanTime; // required
  public String createTime; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GROUP_TYPE((short)1, "groupType"),
    ITEM_ID((short)2, "itemId"),
    ACCESS_COUNT((short)3, "accessCount"),
    CLEAN_TIME((short)4, "cleanTime"),
    CREATE_TIME((short)5, "createTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GROUP_TYPE
          return GROUP_TYPE;
        case 2: // ITEM_ID
          return ITEM_ID;
        case 3: // ACCESS_COUNT
          return ACCESS_COUNT;
        case 4: // CLEAN_TIME
          return CLEAN_TIME;
        case 5: // CREATE_TIME
          return CREATE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ACCESSCOUNT_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);
  private _Fields optionals[] = {_Fields.CREATE_TIME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GROUP_TYPE, new org.apache.thrift.meta_data.FieldMetaData("groupType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("itemId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCESS_COUNT, new org.apache.thrift.meta_data.FieldMetaData("accessCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CLEAN_TIME, new org.apache.thrift.meta_data.FieldMetaData("cleanTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TActionlockInfo.class, metaDataMap);
  }

  public TActionlockInfo() {
  }

  public TActionlockInfo(
    String groupType,
    String itemId,
    int accessCount,
    String cleanTime)
  {
    this();
    this.groupType = groupType;
    this.itemId = itemId;
    this.accessCount = accessCount;
    setAccessCountIsSet(true);
    this.cleanTime = cleanTime;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TActionlockInfo(TActionlockInfo other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetGroupType()) {
      this.groupType = other.groupType;
    }
    if (other.isSetItemId()) {
      this.itemId = other.itemId;
    }
    this.accessCount = other.accessCount;
    if (other.isSetCleanTime()) {
      this.cleanTime = other.cleanTime;
    }
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
  }

  public TActionlockInfo deepCopy() {
    return new TActionlockInfo(this);
  }

  @Override
  public void clear() {
    this.groupType = null;
    this.itemId = null;
    setAccessCountIsSet(false);
    this.accessCount = 0;
    this.cleanTime = null;
    this.createTime = null;
  }

  public String getGroupType() {
    return this.groupType;
  }

  public TActionlockInfo setGroupType(String groupType) {
    this.groupType = groupType;
    return this;
  }

  public void unsetGroupType() {
    this.groupType = null;
  }

  /** Returns true if field groupType is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupType() {
    return this.groupType != null;
  }

  public void setGroupTypeIsSet(boolean value) {
    if (!value) {
      this.groupType = null;
    }
  }

  public String getItemId() {
    return this.itemId;
  }

  public TActionlockInfo setItemId(String itemId) {
    this.itemId = itemId;
    return this;
  }

  public void unsetItemId() {
    this.itemId = null;
  }

  /** Returns true if field itemId is set (has been assigned a value) and false otherwise */
  public boolean isSetItemId() {
    return this.itemId != null;
  }

  public void setItemIdIsSet(boolean value) {
    if (!value) {
      this.itemId = null;
    }
  }

  public int getAccessCount() {
    return this.accessCount;
  }

  public TActionlockInfo setAccessCount(int accessCount) {
    this.accessCount = accessCount;
    setAccessCountIsSet(true);
    return this;
  }

  public void unsetAccessCount() {
    __isset_bit_vector.clear(__ACCESSCOUNT_ISSET_ID);
  }

  /** Returns true if field accessCount is set (has been assigned a value) and false otherwise */
  public boolean isSetAccessCount() {
    return __isset_bit_vector.get(__ACCESSCOUNT_ISSET_ID);
  }

  public void setAccessCountIsSet(boolean value) {
    __isset_bit_vector.set(__ACCESSCOUNT_ISSET_ID, value);
  }

  public String getCleanTime() {
    return this.cleanTime;
  }

  public TActionlockInfo setCleanTime(String cleanTime) {
    this.cleanTime = cleanTime;
    return this;
  }

  public void unsetCleanTime() {
    this.cleanTime = null;
  }

  /** Returns true if field cleanTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCleanTime() {
    return this.cleanTime != null;
  }

  public void setCleanTimeIsSet(boolean value) {
    if (!value) {
      this.cleanTime = null;
    }
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public TActionlockInfo setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case GROUP_TYPE:
      if (value == null) {
        unsetGroupType();
      } else {
        setGroupType((String)value);
      }
      break;

    case ITEM_ID:
      if (value == null) {
        unsetItemId();
      } else {
        setItemId((String)value);
      }
      break;

    case ACCESS_COUNT:
      if (value == null) {
        unsetAccessCount();
      } else {
        setAccessCount((Integer)value);
      }
      break;

    case CLEAN_TIME:
      if (value == null) {
        unsetCleanTime();
      } else {
        setCleanTime((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case GROUP_TYPE:
      return getGroupType();

    case ITEM_ID:
      return getItemId();

    case ACCESS_COUNT:
      return Integer.valueOf(getAccessCount());

    case CLEAN_TIME:
      return getCleanTime();

    case CREATE_TIME:
      return getCreateTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case GROUP_TYPE:
      return isSetGroupType();
    case ITEM_ID:
      return isSetItemId();
    case ACCESS_COUNT:
      return isSetAccessCount();
    case CLEAN_TIME:
      return isSetCleanTime();
    case CREATE_TIME:
      return isSetCreateTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TActionlockInfo)
      return this.equals((TActionlockInfo)that);
    return false;
  }

  public boolean equals(TActionlockInfo that) {
    if (that == null)
      return false;

    boolean this_present_groupType = true && this.isSetGroupType();
    boolean that_present_groupType = true && that.isSetGroupType();
    if (this_present_groupType || that_present_groupType) {
      if (!(this_present_groupType && that_present_groupType))
        return false;
      if (!this.groupType.equals(that.groupType))
        return false;
    }

    boolean this_present_itemId = true && this.isSetItemId();
    boolean that_present_itemId = true && that.isSetItemId();
    if (this_present_itemId || that_present_itemId) {
      if (!(this_present_itemId && that_present_itemId))
        return false;
      if (!this.itemId.equals(that.itemId))
        return false;
    }

    boolean this_present_accessCount = true;
    boolean that_present_accessCount = true;
    if (this_present_accessCount || that_present_accessCount) {
      if (!(this_present_accessCount && that_present_accessCount))
        return false;
      if (this.accessCount != that.accessCount)
        return false;
    }

    boolean this_present_cleanTime = true && this.isSetCleanTime();
    boolean that_present_cleanTime = true && that.isSetCleanTime();
    if (this_present_cleanTime || that_present_cleanTime) {
      if (!(this_present_cleanTime && that_present_cleanTime))
        return false;
      if (!this.cleanTime.equals(that.cleanTime))
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TActionlockInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TActionlockInfo typedOther = (TActionlockInfo)other;

    lastComparison = Boolean.valueOf(isSetGroupType()).compareTo(typedOther.isSetGroupType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupType, typedOther.groupType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItemId()).compareTo(typedOther.isSetItemId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemId, typedOther.itemId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccessCount()).compareTo(typedOther.isSetAccessCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccessCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessCount, typedOther.accessCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCleanTime()).compareTo(typedOther.isSetCleanTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCleanTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cleanTime, typedOther.cleanTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(typedOther.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, typedOther.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TActionlockInfo(");
    boolean first = true;

    sb.append("groupType:");
    if (this.groupType == null) {
      sb.append("null");
    } else {
      sb.append(this.groupType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("itemId:");
    if (this.itemId == null) {
      sb.append("null");
    } else {
      sb.append(this.itemId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("accessCount:");
    sb.append(this.accessCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cleanTime:");
    if (this.cleanTime == null) {
      sb.append("null");
    } else {
      sb.append(this.cleanTime);
    }
    first = false;
    if (isSetCreateTime()) {
      if (!first) sb.append(", ");
      sb.append("createTime:");
      if (this.createTime == null) {
        sb.append("null");
      } else {
        sb.append(this.createTime);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TActionlockInfoStandardSchemeFactory implements SchemeFactory {
    public TActionlockInfoStandardScheme getScheme() {
      return new TActionlockInfoStandardScheme();
    }
  }

  private static class TActionlockInfoStandardScheme extends StandardScheme<TActionlockInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TActionlockInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GROUP_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.groupType = iprot.readString();
              struct.setGroupTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ITEM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.itemId = iprot.readString();
              struct.setItemIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ACCESS_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.accessCount = iprot.readI32();
              struct.setAccessCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CLEAN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cleanTime = iprot.readString();
              struct.setCleanTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TActionlockInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.groupType != null) {
        oprot.writeFieldBegin(GROUP_TYPE_FIELD_DESC);
        oprot.writeString(struct.groupType);
        oprot.writeFieldEnd();
      }
      if (struct.itemId != null) {
        oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
        oprot.writeString(struct.itemId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ACCESS_COUNT_FIELD_DESC);
      oprot.writeI32(struct.accessCount);
      oprot.writeFieldEnd();
      if (struct.cleanTime != null) {
        oprot.writeFieldBegin(CLEAN_TIME_FIELD_DESC);
        oprot.writeString(struct.cleanTime);
        oprot.writeFieldEnd();
      }
      if (struct.createTime != null) {
        if (struct.isSetCreateTime()) {
          oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
          oprot.writeString(struct.createTime);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TActionlockInfoTupleSchemeFactory implements SchemeFactory {
    public TActionlockInfoTupleScheme getScheme() {
      return new TActionlockInfoTupleScheme();
    }
  }

  private static class TActionlockInfoTupleScheme extends TupleScheme<TActionlockInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TActionlockInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetGroupType()) {
        optionals.set(0);
      }
      if (struct.isSetItemId()) {
        optionals.set(1);
      }
      if (struct.isSetAccessCount()) {
        optionals.set(2);
      }
      if (struct.isSetCleanTime()) {
        optionals.set(3);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetGroupType()) {
        oprot.writeString(struct.groupType);
      }
      if (struct.isSetItemId()) {
        oprot.writeString(struct.itemId);
      }
      if (struct.isSetAccessCount()) {
        oprot.writeI32(struct.accessCount);
      }
      if (struct.isSetCleanTime()) {
        oprot.writeString(struct.cleanTime);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TActionlockInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.groupType = iprot.readString();
        struct.setGroupTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.itemId = iprot.readString();
        struct.setItemIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.accessCount = iprot.readI32();
        struct.setAccessCountIsSet(true);
      }
      if (incoming.get(3)) {
        struct.cleanTime = iprot.readString();
        struct.setCleanTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
    }
  }

}

