/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package bma.siteone.actionlock.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TActionlockService {

  public interface Iface {

    public TActionlockInfo getActionlock(String groupType, String itemId, boolean timeout) throws org.apache.thrift.TException;

    public int setActionlock(String groupType, String itemId, int accessCount, int cleanDelay) throws org.apache.thrift.TException;

    public boolean checkActionlock(String groupType, String itemId, int accessCount, boolean release) throws org.apache.thrift.TException;

    public boolean deleteActionlock(String groupType, String itemId) throws org.apache.thrift.TException;

    public boolean deleteActionlockGroup(String groupType) throws org.apache.thrift.TException;

    public void cleanActionlock(String groupType) throws org.apache.thrift.TException;

    public List<String> listActionlockGroupType() throws org.apache.thrift.TException;

    public TActionlockSearchResult searchActionlock(String sql, int page, int pageSize) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getActionlock(String groupType, String itemId, boolean timeout, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getActionlock_call> resultHandler) throws org.apache.thrift.TException;

    public void setActionlock(String groupType, String itemId, int accessCount, int cleanDelay, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.setActionlock_call> resultHandler) throws org.apache.thrift.TException;

    public void checkActionlock(String groupType, String itemId, int accessCount, boolean release, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.checkActionlock_call> resultHandler) throws org.apache.thrift.TException;

    public void deleteActionlock(String groupType, String itemId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deleteActionlock_call> resultHandler) throws org.apache.thrift.TException;

    public void deleteActionlockGroup(String groupType, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deleteActionlockGroup_call> resultHandler) throws org.apache.thrift.TException;

    public void cleanActionlock(String groupType, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.cleanActionlock_call> resultHandler) throws org.apache.thrift.TException;

    public void listActionlockGroupType(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.listActionlockGroupType_call> resultHandler) throws org.apache.thrift.TException;

    public void searchActionlock(String sql, int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.searchActionlock_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public TActionlockInfo getActionlock(String groupType, String itemId, boolean timeout) throws org.apache.thrift.TException
    {
      send_getActionlock(groupType, itemId, timeout);
      return recv_getActionlock();
    }

    public void send_getActionlock(String groupType, String itemId, boolean timeout) throws org.apache.thrift.TException
    {
      getActionlock_args args = new getActionlock_args();
      args.setGroupType(groupType);
      args.setItemId(itemId);
      args.setTimeout(timeout);
      sendBase("getActionlock", args);
    }

    public TActionlockInfo recv_getActionlock() throws org.apache.thrift.TException
    {
      getActionlock_result result = new getActionlock_result();
      receiveBase(result, "getActionlock");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getActionlock failed: unknown result");
    }

    public int setActionlock(String groupType, String itemId, int accessCount, int cleanDelay) throws org.apache.thrift.TException
    {
      send_setActionlock(groupType, itemId, accessCount, cleanDelay);
      return recv_setActionlock();
    }

    public void send_setActionlock(String groupType, String itemId, int accessCount, int cleanDelay) throws org.apache.thrift.TException
    {
      setActionlock_args args = new setActionlock_args();
      args.setGroupType(groupType);
      args.setItemId(itemId);
      args.setAccessCount(accessCount);
      args.setCleanDelay(cleanDelay);
      sendBase("setActionlock", args);
    }

    public int recv_setActionlock() throws org.apache.thrift.TException
    {
      setActionlock_result result = new setActionlock_result();
      receiveBase(result, "setActionlock");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setActionlock failed: unknown result");
    }

    public boolean checkActionlock(String groupType, String itemId, int accessCount, boolean release) throws org.apache.thrift.TException
    {
      send_checkActionlock(groupType, itemId, accessCount, release);
      return recv_checkActionlock();
    }

    public void send_checkActionlock(String groupType, String itemId, int accessCount, boolean release) throws org.apache.thrift.TException
    {
      checkActionlock_args args = new checkActionlock_args();
      args.setGroupType(groupType);
      args.setItemId(itemId);
      args.setAccessCount(accessCount);
      args.setRelease(release);
      sendBase("checkActionlock", args);
    }

    public boolean recv_checkActionlock() throws org.apache.thrift.TException
    {
      checkActionlock_result result = new checkActionlock_result();
      receiveBase(result, "checkActionlock");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkActionlock failed: unknown result");
    }

    public boolean deleteActionlock(String groupType, String itemId) throws org.apache.thrift.TException
    {
      send_deleteActionlock(groupType, itemId);
      return recv_deleteActionlock();
    }

    public void send_deleteActionlock(String groupType, String itemId) throws org.apache.thrift.TException
    {
      deleteActionlock_args args = new deleteActionlock_args();
      args.setGroupType(groupType);
      args.setItemId(itemId);
      sendBase("deleteActionlock", args);
    }

    public boolean recv_deleteActionlock() throws org.apache.thrift.TException
    {
      deleteActionlock_result result = new deleteActionlock_result();
      receiveBase(result, "deleteActionlock");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteActionlock failed: unknown result");
    }

    public boolean deleteActionlockGroup(String groupType) throws org.apache.thrift.TException
    {
      send_deleteActionlockGroup(groupType);
      return recv_deleteActionlockGroup();
    }

    public void send_deleteActionlockGroup(String groupType) throws org.apache.thrift.TException
    {
      deleteActionlockGroup_args args = new deleteActionlockGroup_args();
      args.setGroupType(groupType);
      sendBase("deleteActionlockGroup", args);
    }

    public boolean recv_deleteActionlockGroup() throws org.apache.thrift.TException
    {
      deleteActionlockGroup_result result = new deleteActionlockGroup_result();
      receiveBase(result, "deleteActionlockGroup");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteActionlockGroup failed: unknown result");
    }

    public void cleanActionlock(String groupType) throws org.apache.thrift.TException
    {
      send_cleanActionlock(groupType);
    }

    public void send_cleanActionlock(String groupType) throws org.apache.thrift.TException
    {
      cleanActionlock_args args = new cleanActionlock_args();
      args.setGroupType(groupType);
      sendBase("cleanActionlock", args);
    }

    public List<String> listActionlockGroupType() throws org.apache.thrift.TException
    {
      send_listActionlockGroupType();
      return recv_listActionlockGroupType();
    }

    public void send_listActionlockGroupType() throws org.apache.thrift.TException
    {
      listActionlockGroupType_args args = new listActionlockGroupType_args();
      sendBase("listActionlockGroupType", args);
    }

    public List<String> recv_listActionlockGroupType() throws org.apache.thrift.TException
    {
      listActionlockGroupType_result result = new listActionlockGroupType_result();
      receiveBase(result, "listActionlockGroupType");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listActionlockGroupType failed: unknown result");
    }

    public TActionlockSearchResult searchActionlock(String sql, int page, int pageSize) throws org.apache.thrift.TException
    {
      send_searchActionlock(sql, page, pageSize);
      return recv_searchActionlock();
    }

    public void send_searchActionlock(String sql, int page, int pageSize) throws org.apache.thrift.TException
    {
      searchActionlock_args args = new searchActionlock_args();
      args.setSql(sql);
      args.setPage(page);
      args.setPageSize(pageSize);
      sendBase("searchActionlock", args);
    }

    public TActionlockSearchResult recv_searchActionlock() throws org.apache.thrift.TException
    {
      searchActionlock_result result = new searchActionlock_result();
      receiveBase(result, "searchActionlock");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "searchActionlock failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getActionlock(String groupType, String itemId, boolean timeout, org.apache.thrift.async.AsyncMethodCallback<getActionlock_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getActionlock_call method_call = new getActionlock_call(groupType, itemId, timeout, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getActionlock_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String groupType;
      private String itemId;
      private boolean timeout;
      public getActionlock_call(String groupType, String itemId, boolean timeout, org.apache.thrift.async.AsyncMethodCallback<getActionlock_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.groupType = groupType;
        this.itemId = itemId;
        this.timeout = timeout;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getActionlock", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getActionlock_args args = new getActionlock_args();
        args.setGroupType(groupType);
        args.setItemId(itemId);
        args.setTimeout(timeout);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TActionlockInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getActionlock();
      }
    }

    public void setActionlock(String groupType, String itemId, int accessCount, int cleanDelay, org.apache.thrift.async.AsyncMethodCallback<setActionlock_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setActionlock_call method_call = new setActionlock_call(groupType, itemId, accessCount, cleanDelay, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setActionlock_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String groupType;
      private String itemId;
      private int accessCount;
      private int cleanDelay;
      public setActionlock_call(String groupType, String itemId, int accessCount, int cleanDelay, org.apache.thrift.async.AsyncMethodCallback<setActionlock_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.groupType = groupType;
        this.itemId = itemId;
        this.accessCount = accessCount;
        this.cleanDelay = cleanDelay;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setActionlock", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setActionlock_args args = new setActionlock_args();
        args.setGroupType(groupType);
        args.setItemId(itemId);
        args.setAccessCount(accessCount);
        args.setCleanDelay(cleanDelay);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setActionlock();
      }
    }

    public void checkActionlock(String groupType, String itemId, int accessCount, boolean release, org.apache.thrift.async.AsyncMethodCallback<checkActionlock_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      checkActionlock_call method_call = new checkActionlock_call(groupType, itemId, accessCount, release, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkActionlock_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String groupType;
      private String itemId;
      private int accessCount;
      private boolean release;
      public checkActionlock_call(String groupType, String itemId, int accessCount, boolean release, org.apache.thrift.async.AsyncMethodCallback<checkActionlock_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.groupType = groupType;
        this.itemId = itemId;
        this.accessCount = accessCount;
        this.release = release;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkActionlock", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkActionlock_args args = new checkActionlock_args();
        args.setGroupType(groupType);
        args.setItemId(itemId);
        args.setAccessCount(accessCount);
        args.setRelease(release);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkActionlock();
      }
    }

    public void deleteActionlock(String groupType, String itemId, org.apache.thrift.async.AsyncMethodCallback<deleteActionlock_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteActionlock_call method_call = new deleteActionlock_call(groupType, itemId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteActionlock_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String groupType;
      private String itemId;
      public deleteActionlock_call(String groupType, String itemId, org.apache.thrift.async.AsyncMethodCallback<deleteActionlock_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.groupType = groupType;
        this.itemId = itemId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteActionlock", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteActionlock_args args = new deleteActionlock_args();
        args.setGroupType(groupType);
        args.setItemId(itemId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteActionlock();
      }
    }

    public void deleteActionlockGroup(String groupType, org.apache.thrift.async.AsyncMethodCallback<deleteActionlockGroup_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteActionlockGroup_call method_call = new deleteActionlockGroup_call(groupType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteActionlockGroup_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String groupType;
      public deleteActionlockGroup_call(String groupType, org.apache.thrift.async.AsyncMethodCallback<deleteActionlockGroup_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.groupType = groupType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteActionlockGroup", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteActionlockGroup_args args = new deleteActionlockGroup_args();
        args.setGroupType(groupType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteActionlockGroup();
      }
    }

    public void cleanActionlock(String groupType, org.apache.thrift.async.AsyncMethodCallback<cleanActionlock_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      cleanActionlock_call method_call = new cleanActionlock_call(groupType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class cleanActionlock_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String groupType;
      public cleanActionlock_call(String groupType, org.apache.thrift.async.AsyncMethodCallback<cleanActionlock_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.groupType = groupType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("cleanActionlock", org.apache.thrift.protocol.TMessageType.CALL, 0));
        cleanActionlock_args args = new cleanActionlock_args();
        args.setGroupType(groupType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void listActionlockGroupType(org.apache.thrift.async.AsyncMethodCallback<listActionlockGroupType_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listActionlockGroupType_call method_call = new listActionlockGroupType_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listActionlockGroupType_call extends org.apache.thrift.async.TAsyncMethodCall {
      public listActionlockGroupType_call(org.apache.thrift.async.AsyncMethodCallback<listActionlockGroupType_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listActionlockGroupType", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listActionlockGroupType_args args = new listActionlockGroupType_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listActionlockGroupType();
      }
    }

    public void searchActionlock(String sql, int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<searchActionlock_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      searchActionlock_call method_call = new searchActionlock_call(sql, page, pageSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class searchActionlock_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String sql;
      private int page;
      private int pageSize;
      public searchActionlock_call(String sql, int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<searchActionlock_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sql = sql;
        this.page = page;
        this.pageSize = pageSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchActionlock", org.apache.thrift.protocol.TMessageType.CALL, 0));
        searchActionlock_args args = new searchActionlock_args();
        args.setSql(sql);
        args.setPage(page);
        args.setPageSize(pageSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TActionlockSearchResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_searchActionlock();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getActionlock", new getActionlock());
      processMap.put("setActionlock", new setActionlock());
      processMap.put("checkActionlock", new checkActionlock());
      processMap.put("deleteActionlock", new deleteActionlock());
      processMap.put("deleteActionlockGroup", new deleteActionlockGroup());
      processMap.put("cleanActionlock", new cleanActionlock());
      processMap.put("listActionlockGroupType", new listActionlockGroupType());
      processMap.put("searchActionlock", new searchActionlock());
      return processMap;
    }

    private static class getActionlock<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getActionlock_args> {
      public getActionlock() {
        super("getActionlock");
      }

      protected getActionlock_args getEmptyArgsInstance() {
        return new getActionlock_args();
      }

      protected getActionlock_result getResult(I iface, getActionlock_args args) throws org.apache.thrift.TException {
        getActionlock_result result = new getActionlock_result();
        result.success = iface.getActionlock(args.groupType, args.itemId, args.timeout);
        return result;
      }
    }

    private static class setActionlock<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setActionlock_args> {
      public setActionlock() {
        super("setActionlock");
      }

      protected setActionlock_args getEmptyArgsInstance() {
        return new setActionlock_args();
      }

      protected setActionlock_result getResult(I iface, setActionlock_args args) throws org.apache.thrift.TException {
        setActionlock_result result = new setActionlock_result();
        result.success = iface.setActionlock(args.groupType, args.itemId, args.accessCount, args.cleanDelay);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class checkActionlock<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkActionlock_args> {
      public checkActionlock() {
        super("checkActionlock");
      }

      protected checkActionlock_args getEmptyArgsInstance() {
        return new checkActionlock_args();
      }

      protected checkActionlock_result getResult(I iface, checkActionlock_args args) throws org.apache.thrift.TException {
        checkActionlock_result result = new checkActionlock_result();
        result.success = iface.checkActionlock(args.groupType, args.itemId, args.accessCount, args.release);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class deleteActionlock<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteActionlock_args> {
      public deleteActionlock() {
        super("deleteActionlock");
      }

      protected deleteActionlock_args getEmptyArgsInstance() {
        return new deleteActionlock_args();
      }

      protected deleteActionlock_result getResult(I iface, deleteActionlock_args args) throws org.apache.thrift.TException {
        deleteActionlock_result result = new deleteActionlock_result();
        result.success = iface.deleteActionlock(args.groupType, args.itemId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class deleteActionlockGroup<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteActionlockGroup_args> {
      public deleteActionlockGroup() {
        super("deleteActionlockGroup");
      }

      protected deleteActionlockGroup_args getEmptyArgsInstance() {
        return new deleteActionlockGroup_args();
      }

      protected deleteActionlockGroup_result getResult(I iface, deleteActionlockGroup_args args) throws org.apache.thrift.TException {
        deleteActionlockGroup_result result = new deleteActionlockGroup_result();
        result.success = iface.deleteActionlockGroup(args.groupType);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class cleanActionlock<I extends Iface> extends org.apache.thrift.ProcessFunction<I, cleanActionlock_args> {
      public cleanActionlock() {
        super("cleanActionlock");
      }

      protected cleanActionlock_args getEmptyArgsInstance() {
        return new cleanActionlock_args();
      }

      protected org.apache.thrift.TBase getResult(I iface, cleanActionlock_args args) throws org.apache.thrift.TException {
        iface.cleanActionlock(args.groupType);
        return null;
      }
    }

    private static class listActionlockGroupType<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listActionlockGroupType_args> {
      public listActionlockGroupType() {
        super("listActionlockGroupType");
      }

      protected listActionlockGroupType_args getEmptyArgsInstance() {
        return new listActionlockGroupType_args();
      }

      protected listActionlockGroupType_result getResult(I iface, listActionlockGroupType_args args) throws org.apache.thrift.TException {
        listActionlockGroupType_result result = new listActionlockGroupType_result();
        result.success = iface.listActionlockGroupType();
        return result;
      }
    }

    private static class searchActionlock<I extends Iface> extends org.apache.thrift.ProcessFunction<I, searchActionlock_args> {
      public searchActionlock() {
        super("searchActionlock");
      }

      protected searchActionlock_args getEmptyArgsInstance() {
        return new searchActionlock_args();
      }

      protected searchActionlock_result getResult(I iface, searchActionlock_args args) throws org.apache.thrift.TException {
        searchActionlock_result result = new searchActionlock_result();
        result.success = iface.searchActionlock(args.sql, args.page, args.pageSize);
        return result;
      }
    }

  }

  public static class getActionlock_args implements org.apache.thrift.TBase<getActionlock_args, getActionlock_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getActionlock_args");

    private static final org.apache.thrift.protocol.TField GROUP_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("groupType", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("itemId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TIMEOUT_FIELD_DESC = new org.apache.thrift.protocol.TField("timeout", org.apache.thrift.protocol.TType.BOOL, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getActionlock_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getActionlock_argsTupleSchemeFactory());
    }

    public String groupType; // required
    public String itemId; // required
    public boolean timeout; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GROUP_TYPE((short)1, "groupType"),
      ITEM_ID((short)2, "itemId"),
      TIMEOUT((short)3, "timeout");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GROUP_TYPE
            return GROUP_TYPE;
          case 2: // ITEM_ID
            return ITEM_ID;
          case 3: // TIMEOUT
            return TIMEOUT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TIMEOUT_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GROUP_TYPE, new org.apache.thrift.meta_data.FieldMetaData("groupType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("itemId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TIMEOUT, new org.apache.thrift.meta_data.FieldMetaData("timeout", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getActionlock_args.class, metaDataMap);
    }

    public getActionlock_args() {
    }

    public getActionlock_args(
      String groupType,
      String itemId,
      boolean timeout)
    {
      this();
      this.groupType = groupType;
      this.itemId = itemId;
      this.timeout = timeout;
      setTimeoutIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getActionlock_args(getActionlock_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetGroupType()) {
        this.groupType = other.groupType;
      }
      if (other.isSetItemId()) {
        this.itemId = other.itemId;
      }
      this.timeout = other.timeout;
    }

    public getActionlock_args deepCopy() {
      return new getActionlock_args(this);
    }

    @Override
    public void clear() {
      this.groupType = null;
      this.itemId = null;
      setTimeoutIsSet(false);
      this.timeout = false;
    }

    public String getGroupType() {
      return this.groupType;
    }

    public getActionlock_args setGroupType(String groupType) {
      this.groupType = groupType;
      return this;
    }

    public void unsetGroupType() {
      this.groupType = null;
    }

    /** Returns true if field groupType is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupType() {
      return this.groupType != null;
    }

    public void setGroupTypeIsSet(boolean value) {
      if (!value) {
        this.groupType = null;
      }
    }

    public String getItemId() {
      return this.itemId;
    }

    public getActionlock_args setItemId(String itemId) {
      this.itemId = itemId;
      return this;
    }

    public void unsetItemId() {
      this.itemId = null;
    }

    /** Returns true if field itemId is set (has been assigned a value) and false otherwise */
    public boolean isSetItemId() {
      return this.itemId != null;
    }

    public void setItemIdIsSet(boolean value) {
      if (!value) {
        this.itemId = null;
      }
    }

    public boolean isTimeout() {
      return this.timeout;
    }

    public getActionlock_args setTimeout(boolean timeout) {
      this.timeout = timeout;
      setTimeoutIsSet(true);
      return this;
    }

    public void unsetTimeout() {
      __isset_bit_vector.clear(__TIMEOUT_ISSET_ID);
    }

    /** Returns true if field timeout is set (has been assigned a value) and false otherwise */
    public boolean isSetTimeout() {
      return __isset_bit_vector.get(__TIMEOUT_ISSET_ID);
    }

    public void setTimeoutIsSet(boolean value) {
      __isset_bit_vector.set(__TIMEOUT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GROUP_TYPE:
        if (value == null) {
          unsetGroupType();
        } else {
          setGroupType((String)value);
        }
        break;

      case ITEM_ID:
        if (value == null) {
          unsetItemId();
        } else {
          setItemId((String)value);
        }
        break;

      case TIMEOUT:
        if (value == null) {
          unsetTimeout();
        } else {
          setTimeout((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GROUP_TYPE:
        return getGroupType();

      case ITEM_ID:
        return getItemId();

      case TIMEOUT:
        return Boolean.valueOf(isTimeout());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GROUP_TYPE:
        return isSetGroupType();
      case ITEM_ID:
        return isSetItemId();
      case TIMEOUT:
        return isSetTimeout();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getActionlock_args)
        return this.equals((getActionlock_args)that);
      return false;
    }

    public boolean equals(getActionlock_args that) {
      if (that == null)
        return false;

      boolean this_present_groupType = true && this.isSetGroupType();
      boolean that_present_groupType = true && that.isSetGroupType();
      if (this_present_groupType || that_present_groupType) {
        if (!(this_present_groupType && that_present_groupType))
          return false;
        if (!this.groupType.equals(that.groupType))
          return false;
      }

      boolean this_present_itemId = true && this.isSetItemId();
      boolean that_present_itemId = true && that.isSetItemId();
      if (this_present_itemId || that_present_itemId) {
        if (!(this_present_itemId && that_present_itemId))
          return false;
        if (!this.itemId.equals(that.itemId))
          return false;
      }

      boolean this_present_timeout = true;
      boolean that_present_timeout = true;
      if (this_present_timeout || that_present_timeout) {
        if (!(this_present_timeout && that_present_timeout))
          return false;
        if (this.timeout != that.timeout)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getActionlock_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getActionlock_args typedOther = (getActionlock_args)other;

      lastComparison = Boolean.valueOf(isSetGroupType()).compareTo(typedOther.isSetGroupType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupType, typedOther.groupType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItemId()).compareTo(typedOther.isSetItemId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItemId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemId, typedOther.itemId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimeout()).compareTo(typedOther.isSetTimeout());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimeout()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeout, typedOther.timeout);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getActionlock_args(");
      boolean first = true;

      sb.append("groupType:");
      if (this.groupType == null) {
        sb.append("null");
      } else {
        sb.append(this.groupType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("itemId:");
      if (this.itemId == null) {
        sb.append("null");
      } else {
        sb.append(this.itemId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("timeout:");
      sb.append(this.timeout);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getActionlock_argsStandardSchemeFactory implements SchemeFactory {
      public getActionlock_argsStandardScheme getScheme() {
        return new getActionlock_argsStandardScheme();
      }
    }

    private static class getActionlock_argsStandardScheme extends StandardScheme<getActionlock_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getActionlock_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GROUP_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.groupType = iprot.readString();
                struct.setGroupTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ITEM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.itemId = iprot.readString();
                struct.setItemIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TIMEOUT
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.timeout = iprot.readBool();
                struct.setTimeoutIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getActionlock_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.groupType != null) {
          oprot.writeFieldBegin(GROUP_TYPE_FIELD_DESC);
          oprot.writeString(struct.groupType);
          oprot.writeFieldEnd();
        }
        if (struct.itemId != null) {
          oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
          oprot.writeString(struct.itemId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIMEOUT_FIELD_DESC);
        oprot.writeBool(struct.timeout);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getActionlock_argsTupleSchemeFactory implements SchemeFactory {
      public getActionlock_argsTupleScheme getScheme() {
        return new getActionlock_argsTupleScheme();
      }
    }

    private static class getActionlock_argsTupleScheme extends TupleScheme<getActionlock_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getActionlock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGroupType()) {
          optionals.set(0);
        }
        if (struct.isSetItemId()) {
          optionals.set(1);
        }
        if (struct.isSetTimeout()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetGroupType()) {
          oprot.writeString(struct.groupType);
        }
        if (struct.isSetItemId()) {
          oprot.writeString(struct.itemId);
        }
        if (struct.isSetTimeout()) {
          oprot.writeBool(struct.timeout);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getActionlock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.groupType = iprot.readString();
          struct.setGroupTypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.itemId = iprot.readString();
          struct.setItemIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.timeout = iprot.readBool();
          struct.setTimeoutIsSet(true);
        }
      }
    }

  }

  public static class getActionlock_result implements org.apache.thrift.TBase<getActionlock_result, getActionlock_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getActionlock_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getActionlock_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getActionlock_resultTupleSchemeFactory());
    }

    public TActionlockInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TActionlockInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getActionlock_result.class, metaDataMap);
    }

    public getActionlock_result() {
    }

    public getActionlock_result(
      TActionlockInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getActionlock_result(getActionlock_result other) {
      if (other.isSetSuccess()) {
        this.success = new TActionlockInfo(other.success);
      }
    }

    public getActionlock_result deepCopy() {
      return new getActionlock_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TActionlockInfo getSuccess() {
      return this.success;
    }

    public getActionlock_result setSuccess(TActionlockInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TActionlockInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getActionlock_result)
        return this.equals((getActionlock_result)that);
      return false;
    }

    public boolean equals(getActionlock_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getActionlock_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getActionlock_result typedOther = (getActionlock_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getActionlock_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getActionlock_resultStandardSchemeFactory implements SchemeFactory {
      public getActionlock_resultStandardScheme getScheme() {
        return new getActionlock_resultStandardScheme();
      }
    }

    private static class getActionlock_resultStandardScheme extends StandardScheme<getActionlock_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getActionlock_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TActionlockInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getActionlock_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getActionlock_resultTupleSchemeFactory implements SchemeFactory {
      public getActionlock_resultTupleScheme getScheme() {
        return new getActionlock_resultTupleScheme();
      }
    }

    private static class getActionlock_resultTupleScheme extends TupleScheme<getActionlock_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getActionlock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getActionlock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TActionlockInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class setActionlock_args implements org.apache.thrift.TBase<setActionlock_args, setActionlock_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setActionlock_args");

    private static final org.apache.thrift.protocol.TField GROUP_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("groupType", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("itemId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ACCESS_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("accessCount", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField CLEAN_DELAY_FIELD_DESC = new org.apache.thrift.protocol.TField("cleanDelay", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setActionlock_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setActionlock_argsTupleSchemeFactory());
    }

    public String groupType; // required
    public String itemId; // required
    public int accessCount; // required
    public int cleanDelay; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GROUP_TYPE((short)1, "groupType"),
      ITEM_ID((short)2, "itemId"),
      ACCESS_COUNT((short)3, "accessCount"),
      CLEAN_DELAY((short)4, "cleanDelay");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GROUP_TYPE
            return GROUP_TYPE;
          case 2: // ITEM_ID
            return ITEM_ID;
          case 3: // ACCESS_COUNT
            return ACCESS_COUNT;
          case 4: // CLEAN_DELAY
            return CLEAN_DELAY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ACCESSCOUNT_ISSET_ID = 0;
    private static final int __CLEANDELAY_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GROUP_TYPE, new org.apache.thrift.meta_data.FieldMetaData("groupType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("itemId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACCESS_COUNT, new org.apache.thrift.meta_data.FieldMetaData("accessCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CLEAN_DELAY, new org.apache.thrift.meta_data.FieldMetaData("cleanDelay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setActionlock_args.class, metaDataMap);
    }

    public setActionlock_args() {
    }

    public setActionlock_args(
      String groupType,
      String itemId,
      int accessCount,
      int cleanDelay)
    {
      this();
      this.groupType = groupType;
      this.itemId = itemId;
      this.accessCount = accessCount;
      setAccessCountIsSet(true);
      this.cleanDelay = cleanDelay;
      setCleanDelayIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setActionlock_args(setActionlock_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetGroupType()) {
        this.groupType = other.groupType;
      }
      if (other.isSetItemId()) {
        this.itemId = other.itemId;
      }
      this.accessCount = other.accessCount;
      this.cleanDelay = other.cleanDelay;
    }

    public setActionlock_args deepCopy() {
      return new setActionlock_args(this);
    }

    @Override
    public void clear() {
      this.groupType = null;
      this.itemId = null;
      setAccessCountIsSet(false);
      this.accessCount = 0;
      setCleanDelayIsSet(false);
      this.cleanDelay = 0;
    }

    public String getGroupType() {
      return this.groupType;
    }

    public setActionlock_args setGroupType(String groupType) {
      this.groupType = groupType;
      return this;
    }

    public void unsetGroupType() {
      this.groupType = null;
    }

    /** Returns true if field groupType is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupType() {
      return this.groupType != null;
    }

    public void setGroupTypeIsSet(boolean value) {
      if (!value) {
        this.groupType = null;
      }
    }

    public String getItemId() {
      return this.itemId;
    }

    public setActionlock_args setItemId(String itemId) {
      this.itemId = itemId;
      return this;
    }

    public void unsetItemId() {
      this.itemId = null;
    }

    /** Returns true if field itemId is set (has been assigned a value) and false otherwise */
    public boolean isSetItemId() {
      return this.itemId != null;
    }

    public void setItemIdIsSet(boolean value) {
      if (!value) {
        this.itemId = null;
      }
    }

    public int getAccessCount() {
      return this.accessCount;
    }

    public setActionlock_args setAccessCount(int accessCount) {
      this.accessCount = accessCount;
      setAccessCountIsSet(true);
      return this;
    }

    public void unsetAccessCount() {
      __isset_bit_vector.clear(__ACCESSCOUNT_ISSET_ID);
    }

    /** Returns true if field accessCount is set (has been assigned a value) and false otherwise */
    public boolean isSetAccessCount() {
      return __isset_bit_vector.get(__ACCESSCOUNT_ISSET_ID);
    }

    public void setAccessCountIsSet(boolean value) {
      __isset_bit_vector.set(__ACCESSCOUNT_ISSET_ID, value);
    }

    public int getCleanDelay() {
      return this.cleanDelay;
    }

    public setActionlock_args setCleanDelay(int cleanDelay) {
      this.cleanDelay = cleanDelay;
      setCleanDelayIsSet(true);
      return this;
    }

    public void unsetCleanDelay() {
      __isset_bit_vector.clear(__CLEANDELAY_ISSET_ID);
    }

    /** Returns true if field cleanDelay is set (has been assigned a value) and false otherwise */
    public boolean isSetCleanDelay() {
      return __isset_bit_vector.get(__CLEANDELAY_ISSET_ID);
    }

    public void setCleanDelayIsSet(boolean value) {
      __isset_bit_vector.set(__CLEANDELAY_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GROUP_TYPE:
        if (value == null) {
          unsetGroupType();
        } else {
          setGroupType((String)value);
        }
        break;

      case ITEM_ID:
        if (value == null) {
          unsetItemId();
        } else {
          setItemId((String)value);
        }
        break;

      case ACCESS_COUNT:
        if (value == null) {
          unsetAccessCount();
        } else {
          setAccessCount((Integer)value);
        }
        break;

      case CLEAN_DELAY:
        if (value == null) {
          unsetCleanDelay();
        } else {
          setCleanDelay((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GROUP_TYPE:
        return getGroupType();

      case ITEM_ID:
        return getItemId();

      case ACCESS_COUNT:
        return Integer.valueOf(getAccessCount());

      case CLEAN_DELAY:
        return Integer.valueOf(getCleanDelay());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GROUP_TYPE:
        return isSetGroupType();
      case ITEM_ID:
        return isSetItemId();
      case ACCESS_COUNT:
        return isSetAccessCount();
      case CLEAN_DELAY:
        return isSetCleanDelay();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setActionlock_args)
        return this.equals((setActionlock_args)that);
      return false;
    }

    public boolean equals(setActionlock_args that) {
      if (that == null)
        return false;

      boolean this_present_groupType = true && this.isSetGroupType();
      boolean that_present_groupType = true && that.isSetGroupType();
      if (this_present_groupType || that_present_groupType) {
        if (!(this_present_groupType && that_present_groupType))
          return false;
        if (!this.groupType.equals(that.groupType))
          return false;
      }

      boolean this_present_itemId = true && this.isSetItemId();
      boolean that_present_itemId = true && that.isSetItemId();
      if (this_present_itemId || that_present_itemId) {
        if (!(this_present_itemId && that_present_itemId))
          return false;
        if (!this.itemId.equals(that.itemId))
          return false;
      }

      boolean this_present_accessCount = true;
      boolean that_present_accessCount = true;
      if (this_present_accessCount || that_present_accessCount) {
        if (!(this_present_accessCount && that_present_accessCount))
          return false;
        if (this.accessCount != that.accessCount)
          return false;
      }

      boolean this_present_cleanDelay = true;
      boolean that_present_cleanDelay = true;
      if (this_present_cleanDelay || that_present_cleanDelay) {
        if (!(this_present_cleanDelay && that_present_cleanDelay))
          return false;
        if (this.cleanDelay != that.cleanDelay)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setActionlock_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setActionlock_args typedOther = (setActionlock_args)other;

      lastComparison = Boolean.valueOf(isSetGroupType()).compareTo(typedOther.isSetGroupType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupType, typedOther.groupType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItemId()).compareTo(typedOther.isSetItemId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItemId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemId, typedOther.itemId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccessCount()).compareTo(typedOther.isSetAccessCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccessCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessCount, typedOther.accessCount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCleanDelay()).compareTo(typedOther.isSetCleanDelay());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCleanDelay()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cleanDelay, typedOther.cleanDelay);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setActionlock_args(");
      boolean first = true;

      sb.append("groupType:");
      if (this.groupType == null) {
        sb.append("null");
      } else {
        sb.append(this.groupType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("itemId:");
      if (this.itemId == null) {
        sb.append("null");
      } else {
        sb.append(this.itemId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("accessCount:");
      sb.append(this.accessCount);
      first = false;
      if (!first) sb.append(", ");
      sb.append("cleanDelay:");
      sb.append(this.cleanDelay);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setActionlock_argsStandardSchemeFactory implements SchemeFactory {
      public setActionlock_argsStandardScheme getScheme() {
        return new setActionlock_argsStandardScheme();
      }
    }

    private static class setActionlock_argsStandardScheme extends StandardScheme<setActionlock_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setActionlock_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GROUP_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.groupType = iprot.readString();
                struct.setGroupTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ITEM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.itemId = iprot.readString();
                struct.setItemIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ACCESS_COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.accessCount = iprot.readI32();
                struct.setAccessCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CLEAN_DELAY
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cleanDelay = iprot.readI32();
                struct.setCleanDelayIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setActionlock_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.groupType != null) {
          oprot.writeFieldBegin(GROUP_TYPE_FIELD_DESC);
          oprot.writeString(struct.groupType);
          oprot.writeFieldEnd();
        }
        if (struct.itemId != null) {
          oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
          oprot.writeString(struct.itemId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ACCESS_COUNT_FIELD_DESC);
        oprot.writeI32(struct.accessCount);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CLEAN_DELAY_FIELD_DESC);
        oprot.writeI32(struct.cleanDelay);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setActionlock_argsTupleSchemeFactory implements SchemeFactory {
      public setActionlock_argsTupleScheme getScheme() {
        return new setActionlock_argsTupleScheme();
      }
    }

    private static class setActionlock_argsTupleScheme extends TupleScheme<setActionlock_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setActionlock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGroupType()) {
          optionals.set(0);
        }
        if (struct.isSetItemId()) {
          optionals.set(1);
        }
        if (struct.isSetAccessCount()) {
          optionals.set(2);
        }
        if (struct.isSetCleanDelay()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetGroupType()) {
          oprot.writeString(struct.groupType);
        }
        if (struct.isSetItemId()) {
          oprot.writeString(struct.itemId);
        }
        if (struct.isSetAccessCount()) {
          oprot.writeI32(struct.accessCount);
        }
        if (struct.isSetCleanDelay()) {
          oprot.writeI32(struct.cleanDelay);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setActionlock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.groupType = iprot.readString();
          struct.setGroupTypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.itemId = iprot.readString();
          struct.setItemIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.accessCount = iprot.readI32();
          struct.setAccessCountIsSet(true);
        }
        if (incoming.get(3)) {
          struct.cleanDelay = iprot.readI32();
          struct.setCleanDelayIsSet(true);
        }
      }
    }

  }

  public static class setActionlock_result implements org.apache.thrift.TBase<setActionlock_result, setActionlock_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setActionlock_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setActionlock_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setActionlock_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setActionlock_result.class, metaDataMap);
    }

    public setActionlock_result() {
    }

    public setActionlock_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setActionlock_result(setActionlock_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public setActionlock_result deepCopy() {
      return new setActionlock_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public setActionlock_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setActionlock_result)
        return this.equals((setActionlock_result)that);
      return false;
    }

    public boolean equals(setActionlock_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setActionlock_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setActionlock_result typedOther = (setActionlock_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setActionlock_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setActionlock_resultStandardSchemeFactory implements SchemeFactory {
      public setActionlock_resultStandardScheme getScheme() {
        return new setActionlock_resultStandardScheme();
      }
    }

    private static class setActionlock_resultStandardScheme extends StandardScheme<setActionlock_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setActionlock_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setActionlock_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setActionlock_resultTupleSchemeFactory implements SchemeFactory {
      public setActionlock_resultTupleScheme getScheme() {
        return new setActionlock_resultTupleScheme();
      }
    }

    private static class setActionlock_resultTupleScheme extends TupleScheme<setActionlock_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setActionlock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setActionlock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class checkActionlock_args implements org.apache.thrift.TBase<checkActionlock_args, checkActionlock_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkActionlock_args");

    private static final org.apache.thrift.protocol.TField GROUP_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("groupType", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("itemId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ACCESS_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("accessCount", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField RELEASE_FIELD_DESC = new org.apache.thrift.protocol.TField("release", org.apache.thrift.protocol.TType.BOOL, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkActionlock_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkActionlock_argsTupleSchemeFactory());
    }

    public String groupType; // required
    public String itemId; // required
    public int accessCount; // required
    public boolean release; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GROUP_TYPE((short)1, "groupType"),
      ITEM_ID((short)2, "itemId"),
      ACCESS_COUNT((short)3, "accessCount"),
      RELEASE((short)4, "release");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GROUP_TYPE
            return GROUP_TYPE;
          case 2: // ITEM_ID
            return ITEM_ID;
          case 3: // ACCESS_COUNT
            return ACCESS_COUNT;
          case 4: // RELEASE
            return RELEASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ACCESSCOUNT_ISSET_ID = 0;
    private static final int __RELEASE_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GROUP_TYPE, new org.apache.thrift.meta_data.FieldMetaData("groupType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("itemId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACCESS_COUNT, new org.apache.thrift.meta_data.FieldMetaData("accessCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.RELEASE, new org.apache.thrift.meta_data.FieldMetaData("release", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkActionlock_args.class, metaDataMap);
    }

    public checkActionlock_args() {
    }

    public checkActionlock_args(
      String groupType,
      String itemId,
      int accessCount,
      boolean release)
    {
      this();
      this.groupType = groupType;
      this.itemId = itemId;
      this.accessCount = accessCount;
      setAccessCountIsSet(true);
      this.release = release;
      setReleaseIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkActionlock_args(checkActionlock_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetGroupType()) {
        this.groupType = other.groupType;
      }
      if (other.isSetItemId()) {
        this.itemId = other.itemId;
      }
      this.accessCount = other.accessCount;
      this.release = other.release;
    }

    public checkActionlock_args deepCopy() {
      return new checkActionlock_args(this);
    }

    @Override
    public void clear() {
      this.groupType = null;
      this.itemId = null;
      setAccessCountIsSet(false);
      this.accessCount = 0;
      setReleaseIsSet(false);
      this.release = false;
    }

    public String getGroupType() {
      return this.groupType;
    }

    public checkActionlock_args setGroupType(String groupType) {
      this.groupType = groupType;
      return this;
    }

    public void unsetGroupType() {
      this.groupType = null;
    }

    /** Returns true if field groupType is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupType() {
      return this.groupType != null;
    }

    public void setGroupTypeIsSet(boolean value) {
      if (!value) {
        this.groupType = null;
      }
    }

    public String getItemId() {
      return this.itemId;
    }

    public checkActionlock_args setItemId(String itemId) {
      this.itemId = itemId;
      return this;
    }

    public void unsetItemId() {
      this.itemId = null;
    }

    /** Returns true if field itemId is set (has been assigned a value) and false otherwise */
    public boolean isSetItemId() {
      return this.itemId != null;
    }

    public void setItemIdIsSet(boolean value) {
      if (!value) {
        this.itemId = null;
      }
    }

    public int getAccessCount() {
      return this.accessCount;
    }

    public checkActionlock_args setAccessCount(int accessCount) {
      this.accessCount = accessCount;
      setAccessCountIsSet(true);
      return this;
    }

    public void unsetAccessCount() {
      __isset_bit_vector.clear(__ACCESSCOUNT_ISSET_ID);
    }

    /** Returns true if field accessCount is set (has been assigned a value) and false otherwise */
    public boolean isSetAccessCount() {
      return __isset_bit_vector.get(__ACCESSCOUNT_ISSET_ID);
    }

    public void setAccessCountIsSet(boolean value) {
      __isset_bit_vector.set(__ACCESSCOUNT_ISSET_ID, value);
    }

    public boolean isRelease() {
      return this.release;
    }

    public checkActionlock_args setRelease(boolean release) {
      this.release = release;
      setReleaseIsSet(true);
      return this;
    }

    public void unsetRelease() {
      __isset_bit_vector.clear(__RELEASE_ISSET_ID);
    }

    /** Returns true if field release is set (has been assigned a value) and false otherwise */
    public boolean isSetRelease() {
      return __isset_bit_vector.get(__RELEASE_ISSET_ID);
    }

    public void setReleaseIsSet(boolean value) {
      __isset_bit_vector.set(__RELEASE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GROUP_TYPE:
        if (value == null) {
          unsetGroupType();
        } else {
          setGroupType((String)value);
        }
        break;

      case ITEM_ID:
        if (value == null) {
          unsetItemId();
        } else {
          setItemId((String)value);
        }
        break;

      case ACCESS_COUNT:
        if (value == null) {
          unsetAccessCount();
        } else {
          setAccessCount((Integer)value);
        }
        break;

      case RELEASE:
        if (value == null) {
          unsetRelease();
        } else {
          setRelease((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GROUP_TYPE:
        return getGroupType();

      case ITEM_ID:
        return getItemId();

      case ACCESS_COUNT:
        return Integer.valueOf(getAccessCount());

      case RELEASE:
        return Boolean.valueOf(isRelease());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GROUP_TYPE:
        return isSetGroupType();
      case ITEM_ID:
        return isSetItemId();
      case ACCESS_COUNT:
        return isSetAccessCount();
      case RELEASE:
        return isSetRelease();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkActionlock_args)
        return this.equals((checkActionlock_args)that);
      return false;
    }

    public boolean equals(checkActionlock_args that) {
      if (that == null)
        return false;

      boolean this_present_groupType = true && this.isSetGroupType();
      boolean that_present_groupType = true && that.isSetGroupType();
      if (this_present_groupType || that_present_groupType) {
        if (!(this_present_groupType && that_present_groupType))
          return false;
        if (!this.groupType.equals(that.groupType))
          return false;
      }

      boolean this_present_itemId = true && this.isSetItemId();
      boolean that_present_itemId = true && that.isSetItemId();
      if (this_present_itemId || that_present_itemId) {
        if (!(this_present_itemId && that_present_itemId))
          return false;
        if (!this.itemId.equals(that.itemId))
          return false;
      }

      boolean this_present_accessCount = true;
      boolean that_present_accessCount = true;
      if (this_present_accessCount || that_present_accessCount) {
        if (!(this_present_accessCount && that_present_accessCount))
          return false;
        if (this.accessCount != that.accessCount)
          return false;
      }

      boolean this_present_release = true;
      boolean that_present_release = true;
      if (this_present_release || that_present_release) {
        if (!(this_present_release && that_present_release))
          return false;
        if (this.release != that.release)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(checkActionlock_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      checkActionlock_args typedOther = (checkActionlock_args)other;

      lastComparison = Boolean.valueOf(isSetGroupType()).compareTo(typedOther.isSetGroupType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupType, typedOther.groupType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItemId()).compareTo(typedOther.isSetItemId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItemId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemId, typedOther.itemId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccessCount()).compareTo(typedOther.isSetAccessCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccessCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessCount, typedOther.accessCount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRelease()).compareTo(typedOther.isSetRelease());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRelease()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.release, typedOther.release);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkActionlock_args(");
      boolean first = true;

      sb.append("groupType:");
      if (this.groupType == null) {
        sb.append("null");
      } else {
        sb.append(this.groupType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("itemId:");
      if (this.itemId == null) {
        sb.append("null");
      } else {
        sb.append(this.itemId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("accessCount:");
      sb.append(this.accessCount);
      first = false;
      if (!first) sb.append(", ");
      sb.append("release:");
      sb.append(this.release);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkActionlock_argsStandardSchemeFactory implements SchemeFactory {
      public checkActionlock_argsStandardScheme getScheme() {
        return new checkActionlock_argsStandardScheme();
      }
    }

    private static class checkActionlock_argsStandardScheme extends StandardScheme<checkActionlock_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkActionlock_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GROUP_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.groupType = iprot.readString();
                struct.setGroupTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ITEM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.itemId = iprot.readString();
                struct.setItemIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ACCESS_COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.accessCount = iprot.readI32();
                struct.setAccessCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // RELEASE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.release = iprot.readBool();
                struct.setReleaseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkActionlock_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.groupType != null) {
          oprot.writeFieldBegin(GROUP_TYPE_FIELD_DESC);
          oprot.writeString(struct.groupType);
          oprot.writeFieldEnd();
        }
        if (struct.itemId != null) {
          oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
          oprot.writeString(struct.itemId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ACCESS_COUNT_FIELD_DESC);
        oprot.writeI32(struct.accessCount);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(RELEASE_FIELD_DESC);
        oprot.writeBool(struct.release);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkActionlock_argsTupleSchemeFactory implements SchemeFactory {
      public checkActionlock_argsTupleScheme getScheme() {
        return new checkActionlock_argsTupleScheme();
      }
    }

    private static class checkActionlock_argsTupleScheme extends TupleScheme<checkActionlock_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkActionlock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGroupType()) {
          optionals.set(0);
        }
        if (struct.isSetItemId()) {
          optionals.set(1);
        }
        if (struct.isSetAccessCount()) {
          optionals.set(2);
        }
        if (struct.isSetRelease()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetGroupType()) {
          oprot.writeString(struct.groupType);
        }
        if (struct.isSetItemId()) {
          oprot.writeString(struct.itemId);
        }
        if (struct.isSetAccessCount()) {
          oprot.writeI32(struct.accessCount);
        }
        if (struct.isSetRelease()) {
          oprot.writeBool(struct.release);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkActionlock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.groupType = iprot.readString();
          struct.setGroupTypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.itemId = iprot.readString();
          struct.setItemIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.accessCount = iprot.readI32();
          struct.setAccessCountIsSet(true);
        }
        if (incoming.get(3)) {
          struct.release = iprot.readBool();
          struct.setReleaseIsSet(true);
        }
      }
    }

  }

  public static class checkActionlock_result implements org.apache.thrift.TBase<checkActionlock_result, checkActionlock_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkActionlock_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkActionlock_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkActionlock_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkActionlock_result.class, metaDataMap);
    }

    public checkActionlock_result() {
    }

    public checkActionlock_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkActionlock_result(checkActionlock_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public checkActionlock_result deepCopy() {
      return new checkActionlock_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public checkActionlock_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkActionlock_result)
        return this.equals((checkActionlock_result)that);
      return false;
    }

    public boolean equals(checkActionlock_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(checkActionlock_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      checkActionlock_result typedOther = (checkActionlock_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkActionlock_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkActionlock_resultStandardSchemeFactory implements SchemeFactory {
      public checkActionlock_resultStandardScheme getScheme() {
        return new checkActionlock_resultStandardScheme();
      }
    }

    private static class checkActionlock_resultStandardScheme extends StandardScheme<checkActionlock_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkActionlock_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkActionlock_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkActionlock_resultTupleSchemeFactory implements SchemeFactory {
      public checkActionlock_resultTupleScheme getScheme() {
        return new checkActionlock_resultTupleScheme();
      }
    }

    private static class checkActionlock_resultTupleScheme extends TupleScheme<checkActionlock_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkActionlock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkActionlock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteActionlock_args implements org.apache.thrift.TBase<deleteActionlock_args, deleteActionlock_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteActionlock_args");

    private static final org.apache.thrift.protocol.TField GROUP_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("groupType", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("itemId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteActionlock_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteActionlock_argsTupleSchemeFactory());
    }

    public String groupType; // required
    public String itemId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GROUP_TYPE((short)1, "groupType"),
      ITEM_ID((short)2, "itemId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GROUP_TYPE
            return GROUP_TYPE;
          case 2: // ITEM_ID
            return ITEM_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GROUP_TYPE, new org.apache.thrift.meta_data.FieldMetaData("groupType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("itemId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteActionlock_args.class, metaDataMap);
    }

    public deleteActionlock_args() {
    }

    public deleteActionlock_args(
      String groupType,
      String itemId)
    {
      this();
      this.groupType = groupType;
      this.itemId = itemId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteActionlock_args(deleteActionlock_args other) {
      if (other.isSetGroupType()) {
        this.groupType = other.groupType;
      }
      if (other.isSetItemId()) {
        this.itemId = other.itemId;
      }
    }

    public deleteActionlock_args deepCopy() {
      return new deleteActionlock_args(this);
    }

    @Override
    public void clear() {
      this.groupType = null;
      this.itemId = null;
    }

    public String getGroupType() {
      return this.groupType;
    }

    public deleteActionlock_args setGroupType(String groupType) {
      this.groupType = groupType;
      return this;
    }

    public void unsetGroupType() {
      this.groupType = null;
    }

    /** Returns true if field groupType is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupType() {
      return this.groupType != null;
    }

    public void setGroupTypeIsSet(boolean value) {
      if (!value) {
        this.groupType = null;
      }
    }

    public String getItemId() {
      return this.itemId;
    }

    public deleteActionlock_args setItemId(String itemId) {
      this.itemId = itemId;
      return this;
    }

    public void unsetItemId() {
      this.itemId = null;
    }

    /** Returns true if field itemId is set (has been assigned a value) and false otherwise */
    public boolean isSetItemId() {
      return this.itemId != null;
    }

    public void setItemIdIsSet(boolean value) {
      if (!value) {
        this.itemId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GROUP_TYPE:
        if (value == null) {
          unsetGroupType();
        } else {
          setGroupType((String)value);
        }
        break;

      case ITEM_ID:
        if (value == null) {
          unsetItemId();
        } else {
          setItemId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GROUP_TYPE:
        return getGroupType();

      case ITEM_ID:
        return getItemId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GROUP_TYPE:
        return isSetGroupType();
      case ITEM_ID:
        return isSetItemId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteActionlock_args)
        return this.equals((deleteActionlock_args)that);
      return false;
    }

    public boolean equals(deleteActionlock_args that) {
      if (that == null)
        return false;

      boolean this_present_groupType = true && this.isSetGroupType();
      boolean that_present_groupType = true && that.isSetGroupType();
      if (this_present_groupType || that_present_groupType) {
        if (!(this_present_groupType && that_present_groupType))
          return false;
        if (!this.groupType.equals(that.groupType))
          return false;
      }

      boolean this_present_itemId = true && this.isSetItemId();
      boolean that_present_itemId = true && that.isSetItemId();
      if (this_present_itemId || that_present_itemId) {
        if (!(this_present_itemId && that_present_itemId))
          return false;
        if (!this.itemId.equals(that.itemId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteActionlock_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteActionlock_args typedOther = (deleteActionlock_args)other;

      lastComparison = Boolean.valueOf(isSetGroupType()).compareTo(typedOther.isSetGroupType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupType, typedOther.groupType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItemId()).compareTo(typedOther.isSetItemId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItemId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemId, typedOther.itemId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteActionlock_args(");
      boolean first = true;

      sb.append("groupType:");
      if (this.groupType == null) {
        sb.append("null");
      } else {
        sb.append(this.groupType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("itemId:");
      if (this.itemId == null) {
        sb.append("null");
      } else {
        sb.append(this.itemId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteActionlock_argsStandardSchemeFactory implements SchemeFactory {
      public deleteActionlock_argsStandardScheme getScheme() {
        return new deleteActionlock_argsStandardScheme();
      }
    }

    private static class deleteActionlock_argsStandardScheme extends StandardScheme<deleteActionlock_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteActionlock_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GROUP_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.groupType = iprot.readString();
                struct.setGroupTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ITEM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.itemId = iprot.readString();
                struct.setItemIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteActionlock_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.groupType != null) {
          oprot.writeFieldBegin(GROUP_TYPE_FIELD_DESC);
          oprot.writeString(struct.groupType);
          oprot.writeFieldEnd();
        }
        if (struct.itemId != null) {
          oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
          oprot.writeString(struct.itemId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteActionlock_argsTupleSchemeFactory implements SchemeFactory {
      public deleteActionlock_argsTupleScheme getScheme() {
        return new deleteActionlock_argsTupleScheme();
      }
    }

    private static class deleteActionlock_argsTupleScheme extends TupleScheme<deleteActionlock_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteActionlock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGroupType()) {
          optionals.set(0);
        }
        if (struct.isSetItemId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetGroupType()) {
          oprot.writeString(struct.groupType);
        }
        if (struct.isSetItemId()) {
          oprot.writeString(struct.itemId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteActionlock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.groupType = iprot.readString();
          struct.setGroupTypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.itemId = iprot.readString();
          struct.setItemIdIsSet(true);
        }
      }
    }

  }

  public static class deleteActionlock_result implements org.apache.thrift.TBase<deleteActionlock_result, deleteActionlock_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteActionlock_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteActionlock_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteActionlock_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteActionlock_result.class, metaDataMap);
    }

    public deleteActionlock_result() {
    }

    public deleteActionlock_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteActionlock_result(deleteActionlock_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public deleteActionlock_result deepCopy() {
      return new deleteActionlock_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public deleteActionlock_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteActionlock_result)
        return this.equals((deleteActionlock_result)that);
      return false;
    }

    public boolean equals(deleteActionlock_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteActionlock_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteActionlock_result typedOther = (deleteActionlock_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteActionlock_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteActionlock_resultStandardSchemeFactory implements SchemeFactory {
      public deleteActionlock_resultStandardScheme getScheme() {
        return new deleteActionlock_resultStandardScheme();
      }
    }

    private static class deleteActionlock_resultStandardScheme extends StandardScheme<deleteActionlock_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteActionlock_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteActionlock_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteActionlock_resultTupleSchemeFactory implements SchemeFactory {
      public deleteActionlock_resultTupleScheme getScheme() {
        return new deleteActionlock_resultTupleScheme();
      }
    }

    private static class deleteActionlock_resultTupleScheme extends TupleScheme<deleteActionlock_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteActionlock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteActionlock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteActionlockGroup_args implements org.apache.thrift.TBase<deleteActionlockGroup_args, deleteActionlockGroup_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteActionlockGroup_args");

    private static final org.apache.thrift.protocol.TField GROUP_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("groupType", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteActionlockGroup_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteActionlockGroup_argsTupleSchemeFactory());
    }

    public String groupType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GROUP_TYPE((short)1, "groupType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GROUP_TYPE
            return GROUP_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GROUP_TYPE, new org.apache.thrift.meta_data.FieldMetaData("groupType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteActionlockGroup_args.class, metaDataMap);
    }

    public deleteActionlockGroup_args() {
    }

    public deleteActionlockGroup_args(
      String groupType)
    {
      this();
      this.groupType = groupType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteActionlockGroup_args(deleteActionlockGroup_args other) {
      if (other.isSetGroupType()) {
        this.groupType = other.groupType;
      }
    }

    public deleteActionlockGroup_args deepCopy() {
      return new deleteActionlockGroup_args(this);
    }

    @Override
    public void clear() {
      this.groupType = null;
    }

    public String getGroupType() {
      return this.groupType;
    }

    public deleteActionlockGroup_args setGroupType(String groupType) {
      this.groupType = groupType;
      return this;
    }

    public void unsetGroupType() {
      this.groupType = null;
    }

    /** Returns true if field groupType is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupType() {
      return this.groupType != null;
    }

    public void setGroupTypeIsSet(boolean value) {
      if (!value) {
        this.groupType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GROUP_TYPE:
        if (value == null) {
          unsetGroupType();
        } else {
          setGroupType((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GROUP_TYPE:
        return getGroupType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GROUP_TYPE:
        return isSetGroupType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteActionlockGroup_args)
        return this.equals((deleteActionlockGroup_args)that);
      return false;
    }

    public boolean equals(deleteActionlockGroup_args that) {
      if (that == null)
        return false;

      boolean this_present_groupType = true && this.isSetGroupType();
      boolean that_present_groupType = true && that.isSetGroupType();
      if (this_present_groupType || that_present_groupType) {
        if (!(this_present_groupType && that_present_groupType))
          return false;
        if (!this.groupType.equals(that.groupType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteActionlockGroup_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteActionlockGroup_args typedOther = (deleteActionlockGroup_args)other;

      lastComparison = Boolean.valueOf(isSetGroupType()).compareTo(typedOther.isSetGroupType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupType, typedOther.groupType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteActionlockGroup_args(");
      boolean first = true;

      sb.append("groupType:");
      if (this.groupType == null) {
        sb.append("null");
      } else {
        sb.append(this.groupType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteActionlockGroup_argsStandardSchemeFactory implements SchemeFactory {
      public deleteActionlockGroup_argsStandardScheme getScheme() {
        return new deleteActionlockGroup_argsStandardScheme();
      }
    }

    private static class deleteActionlockGroup_argsStandardScheme extends StandardScheme<deleteActionlockGroup_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteActionlockGroup_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GROUP_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.groupType = iprot.readString();
                struct.setGroupTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteActionlockGroup_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.groupType != null) {
          oprot.writeFieldBegin(GROUP_TYPE_FIELD_DESC);
          oprot.writeString(struct.groupType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteActionlockGroup_argsTupleSchemeFactory implements SchemeFactory {
      public deleteActionlockGroup_argsTupleScheme getScheme() {
        return new deleteActionlockGroup_argsTupleScheme();
      }
    }

    private static class deleteActionlockGroup_argsTupleScheme extends TupleScheme<deleteActionlockGroup_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteActionlockGroup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGroupType()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetGroupType()) {
          oprot.writeString(struct.groupType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteActionlockGroup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.groupType = iprot.readString();
          struct.setGroupTypeIsSet(true);
        }
      }
    }

  }

  public static class deleteActionlockGroup_result implements org.apache.thrift.TBase<deleteActionlockGroup_result, deleteActionlockGroup_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteActionlockGroup_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteActionlockGroup_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteActionlockGroup_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteActionlockGroup_result.class, metaDataMap);
    }

    public deleteActionlockGroup_result() {
    }

    public deleteActionlockGroup_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteActionlockGroup_result(deleteActionlockGroup_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public deleteActionlockGroup_result deepCopy() {
      return new deleteActionlockGroup_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public deleteActionlockGroup_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteActionlockGroup_result)
        return this.equals((deleteActionlockGroup_result)that);
      return false;
    }

    public boolean equals(deleteActionlockGroup_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteActionlockGroup_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteActionlockGroup_result typedOther = (deleteActionlockGroup_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteActionlockGroup_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteActionlockGroup_resultStandardSchemeFactory implements SchemeFactory {
      public deleteActionlockGroup_resultStandardScheme getScheme() {
        return new deleteActionlockGroup_resultStandardScheme();
      }
    }

    private static class deleteActionlockGroup_resultStandardScheme extends StandardScheme<deleteActionlockGroup_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteActionlockGroup_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteActionlockGroup_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteActionlockGroup_resultTupleSchemeFactory implements SchemeFactory {
      public deleteActionlockGroup_resultTupleScheme getScheme() {
        return new deleteActionlockGroup_resultTupleScheme();
      }
    }

    private static class deleteActionlockGroup_resultTupleScheme extends TupleScheme<deleteActionlockGroup_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteActionlockGroup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteActionlockGroup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class cleanActionlock_args implements org.apache.thrift.TBase<cleanActionlock_args, cleanActionlock_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cleanActionlock_args");

    private static final org.apache.thrift.protocol.TField GROUP_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("groupType", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cleanActionlock_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cleanActionlock_argsTupleSchemeFactory());
    }

    public String groupType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GROUP_TYPE((short)1, "groupType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GROUP_TYPE
            return GROUP_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GROUP_TYPE, new org.apache.thrift.meta_data.FieldMetaData("groupType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cleanActionlock_args.class, metaDataMap);
    }

    public cleanActionlock_args() {
    }

    public cleanActionlock_args(
      String groupType)
    {
      this();
      this.groupType = groupType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cleanActionlock_args(cleanActionlock_args other) {
      if (other.isSetGroupType()) {
        this.groupType = other.groupType;
      }
    }

    public cleanActionlock_args deepCopy() {
      return new cleanActionlock_args(this);
    }

    @Override
    public void clear() {
      this.groupType = null;
    }

    public String getGroupType() {
      return this.groupType;
    }

    public cleanActionlock_args setGroupType(String groupType) {
      this.groupType = groupType;
      return this;
    }

    public void unsetGroupType() {
      this.groupType = null;
    }

    /** Returns true if field groupType is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupType() {
      return this.groupType != null;
    }

    public void setGroupTypeIsSet(boolean value) {
      if (!value) {
        this.groupType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GROUP_TYPE:
        if (value == null) {
          unsetGroupType();
        } else {
          setGroupType((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GROUP_TYPE:
        return getGroupType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GROUP_TYPE:
        return isSetGroupType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cleanActionlock_args)
        return this.equals((cleanActionlock_args)that);
      return false;
    }

    public boolean equals(cleanActionlock_args that) {
      if (that == null)
        return false;

      boolean this_present_groupType = true && this.isSetGroupType();
      boolean that_present_groupType = true && that.isSetGroupType();
      if (this_present_groupType || that_present_groupType) {
        if (!(this_present_groupType && that_present_groupType))
          return false;
        if (!this.groupType.equals(that.groupType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(cleanActionlock_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      cleanActionlock_args typedOther = (cleanActionlock_args)other;

      lastComparison = Boolean.valueOf(isSetGroupType()).compareTo(typedOther.isSetGroupType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupType, typedOther.groupType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cleanActionlock_args(");
      boolean first = true;

      sb.append("groupType:");
      if (this.groupType == null) {
        sb.append("null");
      } else {
        sb.append(this.groupType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cleanActionlock_argsStandardSchemeFactory implements SchemeFactory {
      public cleanActionlock_argsStandardScheme getScheme() {
        return new cleanActionlock_argsStandardScheme();
      }
    }

    private static class cleanActionlock_argsStandardScheme extends StandardScheme<cleanActionlock_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cleanActionlock_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GROUP_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.groupType = iprot.readString();
                struct.setGroupTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cleanActionlock_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.groupType != null) {
          oprot.writeFieldBegin(GROUP_TYPE_FIELD_DESC);
          oprot.writeString(struct.groupType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cleanActionlock_argsTupleSchemeFactory implements SchemeFactory {
      public cleanActionlock_argsTupleScheme getScheme() {
        return new cleanActionlock_argsTupleScheme();
      }
    }

    private static class cleanActionlock_argsTupleScheme extends TupleScheme<cleanActionlock_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cleanActionlock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGroupType()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetGroupType()) {
          oprot.writeString(struct.groupType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cleanActionlock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.groupType = iprot.readString();
          struct.setGroupTypeIsSet(true);
        }
      }
    }

  }

  public static class listActionlockGroupType_args implements org.apache.thrift.TBase<listActionlockGroupType_args, listActionlockGroupType_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listActionlockGroupType_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listActionlockGroupType_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listActionlockGroupType_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listActionlockGroupType_args.class, metaDataMap);
    }

    public listActionlockGroupType_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listActionlockGroupType_args(listActionlockGroupType_args other) {
    }

    public listActionlockGroupType_args deepCopy() {
      return new listActionlockGroupType_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listActionlockGroupType_args)
        return this.equals((listActionlockGroupType_args)that);
      return false;
    }

    public boolean equals(listActionlockGroupType_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(listActionlockGroupType_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listActionlockGroupType_args typedOther = (listActionlockGroupType_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listActionlockGroupType_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listActionlockGroupType_argsStandardSchemeFactory implements SchemeFactory {
      public listActionlockGroupType_argsStandardScheme getScheme() {
        return new listActionlockGroupType_argsStandardScheme();
      }
    }

    private static class listActionlockGroupType_argsStandardScheme extends StandardScheme<listActionlockGroupType_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listActionlockGroupType_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listActionlockGroupType_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listActionlockGroupType_argsTupleSchemeFactory implements SchemeFactory {
      public listActionlockGroupType_argsTupleScheme getScheme() {
        return new listActionlockGroupType_argsTupleScheme();
      }
    }

    private static class listActionlockGroupType_argsTupleScheme extends TupleScheme<listActionlockGroupType_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listActionlockGroupType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listActionlockGroupType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class listActionlockGroupType_result implements org.apache.thrift.TBase<listActionlockGroupType_result, listActionlockGroupType_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listActionlockGroupType_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listActionlockGroupType_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listActionlockGroupType_resultTupleSchemeFactory());
    }

    public List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listActionlockGroupType_result.class, metaDataMap);
    }

    public listActionlockGroupType_result() {
    }

    public listActionlockGroupType_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listActionlockGroupType_result(listActionlockGroupType_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
    }

    public listActionlockGroupType_result deepCopy() {
      return new listActionlockGroupType_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public listActionlockGroupType_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listActionlockGroupType_result)
        return this.equals((listActionlockGroupType_result)that);
      return false;
    }

    public boolean equals(listActionlockGroupType_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(listActionlockGroupType_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listActionlockGroupType_result typedOther = (listActionlockGroupType_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listActionlockGroupType_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listActionlockGroupType_resultStandardSchemeFactory implements SchemeFactory {
      public listActionlockGroupType_resultStandardScheme getScheme() {
        return new listActionlockGroupType_resultStandardScheme();
      }
    }

    private static class listActionlockGroupType_resultStandardScheme extends StandardScheme<listActionlockGroupType_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listActionlockGroupType_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    String _elem10; // required
                    _elem10 = iprot.readString();
                    struct.success.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listActionlockGroupType_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter11 : struct.success)
            {
              oprot.writeString(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listActionlockGroupType_resultTupleSchemeFactory implements SchemeFactory {
      public listActionlockGroupType_resultTupleScheme getScheme() {
        return new listActionlockGroupType_resultTupleScheme();
      }
    }

    private static class listActionlockGroupType_resultTupleScheme extends TupleScheme<listActionlockGroupType_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listActionlockGroupType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter12 : struct.success)
            {
              oprot.writeString(_iter12);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listActionlockGroupType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list13.size);
            for (int _i14 = 0; _i14 < _list13.size; ++_i14)
            {
              String _elem15; // required
              _elem15 = iprot.readString();
              struct.success.add(_elem15);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class searchActionlock_args implements org.apache.thrift.TBase<searchActionlock_args, searchActionlock_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchActionlock_args");

    private static final org.apache.thrift.protocol.TField SQL_FIELD_DESC = new org.apache.thrift.protocol.TField("sql", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchActionlock_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchActionlock_argsTupleSchemeFactory());
    }

    public String sql; // required
    public int page; // required
    public int pageSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SQL((short)1, "sql"),
      PAGE((short)2, "page"),
      PAGE_SIZE((short)3, "pageSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SQL
            return SQL;
          case 2: // PAGE
            return PAGE;
          case 3: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGE_ISSET_ID = 0;
    private static final int __PAGESIZE_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SQL, new org.apache.thrift.meta_data.FieldMetaData("sql", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchActionlock_args.class, metaDataMap);
    }

    public searchActionlock_args() {
    }

    public searchActionlock_args(
      String sql,
      int page,
      int pageSize)
    {
      this();
      this.sql = sql;
      this.page = page;
      setPageIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchActionlock_args(searchActionlock_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetSql()) {
        this.sql = other.sql;
      }
      this.page = other.page;
      this.pageSize = other.pageSize;
    }

    public searchActionlock_args deepCopy() {
      return new searchActionlock_args(this);
    }

    @Override
    public void clear() {
      this.sql = null;
      setPageIsSet(false);
      this.page = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
    }

    public String getSql() {
      return this.sql;
    }

    public searchActionlock_args setSql(String sql) {
      this.sql = sql;
      return this;
    }

    public void unsetSql() {
      this.sql = null;
    }

    /** Returns true if field sql is set (has been assigned a value) and false otherwise */
    public boolean isSetSql() {
      return this.sql != null;
    }

    public void setSqlIsSet(boolean value) {
      if (!value) {
        this.sql = null;
      }
    }

    public int getPage() {
      return this.page;
    }

    public searchActionlock_args setPage(int page) {
      this.page = page;
      setPageIsSet(true);
      return this;
    }

    public void unsetPage() {
      __isset_bit_vector.clear(__PAGE_ISSET_ID);
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return __isset_bit_vector.get(__PAGE_ISSET_ID);
    }

    public void setPageIsSet(boolean value) {
      __isset_bit_vector.set(__PAGE_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public searchActionlock_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bit_vector.clear(__PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return __isset_bit_vector.get(__PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bit_vector.set(__PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SQL:
        if (value == null) {
          unsetSql();
        } else {
          setSql((String)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SQL:
        return getSql();

      case PAGE:
        return Integer.valueOf(getPage());

      case PAGE_SIZE:
        return Integer.valueOf(getPageSize());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SQL:
        return isSetSql();
      case PAGE:
        return isSetPage();
      case PAGE_SIZE:
        return isSetPageSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchActionlock_args)
        return this.equals((searchActionlock_args)that);
      return false;
    }

    public boolean equals(searchActionlock_args that) {
      if (that == null)
        return false;

      boolean this_present_sql = true && this.isSetSql();
      boolean that_present_sql = true && that.isSetSql();
      if (this_present_sql || that_present_sql) {
        if (!(this_present_sql && that_present_sql))
          return false;
        if (!this.sql.equals(that.sql))
          return false;
      }

      boolean this_present_page = true;
      boolean that_present_page = true;
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (this.page != that.page)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searchActionlock_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searchActionlock_args typedOther = (searchActionlock_args)other;

      lastComparison = Boolean.valueOf(isSetSql()).compareTo(typedOther.isSetSql());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSql()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sql, typedOther.sql);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(typedOther.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, typedOther.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(typedOther.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, typedOther.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchActionlock_args(");
      boolean first = true;

      sb.append("sql:");
      if (this.sql == null) {
        sb.append("null");
      } else {
        sb.append(this.sql);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      sb.append(this.page);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchActionlock_argsStandardSchemeFactory implements SchemeFactory {
      public searchActionlock_argsStandardScheme getScheme() {
        return new searchActionlock_argsStandardScheme();
      }
    }

    private static class searchActionlock_argsStandardScheme extends StandardScheme<searchActionlock_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchActionlock_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SQL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sql = iprot.readString();
                struct.setSqlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.page = iprot.readI32();
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchActionlock_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sql != null) {
          oprot.writeFieldBegin(SQL_FIELD_DESC);
          oprot.writeString(struct.sql);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PAGE_FIELD_DESC);
        oprot.writeI32(struct.page);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchActionlock_argsTupleSchemeFactory implements SchemeFactory {
      public searchActionlock_argsTupleScheme getScheme() {
        return new searchActionlock_argsTupleScheme();
      }
    }

    private static class searchActionlock_argsTupleScheme extends TupleScheme<searchActionlock_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchActionlock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSql()) {
          optionals.set(0);
        }
        if (struct.isSetPage()) {
          optionals.set(1);
        }
        if (struct.isSetPageSize()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSql()) {
          oprot.writeString(struct.sql);
        }
        if (struct.isSetPage()) {
          oprot.writeI32(struct.page);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchActionlock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.sql = iprot.readString();
          struct.setSqlIsSet(true);
        }
        if (incoming.get(1)) {
          struct.page = iprot.readI32();
          struct.setPageIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
      }
    }

  }

  public static class searchActionlock_result implements org.apache.thrift.TBase<searchActionlock_result, searchActionlock_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchActionlock_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchActionlock_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchActionlock_resultTupleSchemeFactory());
    }

    public TActionlockSearchResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TActionlockSearchResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchActionlock_result.class, metaDataMap);
    }

    public searchActionlock_result() {
    }

    public searchActionlock_result(
      TActionlockSearchResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchActionlock_result(searchActionlock_result other) {
      if (other.isSetSuccess()) {
        this.success = new TActionlockSearchResult(other.success);
      }
    }

    public searchActionlock_result deepCopy() {
      return new searchActionlock_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TActionlockSearchResult getSuccess() {
      return this.success;
    }

    public searchActionlock_result setSuccess(TActionlockSearchResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TActionlockSearchResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchActionlock_result)
        return this.equals((searchActionlock_result)that);
      return false;
    }

    public boolean equals(searchActionlock_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searchActionlock_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searchActionlock_result typedOther = (searchActionlock_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchActionlock_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchActionlock_resultStandardSchemeFactory implements SchemeFactory {
      public searchActionlock_resultStandardScheme getScheme() {
        return new searchActionlock_resultStandardScheme();
      }
    }

    private static class searchActionlock_resultStandardScheme extends StandardScheme<searchActionlock_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchActionlock_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TActionlockSearchResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchActionlock_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchActionlock_resultTupleSchemeFactory implements SchemeFactory {
      public searchActionlock_resultTupleScheme getScheme() {
        return new searchActionlock_resultTupleScheme();
      }
    }

    private static class searchActionlock_resultTupleScheme extends TupleScheme<searchActionlock_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchActionlock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchActionlock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TActionlockSearchResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
