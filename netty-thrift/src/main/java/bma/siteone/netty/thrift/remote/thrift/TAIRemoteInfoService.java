/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package bma.siteone.netty.thrift.remote.thrift;

import java.util.HashMap;
import java.util.Map;

import org.apache.thrift.TBase;
import org.apache.thrift.TException;

import bma.common.langutil.ai.stack.AIStack;
import bma.common.thrift.ai.AIBaseStack;
import bma.common.thrift.ai.TAIBaseProcessor;
import bma.common.thrift.ai.TAIBaseServiceClient;
import bma.common.thrift.ai.TAIProcessFunction;
import bma.siteone.netty.thrift.remote.thrift.TRemoteInfoService.getRuntimeRemoteInfo_args;
import bma.siteone.netty.thrift.remote.thrift.TRemoteInfoService.getRuntimeRemoteInfo_result;

public class TAIRemoteInfoService {

	public interface Iface {

		public boolean getRuntimeRemoteInfo(AIStack<TRemoteInfo> stack)
				throws org.apache.thrift.TException;

	}

	public static class Client extends TAIBaseServiceClient implements Iface {

		public Client(org.apache.thrift.protocol.TProtocol prot) {
			super(prot, prot);
		}

		public Client(org.apache.thrift.protocol.TProtocol iprot,
				org.apache.thrift.protocol.TProtocol oprot) {
			super(iprot, oprot);
		}

		@Override
		public boolean getRuntimeRemoteInfo(AIStack<TRemoteInfo> stack)
				throws TException {
			return super.invoke(stack, new getRuntimeRemoteInfo_result(),
					"getRuntimeRemoteInfo", new getRuntimeRemoteInfo_args());
		}

	}

	public static class Processor<IFACE extends Iface> extends
			TAIBaseProcessor<IFACE> {

		public Processor(IFACE iface) {
			super(
					iface,
					getProcessMap(new HashMap<String, TAIProcessFunction<IFACE, ? extends TBase>>()));
		}

		private static <I extends Iface> Map<String, TAIProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(
				Map<String, TAIProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
			processMap.put("getRuntimeRemoteInfo", new getRuntimeRemoteInfo());
			return processMap;
		}

		private static class getRuntimeRemoteInfo<I extends Iface> extends
				TAIProcessFunction<I, getRuntimeRemoteInfo_args> {
			public getRuntimeRemoteInfo() {
				super("getRuntimeRemoteInfo");
			}

			protected getRuntimeRemoteInfo_args getEmptyArgsInstance() {
				return new getRuntimeRemoteInfo_args();
			}

			protected boolean getResult(AIStack<TBase> stack, I iface,
					getRuntimeRemoteInfo_args args) throws TException {
				getRuntimeRemoteInfo_result result = new getRuntimeRemoteInfo_result();
				return iface.getRuntimeRemoteInfo(new AIBaseStack<TRemoteInfo>(
						stack, result));
			}

		}

	}

}
