/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package bma.siteone.netty.thrift;

import java.util.HashMap;
import java.util.Map;

import org.apache.thrift.TBase;

import bma.common.langutil.ai.stack.AIStack;
import bma.common.thrift.AIBaseStack;
import bma.common.thrift.TAIBaseProcessor;
import bma.common.thrift.TAIProcessFunction;
import bma.siteone.netty.thrift.Hello.error_args;
import bma.siteone.netty.thrift.Hello.error_result;
import bma.siteone.netty.thrift.Hello.name_args;
import bma.siteone.netty.thrift.Hello.name_result;
import bma.siteone.netty.thrift.Hello.say_args;
import bma.siteone.netty.thrift.Hello.say_result;

public class Hello4AI {

	public static interface Iface {

		public boolean say(AIStack<Boolean> stack, String word)
				throws org.apache.thrift.TException;

		public boolean name(AIStack<String> stack, String title)
				throws org.apache.thrift.TException;

		public boolean error(AIStack<Boolean> stack, String msg)
				throws org.apache.thrift.TException;

	}

	public static class Processor<IFACE extends Iface> extends
			TAIBaseProcessor<IFACE> {

		public Processor(IFACE iface) {
			super(
					iface,
					getProcessMap(new HashMap<String, TAIProcessFunction<IFACE, ? extends TBase>>()));
		}

		private static <I extends Iface> Map<String, TAIProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(
				Map<String, TAIProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
			processMap.put("say", new say());
			processMap.put("name", new name());
			processMap.put("error", new error());
			return processMap;
		}

		private static class say<I extends Iface> extends
				TAIProcessFunction<I, say_args> {
			public say() {
				super("say");
			}

			@Override
			protected say_args getEmptyArgsInstance() {
				return new say_args();
			}

			protected boolean getResult(AIStack<TBase> stack, I iface,
					say_args args) throws org.apache.thrift.TException {
				say_result result = new say_result();
				return iface.say(new AIBaseStack<Boolean>(stack, result, null),
						args.getWord());
			};

		}

		private static class name<I extends Iface> extends
				TAIProcessFunction<I, name_args> {
			public name() {
				super("name");
			}

			@Override
			protected name_args getEmptyArgsInstance() {
				return new name_args();
			}

			@Override
			protected boolean getResult(AIStack<TBase> stack, I iface,
					name_args args) throws org.apache.thrift.TException {
				name_result result = new name_result();
				return iface.name(new AIBaseStack<String>(stack, result,
						name_result._Fields.SUCCESS), args.getTitle());
			}
		}

		private static class error<I extends Iface> extends
				TAIProcessFunction<I, error_args> {
			public error() {
				super("error");
			}

			@Override
			protected error_args getEmptyArgsInstance() {
				return new error_args();
			}

			@Override
			protected boolean getResult(AIStack<TBase> stack, I iface,
					error_args args) throws org.apache.thrift.TException {
				error_result result = new error_result();
				return iface.say(new AIBaseStack<Boolean>(stack, result, null),
						args.getMsg());
			}
		}

	}

}
