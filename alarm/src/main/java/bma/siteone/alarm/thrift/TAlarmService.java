/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package bma.siteone.alarm.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TAlarmService {

  public interface Iface extends bma.siteone.alarmclient.thrift.TAlarmClient.Iface {

    public TAlarmQueryResult queryAlarm(TAlarmQueryForm alarmQueryForm, int page, int pageSize, Map<String,String> orders) throws org.apache.thrift.TException;

    public TAlarmQueryResult queryAlarmByIds(List<Integer> ids) throws org.apache.thrift.TException;

    public boolean clearAlarm(TAlarmQueryForm alarmQueryForm) throws org.apache.thrift.TException;

    public boolean clearAlarmByIds(List<Integer> ids) throws org.apache.thrift.TException;

    public boolean releaseAlarm(TAlarmQueryForm alarmQueryForm) throws org.apache.thrift.TException;

    public boolean releaseAlarmByIds(List<Integer> ids) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends bma.siteone.alarmclient.thrift.TAlarmClient .AsyncIface {

    public void queryAlarm(TAlarmQueryForm alarmQueryForm, int page, int pageSize, Map<String,String> orders, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.queryAlarm_call> resultHandler) throws org.apache.thrift.TException;

    public void queryAlarmByIds(List<Integer> ids, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.queryAlarmByIds_call> resultHandler) throws org.apache.thrift.TException;

    public void clearAlarm(TAlarmQueryForm alarmQueryForm, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.clearAlarm_call> resultHandler) throws org.apache.thrift.TException;

    public void clearAlarmByIds(List<Integer> ids, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.clearAlarmByIds_call> resultHandler) throws org.apache.thrift.TException;

    public void releaseAlarm(TAlarmQueryForm alarmQueryForm, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.releaseAlarm_call> resultHandler) throws org.apache.thrift.TException;

    public void releaseAlarmByIds(List<Integer> ids, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.releaseAlarmByIds_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends bma.siteone.alarmclient.thrift.TAlarmClient.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public TAlarmQueryResult queryAlarm(TAlarmQueryForm alarmQueryForm, int page, int pageSize, Map<String,String> orders) throws org.apache.thrift.TException
    {
      send_queryAlarm(alarmQueryForm, page, pageSize, orders);
      return recv_queryAlarm();
    }

    public void send_queryAlarm(TAlarmQueryForm alarmQueryForm, int page, int pageSize, Map<String,String> orders) throws org.apache.thrift.TException
    {
      queryAlarm_args args = new queryAlarm_args();
      args.setAlarmQueryForm(alarmQueryForm);
      args.setPage(page);
      args.setPageSize(pageSize);
      args.setOrders(orders);
      sendBase("queryAlarm", args);
    }

    public TAlarmQueryResult recv_queryAlarm() throws org.apache.thrift.TException
    {
      queryAlarm_result result = new queryAlarm_result();
      receiveBase(result, "queryAlarm");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryAlarm failed: unknown result");
    }

    public TAlarmQueryResult queryAlarmByIds(List<Integer> ids) throws org.apache.thrift.TException
    {
      send_queryAlarmByIds(ids);
      return recv_queryAlarmByIds();
    }

    public void send_queryAlarmByIds(List<Integer> ids) throws org.apache.thrift.TException
    {
      queryAlarmByIds_args args = new queryAlarmByIds_args();
      args.setIds(ids);
      sendBase("queryAlarmByIds", args);
    }

    public TAlarmQueryResult recv_queryAlarmByIds() throws org.apache.thrift.TException
    {
      queryAlarmByIds_result result = new queryAlarmByIds_result();
      receiveBase(result, "queryAlarmByIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryAlarmByIds failed: unknown result");
    }

    public boolean clearAlarm(TAlarmQueryForm alarmQueryForm) throws org.apache.thrift.TException
    {
      send_clearAlarm(alarmQueryForm);
      return recv_clearAlarm();
    }

    public void send_clearAlarm(TAlarmQueryForm alarmQueryForm) throws org.apache.thrift.TException
    {
      clearAlarm_args args = new clearAlarm_args();
      args.setAlarmQueryForm(alarmQueryForm);
      sendBase("clearAlarm", args);
    }

    public boolean recv_clearAlarm() throws org.apache.thrift.TException
    {
      clearAlarm_result result = new clearAlarm_result();
      receiveBase(result, "clearAlarm");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "clearAlarm failed: unknown result");
    }

    public boolean clearAlarmByIds(List<Integer> ids) throws org.apache.thrift.TException
    {
      send_clearAlarmByIds(ids);
      return recv_clearAlarmByIds();
    }

    public void send_clearAlarmByIds(List<Integer> ids) throws org.apache.thrift.TException
    {
      clearAlarmByIds_args args = new clearAlarmByIds_args();
      args.setIds(ids);
      sendBase("clearAlarmByIds", args);
    }

    public boolean recv_clearAlarmByIds() throws org.apache.thrift.TException
    {
      clearAlarmByIds_result result = new clearAlarmByIds_result();
      receiveBase(result, "clearAlarmByIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "clearAlarmByIds failed: unknown result");
    }

    public boolean releaseAlarm(TAlarmQueryForm alarmQueryForm) throws org.apache.thrift.TException
    {
      send_releaseAlarm(alarmQueryForm);
      return recv_releaseAlarm();
    }

    public void send_releaseAlarm(TAlarmQueryForm alarmQueryForm) throws org.apache.thrift.TException
    {
      releaseAlarm_args args = new releaseAlarm_args();
      args.setAlarmQueryForm(alarmQueryForm);
      sendBase("releaseAlarm", args);
    }

    public boolean recv_releaseAlarm() throws org.apache.thrift.TException
    {
      releaseAlarm_result result = new releaseAlarm_result();
      receiveBase(result, "releaseAlarm");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "releaseAlarm failed: unknown result");
    }

    public boolean releaseAlarmByIds(List<Integer> ids) throws org.apache.thrift.TException
    {
      send_releaseAlarmByIds(ids);
      return recv_releaseAlarmByIds();
    }

    public void send_releaseAlarmByIds(List<Integer> ids) throws org.apache.thrift.TException
    {
      releaseAlarmByIds_args args = new releaseAlarmByIds_args();
      args.setIds(ids);
      sendBase("releaseAlarmByIds", args);
    }

    public boolean recv_releaseAlarmByIds() throws org.apache.thrift.TException
    {
      releaseAlarmByIds_result result = new releaseAlarmByIds_result();
      receiveBase(result, "releaseAlarmByIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "releaseAlarmByIds failed: unknown result");
    }

  }
  public static class AsyncClient extends bma.siteone.alarmclient.thrift.TAlarmClient.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void queryAlarm(TAlarmQueryForm alarmQueryForm, int page, int pageSize, Map<String,String> orders, org.apache.thrift.async.AsyncMethodCallback<queryAlarm_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryAlarm_call method_call = new queryAlarm_call(alarmQueryForm, page, pageSize, orders, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryAlarm_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TAlarmQueryForm alarmQueryForm;
      private int page;
      private int pageSize;
      private Map<String,String> orders;
      public queryAlarm_call(TAlarmQueryForm alarmQueryForm, int page, int pageSize, Map<String,String> orders, org.apache.thrift.async.AsyncMethodCallback<queryAlarm_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.alarmQueryForm = alarmQueryForm;
        this.page = page;
        this.pageSize = pageSize;
        this.orders = orders;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryAlarm", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryAlarm_args args = new queryAlarm_args();
        args.setAlarmQueryForm(alarmQueryForm);
        args.setPage(page);
        args.setPageSize(pageSize);
        args.setOrders(orders);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TAlarmQueryResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryAlarm();
      }
    }

    public void queryAlarmByIds(List<Integer> ids, org.apache.thrift.async.AsyncMethodCallback<queryAlarmByIds_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryAlarmByIds_call method_call = new queryAlarmByIds_call(ids, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryAlarmByIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Integer> ids;
      public queryAlarmByIds_call(List<Integer> ids, org.apache.thrift.async.AsyncMethodCallback<queryAlarmByIds_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ids = ids;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryAlarmByIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryAlarmByIds_args args = new queryAlarmByIds_args();
        args.setIds(ids);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TAlarmQueryResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryAlarmByIds();
      }
    }

    public void clearAlarm(TAlarmQueryForm alarmQueryForm, org.apache.thrift.async.AsyncMethodCallback<clearAlarm_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      clearAlarm_call method_call = new clearAlarm_call(alarmQueryForm, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class clearAlarm_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TAlarmQueryForm alarmQueryForm;
      public clearAlarm_call(TAlarmQueryForm alarmQueryForm, org.apache.thrift.async.AsyncMethodCallback<clearAlarm_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.alarmQueryForm = alarmQueryForm;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("clearAlarm", org.apache.thrift.protocol.TMessageType.CALL, 0));
        clearAlarm_args args = new clearAlarm_args();
        args.setAlarmQueryForm(alarmQueryForm);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_clearAlarm();
      }
    }

    public void clearAlarmByIds(List<Integer> ids, org.apache.thrift.async.AsyncMethodCallback<clearAlarmByIds_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      clearAlarmByIds_call method_call = new clearAlarmByIds_call(ids, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class clearAlarmByIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Integer> ids;
      public clearAlarmByIds_call(List<Integer> ids, org.apache.thrift.async.AsyncMethodCallback<clearAlarmByIds_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ids = ids;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("clearAlarmByIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        clearAlarmByIds_args args = new clearAlarmByIds_args();
        args.setIds(ids);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_clearAlarmByIds();
      }
    }

    public void releaseAlarm(TAlarmQueryForm alarmQueryForm, org.apache.thrift.async.AsyncMethodCallback<releaseAlarm_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      releaseAlarm_call method_call = new releaseAlarm_call(alarmQueryForm, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class releaseAlarm_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TAlarmQueryForm alarmQueryForm;
      public releaseAlarm_call(TAlarmQueryForm alarmQueryForm, org.apache.thrift.async.AsyncMethodCallback<releaseAlarm_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.alarmQueryForm = alarmQueryForm;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("releaseAlarm", org.apache.thrift.protocol.TMessageType.CALL, 0));
        releaseAlarm_args args = new releaseAlarm_args();
        args.setAlarmQueryForm(alarmQueryForm);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_releaseAlarm();
      }
    }

    public void releaseAlarmByIds(List<Integer> ids, org.apache.thrift.async.AsyncMethodCallback<releaseAlarmByIds_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      releaseAlarmByIds_call method_call = new releaseAlarmByIds_call(ids, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class releaseAlarmByIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Integer> ids;
      public releaseAlarmByIds_call(List<Integer> ids, org.apache.thrift.async.AsyncMethodCallback<releaseAlarmByIds_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ids = ids;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("releaseAlarmByIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        releaseAlarmByIds_args args = new releaseAlarmByIds_args();
        args.setIds(ids);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_releaseAlarmByIds();
      }
    }

  }

  public static class Processor<I extends Iface> extends bma.siteone.alarmclient.thrift.TAlarmClient.Processor implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("queryAlarm", new queryAlarm());
      processMap.put("queryAlarmByIds", new queryAlarmByIds());
      processMap.put("clearAlarm", new clearAlarm());
      processMap.put("clearAlarmByIds", new clearAlarmByIds());
      processMap.put("releaseAlarm", new releaseAlarm());
      processMap.put("releaseAlarmByIds", new releaseAlarmByIds());
      return processMap;
    }

    private static class queryAlarm<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryAlarm_args> {
      public queryAlarm() {
        super("queryAlarm");
      }

      protected queryAlarm_args getEmptyArgsInstance() {
        return new queryAlarm_args();
      }

      protected queryAlarm_result getResult(I iface, queryAlarm_args args) throws org.apache.thrift.TException {
        queryAlarm_result result = new queryAlarm_result();
        result.success = iface.queryAlarm(args.alarmQueryForm, args.page, args.pageSize, args.orders);
        return result;
      }
    }

    private static class queryAlarmByIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryAlarmByIds_args> {
      public queryAlarmByIds() {
        super("queryAlarmByIds");
      }

      protected queryAlarmByIds_args getEmptyArgsInstance() {
        return new queryAlarmByIds_args();
      }

      protected queryAlarmByIds_result getResult(I iface, queryAlarmByIds_args args) throws org.apache.thrift.TException {
        queryAlarmByIds_result result = new queryAlarmByIds_result();
        result.success = iface.queryAlarmByIds(args.ids);
        return result;
      }
    }

    private static class clearAlarm<I extends Iface> extends org.apache.thrift.ProcessFunction<I, clearAlarm_args> {
      public clearAlarm() {
        super("clearAlarm");
      }

      protected clearAlarm_args getEmptyArgsInstance() {
        return new clearAlarm_args();
      }

      protected clearAlarm_result getResult(I iface, clearAlarm_args args) throws org.apache.thrift.TException {
        clearAlarm_result result = new clearAlarm_result();
        result.success = iface.clearAlarm(args.alarmQueryForm);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class clearAlarmByIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, clearAlarmByIds_args> {
      public clearAlarmByIds() {
        super("clearAlarmByIds");
      }

      protected clearAlarmByIds_args getEmptyArgsInstance() {
        return new clearAlarmByIds_args();
      }

      protected clearAlarmByIds_result getResult(I iface, clearAlarmByIds_args args) throws org.apache.thrift.TException {
        clearAlarmByIds_result result = new clearAlarmByIds_result();
        result.success = iface.clearAlarmByIds(args.ids);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class releaseAlarm<I extends Iface> extends org.apache.thrift.ProcessFunction<I, releaseAlarm_args> {
      public releaseAlarm() {
        super("releaseAlarm");
      }

      protected releaseAlarm_args getEmptyArgsInstance() {
        return new releaseAlarm_args();
      }

      protected releaseAlarm_result getResult(I iface, releaseAlarm_args args) throws org.apache.thrift.TException {
        releaseAlarm_result result = new releaseAlarm_result();
        result.success = iface.releaseAlarm(args.alarmQueryForm);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class releaseAlarmByIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, releaseAlarmByIds_args> {
      public releaseAlarmByIds() {
        super("releaseAlarmByIds");
      }

      protected releaseAlarmByIds_args getEmptyArgsInstance() {
        return new releaseAlarmByIds_args();
      }

      protected releaseAlarmByIds_result getResult(I iface, releaseAlarmByIds_args args) throws org.apache.thrift.TException {
        releaseAlarmByIds_result result = new releaseAlarmByIds_result();
        result.success = iface.releaseAlarmByIds(args.ids);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class queryAlarm_args implements org.apache.thrift.TBase<queryAlarm_args, queryAlarm_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryAlarm_args");

    private static final org.apache.thrift.protocol.TField ALARM_QUERY_FORM_FIELD_DESC = new org.apache.thrift.protocol.TField("alarmQueryForm", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField ORDERS_FIELD_DESC = new org.apache.thrift.protocol.TField("orders", org.apache.thrift.protocol.TType.MAP, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryAlarm_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryAlarm_argsTupleSchemeFactory());
    }

    public TAlarmQueryForm alarmQueryForm; // required
    public int page; // required
    public int pageSize; // required
    public Map<String,String> orders; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ALARM_QUERY_FORM((short)1, "alarmQueryForm"),
      PAGE((short)2, "page"),
      PAGE_SIZE((short)3, "pageSize"),
      ORDERS((short)4, "orders");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ALARM_QUERY_FORM
            return ALARM_QUERY_FORM;
          case 2: // PAGE
            return PAGE;
          case 3: // PAGE_SIZE
            return PAGE_SIZE;
          case 4: // ORDERS
            return ORDERS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGE_ISSET_ID = 0;
    private static final int __PAGESIZE_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ALARM_QUERY_FORM, new org.apache.thrift.meta_data.FieldMetaData("alarmQueryForm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAlarmQueryForm.class)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ORDERS, new org.apache.thrift.meta_data.FieldMetaData("orders", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryAlarm_args.class, metaDataMap);
    }

    public queryAlarm_args() {
    }

    public queryAlarm_args(
      TAlarmQueryForm alarmQueryForm,
      int page,
      int pageSize,
      Map<String,String> orders)
    {
      this();
      this.alarmQueryForm = alarmQueryForm;
      this.page = page;
      setPageIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      this.orders = orders;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryAlarm_args(queryAlarm_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetAlarmQueryForm()) {
        this.alarmQueryForm = new TAlarmQueryForm(other.alarmQueryForm);
      }
      this.page = other.page;
      this.pageSize = other.pageSize;
      if (other.isSetOrders()) {
        Map<String,String> __this__orders = new HashMap<String,String>();
        for (Map.Entry<String, String> other_element : other.orders.entrySet()) {

          String other_element_key = other_element.getKey();
          String other_element_value = other_element.getValue();

          String __this__orders_copy_key = other_element_key;

          String __this__orders_copy_value = other_element_value;

          __this__orders.put(__this__orders_copy_key, __this__orders_copy_value);
        }
        this.orders = __this__orders;
      }
    }

    public queryAlarm_args deepCopy() {
      return new queryAlarm_args(this);
    }

    @Override
    public void clear() {
      this.alarmQueryForm = null;
      setPageIsSet(false);
      this.page = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
      this.orders = null;
    }

    public TAlarmQueryForm getAlarmQueryForm() {
      return this.alarmQueryForm;
    }

    public queryAlarm_args setAlarmQueryForm(TAlarmQueryForm alarmQueryForm) {
      this.alarmQueryForm = alarmQueryForm;
      return this;
    }

    public void unsetAlarmQueryForm() {
      this.alarmQueryForm = null;
    }

    /** Returns true if field alarmQueryForm is set (has been assigned a value) and false otherwise */
    public boolean isSetAlarmQueryForm() {
      return this.alarmQueryForm != null;
    }

    public void setAlarmQueryFormIsSet(boolean value) {
      if (!value) {
        this.alarmQueryForm = null;
      }
    }

    public int getPage() {
      return this.page;
    }

    public queryAlarm_args setPage(int page) {
      this.page = page;
      setPageIsSet(true);
      return this;
    }

    public void unsetPage() {
      __isset_bit_vector.clear(__PAGE_ISSET_ID);
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return __isset_bit_vector.get(__PAGE_ISSET_ID);
    }

    public void setPageIsSet(boolean value) {
      __isset_bit_vector.set(__PAGE_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public queryAlarm_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bit_vector.clear(__PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return __isset_bit_vector.get(__PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bit_vector.set(__PAGESIZE_ISSET_ID, value);
    }

    public int getOrdersSize() {
      return (this.orders == null) ? 0 : this.orders.size();
    }

    public void putToOrders(String key, String val) {
      if (this.orders == null) {
        this.orders = new HashMap<String,String>();
      }
      this.orders.put(key, val);
    }

    public Map<String,String> getOrders() {
      return this.orders;
    }

    public queryAlarm_args setOrders(Map<String,String> orders) {
      this.orders = orders;
      return this;
    }

    public void unsetOrders() {
      this.orders = null;
    }

    /** Returns true if field orders is set (has been assigned a value) and false otherwise */
    public boolean isSetOrders() {
      return this.orders != null;
    }

    public void setOrdersIsSet(boolean value) {
      if (!value) {
        this.orders = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ALARM_QUERY_FORM:
        if (value == null) {
          unsetAlarmQueryForm();
        } else {
          setAlarmQueryForm((TAlarmQueryForm)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      case ORDERS:
        if (value == null) {
          unsetOrders();
        } else {
          setOrders((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ALARM_QUERY_FORM:
        return getAlarmQueryForm();

      case PAGE:
        return Integer.valueOf(getPage());

      case PAGE_SIZE:
        return Integer.valueOf(getPageSize());

      case ORDERS:
        return getOrders();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ALARM_QUERY_FORM:
        return isSetAlarmQueryForm();
      case PAGE:
        return isSetPage();
      case PAGE_SIZE:
        return isSetPageSize();
      case ORDERS:
        return isSetOrders();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryAlarm_args)
        return this.equals((queryAlarm_args)that);
      return false;
    }

    public boolean equals(queryAlarm_args that) {
      if (that == null)
        return false;

      boolean this_present_alarmQueryForm = true && this.isSetAlarmQueryForm();
      boolean that_present_alarmQueryForm = true && that.isSetAlarmQueryForm();
      if (this_present_alarmQueryForm || that_present_alarmQueryForm) {
        if (!(this_present_alarmQueryForm && that_present_alarmQueryForm))
          return false;
        if (!this.alarmQueryForm.equals(that.alarmQueryForm))
          return false;
      }

      boolean this_present_page = true;
      boolean that_present_page = true;
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (this.page != that.page)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      boolean this_present_orders = true && this.isSetOrders();
      boolean that_present_orders = true && that.isSetOrders();
      if (this_present_orders || that_present_orders) {
        if (!(this_present_orders && that_present_orders))
          return false;
        if (!this.orders.equals(that.orders))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(queryAlarm_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      queryAlarm_args typedOther = (queryAlarm_args)other;

      lastComparison = Boolean.valueOf(isSetAlarmQueryForm()).compareTo(typedOther.isSetAlarmQueryForm());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAlarmQueryForm()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alarmQueryForm, typedOther.alarmQueryForm);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(typedOther.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, typedOther.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(typedOther.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, typedOther.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOrders()).compareTo(typedOther.isSetOrders());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrders()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orders, typedOther.orders);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryAlarm_args(");
      boolean first = true;

      sb.append("alarmQueryForm:");
      if (this.alarmQueryForm == null) {
        sb.append("null");
      } else {
        sb.append(this.alarmQueryForm);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      sb.append(this.page);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      if (!first) sb.append(", ");
      sb.append("orders:");
      if (this.orders == null) {
        sb.append("null");
      } else {
        sb.append(this.orders);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryAlarm_argsStandardSchemeFactory implements SchemeFactory {
      public queryAlarm_argsStandardScheme getScheme() {
        return new queryAlarm_argsStandardScheme();
      }
    }

    private static class queryAlarm_argsStandardScheme extends StandardScheme<queryAlarm_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryAlarm_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ALARM_QUERY_FORM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.alarmQueryForm = new TAlarmQueryForm();
                struct.alarmQueryForm.read(iprot);
                struct.setAlarmQueryFormIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.page = iprot.readI32();
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ORDERS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map8 = iprot.readMapBegin();
                  struct.orders = new HashMap<String,String>(2*_map8.size);
                  for (int _i9 = 0; _i9 < _map8.size; ++_i9)
                  {
                    String _key10; // required
                    String _val11; // required
                    _key10 = iprot.readString();
                    _val11 = iprot.readString();
                    struct.orders.put(_key10, _val11);
                  }
                  iprot.readMapEnd();
                }
                struct.setOrdersIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryAlarm_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.alarmQueryForm != null) {
          oprot.writeFieldBegin(ALARM_QUERY_FORM_FIELD_DESC);
          struct.alarmQueryForm.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PAGE_FIELD_DESC);
        oprot.writeI32(struct.page);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        if (struct.orders != null) {
          oprot.writeFieldBegin(ORDERS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.orders.size()));
            for (Map.Entry<String, String> _iter12 : struct.orders.entrySet())
            {
              oprot.writeString(_iter12.getKey());
              oprot.writeString(_iter12.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryAlarm_argsTupleSchemeFactory implements SchemeFactory {
      public queryAlarm_argsTupleScheme getScheme() {
        return new queryAlarm_argsTupleScheme();
      }
    }

    private static class queryAlarm_argsTupleScheme extends TupleScheme<queryAlarm_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryAlarm_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAlarmQueryForm()) {
          optionals.set(0);
        }
        if (struct.isSetPage()) {
          optionals.set(1);
        }
        if (struct.isSetPageSize()) {
          optionals.set(2);
        }
        if (struct.isSetOrders()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetAlarmQueryForm()) {
          struct.alarmQueryForm.write(oprot);
        }
        if (struct.isSetPage()) {
          oprot.writeI32(struct.page);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
        if (struct.isSetOrders()) {
          {
            oprot.writeI32(struct.orders.size());
            for (Map.Entry<String, String> _iter13 : struct.orders.entrySet())
            {
              oprot.writeString(_iter13.getKey());
              oprot.writeString(_iter13.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryAlarm_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.alarmQueryForm = new TAlarmQueryForm();
          struct.alarmQueryForm.read(iprot);
          struct.setAlarmQueryFormIsSet(true);
        }
        if (incoming.get(1)) {
          struct.page = iprot.readI32();
          struct.setPageIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TMap _map14 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.orders = new HashMap<String,String>(2*_map14.size);
            for (int _i15 = 0; _i15 < _map14.size; ++_i15)
            {
              String _key16; // required
              String _val17; // required
              _key16 = iprot.readString();
              _val17 = iprot.readString();
              struct.orders.put(_key16, _val17);
            }
          }
          struct.setOrdersIsSet(true);
        }
      }
    }

  }

  public static class queryAlarm_result implements org.apache.thrift.TBase<queryAlarm_result, queryAlarm_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryAlarm_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryAlarm_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryAlarm_resultTupleSchemeFactory());
    }

    public TAlarmQueryResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAlarmQueryResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryAlarm_result.class, metaDataMap);
    }

    public queryAlarm_result() {
    }

    public queryAlarm_result(
      TAlarmQueryResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryAlarm_result(queryAlarm_result other) {
      if (other.isSetSuccess()) {
        this.success = new TAlarmQueryResult(other.success);
      }
    }

    public queryAlarm_result deepCopy() {
      return new queryAlarm_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TAlarmQueryResult getSuccess() {
      return this.success;
    }

    public queryAlarm_result setSuccess(TAlarmQueryResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TAlarmQueryResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryAlarm_result)
        return this.equals((queryAlarm_result)that);
      return false;
    }

    public boolean equals(queryAlarm_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(queryAlarm_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      queryAlarm_result typedOther = (queryAlarm_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryAlarm_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryAlarm_resultStandardSchemeFactory implements SchemeFactory {
      public queryAlarm_resultStandardScheme getScheme() {
        return new queryAlarm_resultStandardScheme();
      }
    }

    private static class queryAlarm_resultStandardScheme extends StandardScheme<queryAlarm_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryAlarm_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TAlarmQueryResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryAlarm_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryAlarm_resultTupleSchemeFactory implements SchemeFactory {
      public queryAlarm_resultTupleScheme getScheme() {
        return new queryAlarm_resultTupleScheme();
      }
    }

    private static class queryAlarm_resultTupleScheme extends TupleScheme<queryAlarm_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryAlarm_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryAlarm_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TAlarmQueryResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryAlarmByIds_args implements org.apache.thrift.TBase<queryAlarmByIds_args, queryAlarmByIds_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryAlarmByIds_args");

    private static final org.apache.thrift.protocol.TField IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ids", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryAlarmByIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryAlarmByIds_argsTupleSchemeFactory());
    }

    public List<Integer> ids; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IDS((short)1, "ids");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IDS
            return IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IDS, new org.apache.thrift.meta_data.FieldMetaData("ids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryAlarmByIds_args.class, metaDataMap);
    }

    public queryAlarmByIds_args() {
    }

    public queryAlarmByIds_args(
      List<Integer> ids)
    {
      this();
      this.ids = ids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryAlarmByIds_args(queryAlarmByIds_args other) {
      if (other.isSetIds()) {
        List<Integer> __this__ids = new ArrayList<Integer>();
        for (Integer other_element : other.ids) {
          __this__ids.add(other_element);
        }
        this.ids = __this__ids;
      }
    }

    public queryAlarmByIds_args deepCopy() {
      return new queryAlarmByIds_args(this);
    }

    @Override
    public void clear() {
      this.ids = null;
    }

    public int getIdsSize() {
      return (this.ids == null) ? 0 : this.ids.size();
    }

    public java.util.Iterator<Integer> getIdsIterator() {
      return (this.ids == null) ? null : this.ids.iterator();
    }

    public void addToIds(int elem) {
      if (this.ids == null) {
        this.ids = new ArrayList<Integer>();
      }
      this.ids.add(elem);
    }

    public List<Integer> getIds() {
      return this.ids;
    }

    public queryAlarmByIds_args setIds(List<Integer> ids) {
      this.ids = ids;
      return this;
    }

    public void unsetIds() {
      this.ids = null;
    }

    /** Returns true if field ids is set (has been assigned a value) and false otherwise */
    public boolean isSetIds() {
      return this.ids != null;
    }

    public void setIdsIsSet(boolean value) {
      if (!value) {
        this.ids = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IDS:
        if (value == null) {
          unsetIds();
        } else {
          setIds((List<Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IDS:
        return getIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IDS:
        return isSetIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryAlarmByIds_args)
        return this.equals((queryAlarmByIds_args)that);
      return false;
    }

    public boolean equals(queryAlarmByIds_args that) {
      if (that == null)
        return false;

      boolean this_present_ids = true && this.isSetIds();
      boolean that_present_ids = true && that.isSetIds();
      if (this_present_ids || that_present_ids) {
        if (!(this_present_ids && that_present_ids))
          return false;
        if (!this.ids.equals(that.ids))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(queryAlarmByIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      queryAlarmByIds_args typedOther = (queryAlarmByIds_args)other;

      lastComparison = Boolean.valueOf(isSetIds()).compareTo(typedOther.isSetIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ids, typedOther.ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryAlarmByIds_args(");
      boolean first = true;

      sb.append("ids:");
      if (this.ids == null) {
        sb.append("null");
      } else {
        sb.append(this.ids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryAlarmByIds_argsStandardSchemeFactory implements SchemeFactory {
      public queryAlarmByIds_argsStandardScheme getScheme() {
        return new queryAlarmByIds_argsStandardScheme();
      }
    }

    private static class queryAlarmByIds_argsStandardScheme extends StandardScheme<queryAlarmByIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryAlarmByIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list18 = iprot.readListBegin();
                  struct.ids = new ArrayList<Integer>(_list18.size);
                  for (int _i19 = 0; _i19 < _list18.size; ++_i19)
                  {
                    int _elem20; // required
                    _elem20 = iprot.readI32();
                    struct.ids.add(_elem20);
                  }
                  iprot.readListEnd();
                }
                struct.setIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryAlarmByIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ids != null) {
          oprot.writeFieldBegin(IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.ids.size()));
            for (int _iter21 : struct.ids)
            {
              oprot.writeI32(_iter21);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryAlarmByIds_argsTupleSchemeFactory implements SchemeFactory {
      public queryAlarmByIds_argsTupleScheme getScheme() {
        return new queryAlarmByIds_argsTupleScheme();
      }
    }

    private static class queryAlarmByIds_argsTupleScheme extends TupleScheme<queryAlarmByIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryAlarmByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIds()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIds()) {
          {
            oprot.writeI32(struct.ids.size());
            for (int _iter22 : struct.ids)
            {
              oprot.writeI32(_iter22);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryAlarmByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.ids = new ArrayList<Integer>(_list23.size);
            for (int _i24 = 0; _i24 < _list23.size; ++_i24)
            {
              int _elem25; // required
              _elem25 = iprot.readI32();
              struct.ids.add(_elem25);
            }
          }
          struct.setIdsIsSet(true);
        }
      }
    }

  }

  public static class queryAlarmByIds_result implements org.apache.thrift.TBase<queryAlarmByIds_result, queryAlarmByIds_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryAlarmByIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryAlarmByIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryAlarmByIds_resultTupleSchemeFactory());
    }

    public TAlarmQueryResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAlarmQueryResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryAlarmByIds_result.class, metaDataMap);
    }

    public queryAlarmByIds_result() {
    }

    public queryAlarmByIds_result(
      TAlarmQueryResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryAlarmByIds_result(queryAlarmByIds_result other) {
      if (other.isSetSuccess()) {
        this.success = new TAlarmQueryResult(other.success);
      }
    }

    public queryAlarmByIds_result deepCopy() {
      return new queryAlarmByIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TAlarmQueryResult getSuccess() {
      return this.success;
    }

    public queryAlarmByIds_result setSuccess(TAlarmQueryResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TAlarmQueryResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryAlarmByIds_result)
        return this.equals((queryAlarmByIds_result)that);
      return false;
    }

    public boolean equals(queryAlarmByIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(queryAlarmByIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      queryAlarmByIds_result typedOther = (queryAlarmByIds_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryAlarmByIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryAlarmByIds_resultStandardSchemeFactory implements SchemeFactory {
      public queryAlarmByIds_resultStandardScheme getScheme() {
        return new queryAlarmByIds_resultStandardScheme();
      }
    }

    private static class queryAlarmByIds_resultStandardScheme extends StandardScheme<queryAlarmByIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryAlarmByIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TAlarmQueryResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryAlarmByIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryAlarmByIds_resultTupleSchemeFactory implements SchemeFactory {
      public queryAlarmByIds_resultTupleScheme getScheme() {
        return new queryAlarmByIds_resultTupleScheme();
      }
    }

    private static class queryAlarmByIds_resultTupleScheme extends TupleScheme<queryAlarmByIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryAlarmByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryAlarmByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TAlarmQueryResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class clearAlarm_args implements org.apache.thrift.TBase<clearAlarm_args, clearAlarm_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("clearAlarm_args");

    private static final org.apache.thrift.protocol.TField ALARM_QUERY_FORM_FIELD_DESC = new org.apache.thrift.protocol.TField("alarmQueryForm", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new clearAlarm_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new clearAlarm_argsTupleSchemeFactory());
    }

    public TAlarmQueryForm alarmQueryForm; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ALARM_QUERY_FORM((short)1, "alarmQueryForm");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ALARM_QUERY_FORM
            return ALARM_QUERY_FORM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ALARM_QUERY_FORM, new org.apache.thrift.meta_data.FieldMetaData("alarmQueryForm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAlarmQueryForm.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(clearAlarm_args.class, metaDataMap);
    }

    public clearAlarm_args() {
    }

    public clearAlarm_args(
      TAlarmQueryForm alarmQueryForm)
    {
      this();
      this.alarmQueryForm = alarmQueryForm;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public clearAlarm_args(clearAlarm_args other) {
      if (other.isSetAlarmQueryForm()) {
        this.alarmQueryForm = new TAlarmQueryForm(other.alarmQueryForm);
      }
    }

    public clearAlarm_args deepCopy() {
      return new clearAlarm_args(this);
    }

    @Override
    public void clear() {
      this.alarmQueryForm = null;
    }

    public TAlarmQueryForm getAlarmQueryForm() {
      return this.alarmQueryForm;
    }

    public clearAlarm_args setAlarmQueryForm(TAlarmQueryForm alarmQueryForm) {
      this.alarmQueryForm = alarmQueryForm;
      return this;
    }

    public void unsetAlarmQueryForm() {
      this.alarmQueryForm = null;
    }

    /** Returns true if field alarmQueryForm is set (has been assigned a value) and false otherwise */
    public boolean isSetAlarmQueryForm() {
      return this.alarmQueryForm != null;
    }

    public void setAlarmQueryFormIsSet(boolean value) {
      if (!value) {
        this.alarmQueryForm = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ALARM_QUERY_FORM:
        if (value == null) {
          unsetAlarmQueryForm();
        } else {
          setAlarmQueryForm((TAlarmQueryForm)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ALARM_QUERY_FORM:
        return getAlarmQueryForm();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ALARM_QUERY_FORM:
        return isSetAlarmQueryForm();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof clearAlarm_args)
        return this.equals((clearAlarm_args)that);
      return false;
    }

    public boolean equals(clearAlarm_args that) {
      if (that == null)
        return false;

      boolean this_present_alarmQueryForm = true && this.isSetAlarmQueryForm();
      boolean that_present_alarmQueryForm = true && that.isSetAlarmQueryForm();
      if (this_present_alarmQueryForm || that_present_alarmQueryForm) {
        if (!(this_present_alarmQueryForm && that_present_alarmQueryForm))
          return false;
        if (!this.alarmQueryForm.equals(that.alarmQueryForm))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(clearAlarm_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      clearAlarm_args typedOther = (clearAlarm_args)other;

      lastComparison = Boolean.valueOf(isSetAlarmQueryForm()).compareTo(typedOther.isSetAlarmQueryForm());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAlarmQueryForm()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alarmQueryForm, typedOther.alarmQueryForm);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("clearAlarm_args(");
      boolean first = true;

      sb.append("alarmQueryForm:");
      if (this.alarmQueryForm == null) {
        sb.append("null");
      } else {
        sb.append(this.alarmQueryForm);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class clearAlarm_argsStandardSchemeFactory implements SchemeFactory {
      public clearAlarm_argsStandardScheme getScheme() {
        return new clearAlarm_argsStandardScheme();
      }
    }

    private static class clearAlarm_argsStandardScheme extends StandardScheme<clearAlarm_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, clearAlarm_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ALARM_QUERY_FORM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.alarmQueryForm = new TAlarmQueryForm();
                struct.alarmQueryForm.read(iprot);
                struct.setAlarmQueryFormIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, clearAlarm_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.alarmQueryForm != null) {
          oprot.writeFieldBegin(ALARM_QUERY_FORM_FIELD_DESC);
          struct.alarmQueryForm.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class clearAlarm_argsTupleSchemeFactory implements SchemeFactory {
      public clearAlarm_argsTupleScheme getScheme() {
        return new clearAlarm_argsTupleScheme();
      }
    }

    private static class clearAlarm_argsTupleScheme extends TupleScheme<clearAlarm_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, clearAlarm_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAlarmQueryForm()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAlarmQueryForm()) {
          struct.alarmQueryForm.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, clearAlarm_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.alarmQueryForm = new TAlarmQueryForm();
          struct.alarmQueryForm.read(iprot);
          struct.setAlarmQueryFormIsSet(true);
        }
      }
    }

  }

  public static class clearAlarm_result implements org.apache.thrift.TBase<clearAlarm_result, clearAlarm_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("clearAlarm_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new clearAlarm_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new clearAlarm_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(clearAlarm_result.class, metaDataMap);
    }

    public clearAlarm_result() {
    }

    public clearAlarm_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public clearAlarm_result(clearAlarm_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public clearAlarm_result deepCopy() {
      return new clearAlarm_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public clearAlarm_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof clearAlarm_result)
        return this.equals((clearAlarm_result)that);
      return false;
    }

    public boolean equals(clearAlarm_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(clearAlarm_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      clearAlarm_result typedOther = (clearAlarm_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("clearAlarm_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class clearAlarm_resultStandardSchemeFactory implements SchemeFactory {
      public clearAlarm_resultStandardScheme getScheme() {
        return new clearAlarm_resultStandardScheme();
      }
    }

    private static class clearAlarm_resultStandardScheme extends StandardScheme<clearAlarm_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, clearAlarm_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, clearAlarm_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class clearAlarm_resultTupleSchemeFactory implements SchemeFactory {
      public clearAlarm_resultTupleScheme getScheme() {
        return new clearAlarm_resultTupleScheme();
      }
    }

    private static class clearAlarm_resultTupleScheme extends TupleScheme<clearAlarm_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, clearAlarm_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, clearAlarm_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class clearAlarmByIds_args implements org.apache.thrift.TBase<clearAlarmByIds_args, clearAlarmByIds_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("clearAlarmByIds_args");

    private static final org.apache.thrift.protocol.TField IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ids", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new clearAlarmByIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new clearAlarmByIds_argsTupleSchemeFactory());
    }

    public List<Integer> ids; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IDS((short)1, "ids");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IDS
            return IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IDS, new org.apache.thrift.meta_data.FieldMetaData("ids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(clearAlarmByIds_args.class, metaDataMap);
    }

    public clearAlarmByIds_args() {
    }

    public clearAlarmByIds_args(
      List<Integer> ids)
    {
      this();
      this.ids = ids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public clearAlarmByIds_args(clearAlarmByIds_args other) {
      if (other.isSetIds()) {
        List<Integer> __this__ids = new ArrayList<Integer>();
        for (Integer other_element : other.ids) {
          __this__ids.add(other_element);
        }
        this.ids = __this__ids;
      }
    }

    public clearAlarmByIds_args deepCopy() {
      return new clearAlarmByIds_args(this);
    }

    @Override
    public void clear() {
      this.ids = null;
    }

    public int getIdsSize() {
      return (this.ids == null) ? 0 : this.ids.size();
    }

    public java.util.Iterator<Integer> getIdsIterator() {
      return (this.ids == null) ? null : this.ids.iterator();
    }

    public void addToIds(int elem) {
      if (this.ids == null) {
        this.ids = new ArrayList<Integer>();
      }
      this.ids.add(elem);
    }

    public List<Integer> getIds() {
      return this.ids;
    }

    public clearAlarmByIds_args setIds(List<Integer> ids) {
      this.ids = ids;
      return this;
    }

    public void unsetIds() {
      this.ids = null;
    }

    /** Returns true if field ids is set (has been assigned a value) and false otherwise */
    public boolean isSetIds() {
      return this.ids != null;
    }

    public void setIdsIsSet(boolean value) {
      if (!value) {
        this.ids = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IDS:
        if (value == null) {
          unsetIds();
        } else {
          setIds((List<Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IDS:
        return getIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IDS:
        return isSetIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof clearAlarmByIds_args)
        return this.equals((clearAlarmByIds_args)that);
      return false;
    }

    public boolean equals(clearAlarmByIds_args that) {
      if (that == null)
        return false;

      boolean this_present_ids = true && this.isSetIds();
      boolean that_present_ids = true && that.isSetIds();
      if (this_present_ids || that_present_ids) {
        if (!(this_present_ids && that_present_ids))
          return false;
        if (!this.ids.equals(that.ids))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(clearAlarmByIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      clearAlarmByIds_args typedOther = (clearAlarmByIds_args)other;

      lastComparison = Boolean.valueOf(isSetIds()).compareTo(typedOther.isSetIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ids, typedOther.ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("clearAlarmByIds_args(");
      boolean first = true;

      sb.append("ids:");
      if (this.ids == null) {
        sb.append("null");
      } else {
        sb.append(this.ids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class clearAlarmByIds_argsStandardSchemeFactory implements SchemeFactory {
      public clearAlarmByIds_argsStandardScheme getScheme() {
        return new clearAlarmByIds_argsStandardScheme();
      }
    }

    private static class clearAlarmByIds_argsStandardScheme extends StandardScheme<clearAlarmByIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, clearAlarmByIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list26 = iprot.readListBegin();
                  struct.ids = new ArrayList<Integer>(_list26.size);
                  for (int _i27 = 0; _i27 < _list26.size; ++_i27)
                  {
                    int _elem28; // required
                    _elem28 = iprot.readI32();
                    struct.ids.add(_elem28);
                  }
                  iprot.readListEnd();
                }
                struct.setIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, clearAlarmByIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ids != null) {
          oprot.writeFieldBegin(IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.ids.size()));
            for (int _iter29 : struct.ids)
            {
              oprot.writeI32(_iter29);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class clearAlarmByIds_argsTupleSchemeFactory implements SchemeFactory {
      public clearAlarmByIds_argsTupleScheme getScheme() {
        return new clearAlarmByIds_argsTupleScheme();
      }
    }

    private static class clearAlarmByIds_argsTupleScheme extends TupleScheme<clearAlarmByIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, clearAlarmByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIds()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIds()) {
          {
            oprot.writeI32(struct.ids.size());
            for (int _iter30 : struct.ids)
            {
              oprot.writeI32(_iter30);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, clearAlarmByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.ids = new ArrayList<Integer>(_list31.size);
            for (int _i32 = 0; _i32 < _list31.size; ++_i32)
            {
              int _elem33; // required
              _elem33 = iprot.readI32();
              struct.ids.add(_elem33);
            }
          }
          struct.setIdsIsSet(true);
        }
      }
    }

  }

  public static class clearAlarmByIds_result implements org.apache.thrift.TBase<clearAlarmByIds_result, clearAlarmByIds_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("clearAlarmByIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new clearAlarmByIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new clearAlarmByIds_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(clearAlarmByIds_result.class, metaDataMap);
    }

    public clearAlarmByIds_result() {
    }

    public clearAlarmByIds_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public clearAlarmByIds_result(clearAlarmByIds_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public clearAlarmByIds_result deepCopy() {
      return new clearAlarmByIds_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public clearAlarmByIds_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof clearAlarmByIds_result)
        return this.equals((clearAlarmByIds_result)that);
      return false;
    }

    public boolean equals(clearAlarmByIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(clearAlarmByIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      clearAlarmByIds_result typedOther = (clearAlarmByIds_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("clearAlarmByIds_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class clearAlarmByIds_resultStandardSchemeFactory implements SchemeFactory {
      public clearAlarmByIds_resultStandardScheme getScheme() {
        return new clearAlarmByIds_resultStandardScheme();
      }
    }

    private static class clearAlarmByIds_resultStandardScheme extends StandardScheme<clearAlarmByIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, clearAlarmByIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, clearAlarmByIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class clearAlarmByIds_resultTupleSchemeFactory implements SchemeFactory {
      public clearAlarmByIds_resultTupleScheme getScheme() {
        return new clearAlarmByIds_resultTupleScheme();
      }
    }

    private static class clearAlarmByIds_resultTupleScheme extends TupleScheme<clearAlarmByIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, clearAlarmByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, clearAlarmByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class releaseAlarm_args implements org.apache.thrift.TBase<releaseAlarm_args, releaseAlarm_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("releaseAlarm_args");

    private static final org.apache.thrift.protocol.TField ALARM_QUERY_FORM_FIELD_DESC = new org.apache.thrift.protocol.TField("alarmQueryForm", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new releaseAlarm_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new releaseAlarm_argsTupleSchemeFactory());
    }

    public TAlarmQueryForm alarmQueryForm; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ALARM_QUERY_FORM((short)1, "alarmQueryForm");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ALARM_QUERY_FORM
            return ALARM_QUERY_FORM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ALARM_QUERY_FORM, new org.apache.thrift.meta_data.FieldMetaData("alarmQueryForm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAlarmQueryForm.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(releaseAlarm_args.class, metaDataMap);
    }

    public releaseAlarm_args() {
    }

    public releaseAlarm_args(
      TAlarmQueryForm alarmQueryForm)
    {
      this();
      this.alarmQueryForm = alarmQueryForm;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public releaseAlarm_args(releaseAlarm_args other) {
      if (other.isSetAlarmQueryForm()) {
        this.alarmQueryForm = new TAlarmQueryForm(other.alarmQueryForm);
      }
    }

    public releaseAlarm_args deepCopy() {
      return new releaseAlarm_args(this);
    }

    @Override
    public void clear() {
      this.alarmQueryForm = null;
    }

    public TAlarmQueryForm getAlarmQueryForm() {
      return this.alarmQueryForm;
    }

    public releaseAlarm_args setAlarmQueryForm(TAlarmQueryForm alarmQueryForm) {
      this.alarmQueryForm = alarmQueryForm;
      return this;
    }

    public void unsetAlarmQueryForm() {
      this.alarmQueryForm = null;
    }

    /** Returns true if field alarmQueryForm is set (has been assigned a value) and false otherwise */
    public boolean isSetAlarmQueryForm() {
      return this.alarmQueryForm != null;
    }

    public void setAlarmQueryFormIsSet(boolean value) {
      if (!value) {
        this.alarmQueryForm = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ALARM_QUERY_FORM:
        if (value == null) {
          unsetAlarmQueryForm();
        } else {
          setAlarmQueryForm((TAlarmQueryForm)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ALARM_QUERY_FORM:
        return getAlarmQueryForm();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ALARM_QUERY_FORM:
        return isSetAlarmQueryForm();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof releaseAlarm_args)
        return this.equals((releaseAlarm_args)that);
      return false;
    }

    public boolean equals(releaseAlarm_args that) {
      if (that == null)
        return false;

      boolean this_present_alarmQueryForm = true && this.isSetAlarmQueryForm();
      boolean that_present_alarmQueryForm = true && that.isSetAlarmQueryForm();
      if (this_present_alarmQueryForm || that_present_alarmQueryForm) {
        if (!(this_present_alarmQueryForm && that_present_alarmQueryForm))
          return false;
        if (!this.alarmQueryForm.equals(that.alarmQueryForm))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(releaseAlarm_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      releaseAlarm_args typedOther = (releaseAlarm_args)other;

      lastComparison = Boolean.valueOf(isSetAlarmQueryForm()).compareTo(typedOther.isSetAlarmQueryForm());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAlarmQueryForm()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alarmQueryForm, typedOther.alarmQueryForm);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("releaseAlarm_args(");
      boolean first = true;

      sb.append("alarmQueryForm:");
      if (this.alarmQueryForm == null) {
        sb.append("null");
      } else {
        sb.append(this.alarmQueryForm);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class releaseAlarm_argsStandardSchemeFactory implements SchemeFactory {
      public releaseAlarm_argsStandardScheme getScheme() {
        return new releaseAlarm_argsStandardScheme();
      }
    }

    private static class releaseAlarm_argsStandardScheme extends StandardScheme<releaseAlarm_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, releaseAlarm_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ALARM_QUERY_FORM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.alarmQueryForm = new TAlarmQueryForm();
                struct.alarmQueryForm.read(iprot);
                struct.setAlarmQueryFormIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, releaseAlarm_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.alarmQueryForm != null) {
          oprot.writeFieldBegin(ALARM_QUERY_FORM_FIELD_DESC);
          struct.alarmQueryForm.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class releaseAlarm_argsTupleSchemeFactory implements SchemeFactory {
      public releaseAlarm_argsTupleScheme getScheme() {
        return new releaseAlarm_argsTupleScheme();
      }
    }

    private static class releaseAlarm_argsTupleScheme extends TupleScheme<releaseAlarm_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, releaseAlarm_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAlarmQueryForm()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAlarmQueryForm()) {
          struct.alarmQueryForm.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, releaseAlarm_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.alarmQueryForm = new TAlarmQueryForm();
          struct.alarmQueryForm.read(iprot);
          struct.setAlarmQueryFormIsSet(true);
        }
      }
    }

  }

  public static class releaseAlarm_result implements org.apache.thrift.TBase<releaseAlarm_result, releaseAlarm_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("releaseAlarm_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new releaseAlarm_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new releaseAlarm_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(releaseAlarm_result.class, metaDataMap);
    }

    public releaseAlarm_result() {
    }

    public releaseAlarm_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public releaseAlarm_result(releaseAlarm_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public releaseAlarm_result deepCopy() {
      return new releaseAlarm_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public releaseAlarm_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof releaseAlarm_result)
        return this.equals((releaseAlarm_result)that);
      return false;
    }

    public boolean equals(releaseAlarm_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(releaseAlarm_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      releaseAlarm_result typedOther = (releaseAlarm_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("releaseAlarm_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class releaseAlarm_resultStandardSchemeFactory implements SchemeFactory {
      public releaseAlarm_resultStandardScheme getScheme() {
        return new releaseAlarm_resultStandardScheme();
      }
    }

    private static class releaseAlarm_resultStandardScheme extends StandardScheme<releaseAlarm_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, releaseAlarm_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, releaseAlarm_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class releaseAlarm_resultTupleSchemeFactory implements SchemeFactory {
      public releaseAlarm_resultTupleScheme getScheme() {
        return new releaseAlarm_resultTupleScheme();
      }
    }

    private static class releaseAlarm_resultTupleScheme extends TupleScheme<releaseAlarm_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, releaseAlarm_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, releaseAlarm_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class releaseAlarmByIds_args implements org.apache.thrift.TBase<releaseAlarmByIds_args, releaseAlarmByIds_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("releaseAlarmByIds_args");

    private static final org.apache.thrift.protocol.TField IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ids", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new releaseAlarmByIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new releaseAlarmByIds_argsTupleSchemeFactory());
    }

    public List<Integer> ids; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IDS((short)1, "ids");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IDS
            return IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IDS, new org.apache.thrift.meta_data.FieldMetaData("ids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(releaseAlarmByIds_args.class, metaDataMap);
    }

    public releaseAlarmByIds_args() {
    }

    public releaseAlarmByIds_args(
      List<Integer> ids)
    {
      this();
      this.ids = ids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public releaseAlarmByIds_args(releaseAlarmByIds_args other) {
      if (other.isSetIds()) {
        List<Integer> __this__ids = new ArrayList<Integer>();
        for (Integer other_element : other.ids) {
          __this__ids.add(other_element);
        }
        this.ids = __this__ids;
      }
    }

    public releaseAlarmByIds_args deepCopy() {
      return new releaseAlarmByIds_args(this);
    }

    @Override
    public void clear() {
      this.ids = null;
    }

    public int getIdsSize() {
      return (this.ids == null) ? 0 : this.ids.size();
    }

    public java.util.Iterator<Integer> getIdsIterator() {
      return (this.ids == null) ? null : this.ids.iterator();
    }

    public void addToIds(int elem) {
      if (this.ids == null) {
        this.ids = new ArrayList<Integer>();
      }
      this.ids.add(elem);
    }

    public List<Integer> getIds() {
      return this.ids;
    }

    public releaseAlarmByIds_args setIds(List<Integer> ids) {
      this.ids = ids;
      return this;
    }

    public void unsetIds() {
      this.ids = null;
    }

    /** Returns true if field ids is set (has been assigned a value) and false otherwise */
    public boolean isSetIds() {
      return this.ids != null;
    }

    public void setIdsIsSet(boolean value) {
      if (!value) {
        this.ids = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IDS:
        if (value == null) {
          unsetIds();
        } else {
          setIds((List<Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IDS:
        return getIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IDS:
        return isSetIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof releaseAlarmByIds_args)
        return this.equals((releaseAlarmByIds_args)that);
      return false;
    }

    public boolean equals(releaseAlarmByIds_args that) {
      if (that == null)
        return false;

      boolean this_present_ids = true && this.isSetIds();
      boolean that_present_ids = true && that.isSetIds();
      if (this_present_ids || that_present_ids) {
        if (!(this_present_ids && that_present_ids))
          return false;
        if (!this.ids.equals(that.ids))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(releaseAlarmByIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      releaseAlarmByIds_args typedOther = (releaseAlarmByIds_args)other;

      lastComparison = Boolean.valueOf(isSetIds()).compareTo(typedOther.isSetIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ids, typedOther.ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("releaseAlarmByIds_args(");
      boolean first = true;

      sb.append("ids:");
      if (this.ids == null) {
        sb.append("null");
      } else {
        sb.append(this.ids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class releaseAlarmByIds_argsStandardSchemeFactory implements SchemeFactory {
      public releaseAlarmByIds_argsStandardScheme getScheme() {
        return new releaseAlarmByIds_argsStandardScheme();
      }
    }

    private static class releaseAlarmByIds_argsStandardScheme extends StandardScheme<releaseAlarmByIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, releaseAlarmByIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list34 = iprot.readListBegin();
                  struct.ids = new ArrayList<Integer>(_list34.size);
                  for (int _i35 = 0; _i35 < _list34.size; ++_i35)
                  {
                    int _elem36; // required
                    _elem36 = iprot.readI32();
                    struct.ids.add(_elem36);
                  }
                  iprot.readListEnd();
                }
                struct.setIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, releaseAlarmByIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ids != null) {
          oprot.writeFieldBegin(IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.ids.size()));
            for (int _iter37 : struct.ids)
            {
              oprot.writeI32(_iter37);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class releaseAlarmByIds_argsTupleSchemeFactory implements SchemeFactory {
      public releaseAlarmByIds_argsTupleScheme getScheme() {
        return new releaseAlarmByIds_argsTupleScheme();
      }
    }

    private static class releaseAlarmByIds_argsTupleScheme extends TupleScheme<releaseAlarmByIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, releaseAlarmByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIds()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIds()) {
          {
            oprot.writeI32(struct.ids.size());
            for (int _iter38 : struct.ids)
            {
              oprot.writeI32(_iter38);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, releaseAlarmByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list39 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.ids = new ArrayList<Integer>(_list39.size);
            for (int _i40 = 0; _i40 < _list39.size; ++_i40)
            {
              int _elem41; // required
              _elem41 = iprot.readI32();
              struct.ids.add(_elem41);
            }
          }
          struct.setIdsIsSet(true);
        }
      }
    }

  }

  public static class releaseAlarmByIds_result implements org.apache.thrift.TBase<releaseAlarmByIds_result, releaseAlarmByIds_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("releaseAlarmByIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new releaseAlarmByIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new releaseAlarmByIds_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(releaseAlarmByIds_result.class, metaDataMap);
    }

    public releaseAlarmByIds_result() {
    }

    public releaseAlarmByIds_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public releaseAlarmByIds_result(releaseAlarmByIds_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public releaseAlarmByIds_result deepCopy() {
      return new releaseAlarmByIds_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public releaseAlarmByIds_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof releaseAlarmByIds_result)
        return this.equals((releaseAlarmByIds_result)that);
      return false;
    }

    public boolean equals(releaseAlarmByIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(releaseAlarmByIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      releaseAlarmByIds_result typedOther = (releaseAlarmByIds_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("releaseAlarmByIds_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class releaseAlarmByIds_resultStandardSchemeFactory implements SchemeFactory {
      public releaseAlarmByIds_resultStandardScheme getScheme() {
        return new releaseAlarmByIds_resultStandardScheme();
      }
    }

    private static class releaseAlarmByIds_resultStandardScheme extends StandardScheme<releaseAlarmByIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, releaseAlarmByIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, releaseAlarmByIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class releaseAlarmByIds_resultTupleSchemeFactory implements SchemeFactory {
      public releaseAlarmByIds_resultTupleScheme getScheme() {
        return new releaseAlarmByIds_resultTupleScheme();
      }
    }

    private static class releaseAlarmByIds_resultTupleScheme extends TupleScheme<releaseAlarmByIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, releaseAlarmByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, releaseAlarmByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
