/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package bma.siteone.alarm.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TAlarm implements org.apache.thrift.TBase<TAlarm, TAlarm._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TAlarm");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("level", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField SYSTEM_FIELD_DESC = new org.apache.thrift.protocol.TField("system", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField STYPE1_FIELD_DESC = new org.apache.thrift.protocol.TField("stype1", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField STYPE2_FIELD_DESC = new org.apache.thrift.protocol.TField("stype2", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField STARTTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("starttime", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField ENDTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endtime", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField FREQUENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("frequency", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField TIMES_FIELD_DESC = new org.apache.thrift.protocol.TField("times", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField OP_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("op_time", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField OP_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("op_user", org.apache.thrift.protocol.TType.STRING, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TAlarmStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TAlarmTupleSchemeFactory());
  }

  public int id; // required
  public int type; // required
  public int level; // required
  public String system; // required
  public String stype1; // required
  public String stype2; // required
  public String content; // required
  public int starttime; // required
  public int endtime; // required
  public int frequency; // required
  public int times; // required
  public int status; // required
  public String op_time; // required
  public String op_user; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    TYPE((short)2, "type"),
    LEVEL((short)3, "level"),
    SYSTEM((short)4, "system"),
    STYPE1((short)5, "stype1"),
    STYPE2((short)6, "stype2"),
    CONTENT((short)7, "content"),
    STARTTIME((short)8, "starttime"),
    ENDTIME((short)9, "endtime"),
    FREQUENCY((short)10, "frequency"),
    TIMES((short)11, "times"),
    STATUS((short)12, "status"),
    OP_TIME((short)13, "op_time"),
    OP_USER((short)14, "op_user");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // TYPE
          return TYPE;
        case 3: // LEVEL
          return LEVEL;
        case 4: // SYSTEM
          return SYSTEM;
        case 5: // STYPE1
          return STYPE1;
        case 6: // STYPE2
          return STYPE2;
        case 7: // CONTENT
          return CONTENT;
        case 8: // STARTTIME
          return STARTTIME;
        case 9: // ENDTIME
          return ENDTIME;
        case 10: // FREQUENCY
          return FREQUENCY;
        case 11: // TIMES
          return TIMES;
        case 12: // STATUS
          return STATUS;
        case 13: // OP_TIME
          return OP_TIME;
        case 14: // OP_USER
          return OP_USER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __TYPE_ISSET_ID = 1;
  private static final int __LEVEL_ISSET_ID = 2;
  private static final int __STARTTIME_ISSET_ID = 3;
  private static final int __ENDTIME_ISSET_ID = 4;
  private static final int __FREQUENCY_ISSET_ID = 5;
  private static final int __TIMES_ISSET_ID = 6;
  private static final int __STATUS_ISSET_ID = 7;
  private BitSet __isset_bit_vector = new BitSet(8);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LEVEL, new org.apache.thrift.meta_data.FieldMetaData("level", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SYSTEM, new org.apache.thrift.meta_data.FieldMetaData("system", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STYPE1, new org.apache.thrift.meta_data.FieldMetaData("stype1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STYPE2, new org.apache.thrift.meta_data.FieldMetaData("stype2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STARTTIME, new org.apache.thrift.meta_data.FieldMetaData("starttime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ENDTIME, new org.apache.thrift.meta_data.FieldMetaData("endtime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FREQUENCY, new org.apache.thrift.meta_data.FieldMetaData("frequency", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TIMES, new org.apache.thrift.meta_data.FieldMetaData("times", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OP_TIME, new org.apache.thrift.meta_data.FieldMetaData("op_time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OP_USER, new org.apache.thrift.meta_data.FieldMetaData("op_user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TAlarm.class, metaDataMap);
  }

  public TAlarm() {
  }

  public TAlarm(
    int id,
    int type,
    int level,
    String system,
    String stype1,
    String stype2,
    String content,
    int starttime,
    int endtime,
    int frequency,
    int times,
    int status,
    String op_time,
    String op_user)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.type = type;
    setTypeIsSet(true);
    this.level = level;
    setLevelIsSet(true);
    this.system = system;
    this.stype1 = stype1;
    this.stype2 = stype2;
    this.content = content;
    this.starttime = starttime;
    setStarttimeIsSet(true);
    this.endtime = endtime;
    setEndtimeIsSet(true);
    this.frequency = frequency;
    setFrequencyIsSet(true);
    this.times = times;
    setTimesIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.op_time = op_time;
    this.op_user = op_user;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TAlarm(TAlarm other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.id = other.id;
    this.type = other.type;
    this.level = other.level;
    if (other.isSetSystem()) {
      this.system = other.system;
    }
    if (other.isSetStype1()) {
      this.stype1 = other.stype1;
    }
    if (other.isSetStype2()) {
      this.stype2 = other.stype2;
    }
    if (other.isSetContent()) {
      this.content = other.content;
    }
    this.starttime = other.starttime;
    this.endtime = other.endtime;
    this.frequency = other.frequency;
    this.times = other.times;
    this.status = other.status;
    if (other.isSetOp_time()) {
      this.op_time = other.op_time;
    }
    if (other.isSetOp_user()) {
      this.op_user = other.op_user;
    }
  }

  public TAlarm deepCopy() {
    return new TAlarm(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setTypeIsSet(false);
    this.type = 0;
    setLevelIsSet(false);
    this.level = 0;
    this.system = null;
    this.stype1 = null;
    this.stype2 = null;
    this.content = null;
    setStarttimeIsSet(false);
    this.starttime = 0;
    setEndtimeIsSet(false);
    this.endtime = 0;
    setFrequencyIsSet(false);
    this.frequency = 0;
    setTimesIsSet(false);
    this.times = 0;
    setStatusIsSet(false);
    this.status = 0;
    this.op_time = null;
    this.op_user = null;
  }

  public int getId() {
    return this.id;
  }

  public TAlarm setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bit_vector.clear(__ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return __isset_bit_vector.get(__ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bit_vector.set(__ID_ISSET_ID, value);
  }

  public int getType() {
    return this.type;
  }

  public TAlarm setType(int type) {
    this.type = type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bit_vector.clear(__TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return __isset_bit_vector.get(__TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bit_vector.set(__TYPE_ISSET_ID, value);
  }

  public int getLevel() {
    return this.level;
  }

  public TAlarm setLevel(int level) {
    this.level = level;
    setLevelIsSet(true);
    return this;
  }

  public void unsetLevel() {
    __isset_bit_vector.clear(__LEVEL_ISSET_ID);
  }

  /** Returns true if field level is set (has been assigned a value) and false otherwise */
  public boolean isSetLevel() {
    return __isset_bit_vector.get(__LEVEL_ISSET_ID);
  }

  public void setLevelIsSet(boolean value) {
    __isset_bit_vector.set(__LEVEL_ISSET_ID, value);
  }

  public String getSystem() {
    return this.system;
  }

  public TAlarm setSystem(String system) {
    this.system = system;
    return this;
  }

  public void unsetSystem() {
    this.system = null;
  }

  /** Returns true if field system is set (has been assigned a value) and false otherwise */
  public boolean isSetSystem() {
    return this.system != null;
  }

  public void setSystemIsSet(boolean value) {
    if (!value) {
      this.system = null;
    }
  }

  public String getStype1() {
    return this.stype1;
  }

  public TAlarm setStype1(String stype1) {
    this.stype1 = stype1;
    return this;
  }

  public void unsetStype1() {
    this.stype1 = null;
  }

  /** Returns true if field stype1 is set (has been assigned a value) and false otherwise */
  public boolean isSetStype1() {
    return this.stype1 != null;
  }

  public void setStype1IsSet(boolean value) {
    if (!value) {
      this.stype1 = null;
    }
  }

  public String getStype2() {
    return this.stype2;
  }

  public TAlarm setStype2(String stype2) {
    this.stype2 = stype2;
    return this;
  }

  public void unsetStype2() {
    this.stype2 = null;
  }

  /** Returns true if field stype2 is set (has been assigned a value) and false otherwise */
  public boolean isSetStype2() {
    return this.stype2 != null;
  }

  public void setStype2IsSet(boolean value) {
    if (!value) {
      this.stype2 = null;
    }
  }

  public String getContent() {
    return this.content;
  }

  public TAlarm setContent(String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public int getStarttime() {
    return this.starttime;
  }

  public TAlarm setStarttime(int starttime) {
    this.starttime = starttime;
    setStarttimeIsSet(true);
    return this;
  }

  public void unsetStarttime() {
    __isset_bit_vector.clear(__STARTTIME_ISSET_ID);
  }

  /** Returns true if field starttime is set (has been assigned a value) and false otherwise */
  public boolean isSetStarttime() {
    return __isset_bit_vector.get(__STARTTIME_ISSET_ID);
  }

  public void setStarttimeIsSet(boolean value) {
    __isset_bit_vector.set(__STARTTIME_ISSET_ID, value);
  }

  public int getEndtime() {
    return this.endtime;
  }

  public TAlarm setEndtime(int endtime) {
    this.endtime = endtime;
    setEndtimeIsSet(true);
    return this;
  }

  public void unsetEndtime() {
    __isset_bit_vector.clear(__ENDTIME_ISSET_ID);
  }

  /** Returns true if field endtime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndtime() {
    return __isset_bit_vector.get(__ENDTIME_ISSET_ID);
  }

  public void setEndtimeIsSet(boolean value) {
    __isset_bit_vector.set(__ENDTIME_ISSET_ID, value);
  }

  public int getFrequency() {
    return this.frequency;
  }

  public TAlarm setFrequency(int frequency) {
    this.frequency = frequency;
    setFrequencyIsSet(true);
    return this;
  }

  public void unsetFrequency() {
    __isset_bit_vector.clear(__FREQUENCY_ISSET_ID);
  }

  /** Returns true if field frequency is set (has been assigned a value) and false otherwise */
  public boolean isSetFrequency() {
    return __isset_bit_vector.get(__FREQUENCY_ISSET_ID);
  }

  public void setFrequencyIsSet(boolean value) {
    __isset_bit_vector.set(__FREQUENCY_ISSET_ID, value);
  }

  public int getTimes() {
    return this.times;
  }

  public TAlarm setTimes(int times) {
    this.times = times;
    setTimesIsSet(true);
    return this;
  }

  public void unsetTimes() {
    __isset_bit_vector.clear(__TIMES_ISSET_ID);
  }

  /** Returns true if field times is set (has been assigned a value) and false otherwise */
  public boolean isSetTimes() {
    return __isset_bit_vector.get(__TIMES_ISSET_ID);
  }

  public void setTimesIsSet(boolean value) {
    __isset_bit_vector.set(__TIMES_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public TAlarm setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bit_vector.clear(__STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return __isset_bit_vector.get(__STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bit_vector.set(__STATUS_ISSET_ID, value);
  }

  public String getOp_time() {
    return this.op_time;
  }

  public TAlarm setOp_time(String op_time) {
    this.op_time = op_time;
    return this;
  }

  public void unsetOp_time() {
    this.op_time = null;
  }

  /** Returns true if field op_time is set (has been assigned a value) and false otherwise */
  public boolean isSetOp_time() {
    return this.op_time != null;
  }

  public void setOp_timeIsSet(boolean value) {
    if (!value) {
      this.op_time = null;
    }
  }

  public String getOp_user() {
    return this.op_user;
  }

  public TAlarm setOp_user(String op_user) {
    this.op_user = op_user;
    return this;
  }

  public void unsetOp_user() {
    this.op_user = null;
  }

  /** Returns true if field op_user is set (has been assigned a value) and false otherwise */
  public boolean isSetOp_user() {
    return this.op_user != null;
  }

  public void setOp_userIsSet(boolean value) {
    if (!value) {
      this.op_user = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Integer)value);
      }
      break;

    case LEVEL:
      if (value == null) {
        unsetLevel();
      } else {
        setLevel((Integer)value);
      }
      break;

    case SYSTEM:
      if (value == null) {
        unsetSystem();
      } else {
        setSystem((String)value);
      }
      break;

    case STYPE1:
      if (value == null) {
        unsetStype1();
      } else {
        setStype1((String)value);
      }
      break;

    case STYPE2:
      if (value == null) {
        unsetStype2();
      } else {
        setStype2((String)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case STARTTIME:
      if (value == null) {
        unsetStarttime();
      } else {
        setStarttime((Integer)value);
      }
      break;

    case ENDTIME:
      if (value == null) {
        unsetEndtime();
      } else {
        setEndtime((Integer)value);
      }
      break;

    case FREQUENCY:
      if (value == null) {
        unsetFrequency();
      } else {
        setFrequency((Integer)value);
      }
      break;

    case TIMES:
      if (value == null) {
        unsetTimes();
      } else {
        setTimes((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case OP_TIME:
      if (value == null) {
        unsetOp_time();
      } else {
        setOp_time((String)value);
      }
      break;

    case OP_USER:
      if (value == null) {
        unsetOp_user();
      } else {
        setOp_user((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case TYPE:
      return Integer.valueOf(getType());

    case LEVEL:
      return Integer.valueOf(getLevel());

    case SYSTEM:
      return getSystem();

    case STYPE1:
      return getStype1();

    case STYPE2:
      return getStype2();

    case CONTENT:
      return getContent();

    case STARTTIME:
      return Integer.valueOf(getStarttime());

    case ENDTIME:
      return Integer.valueOf(getEndtime());

    case FREQUENCY:
      return Integer.valueOf(getFrequency());

    case TIMES:
      return Integer.valueOf(getTimes());

    case STATUS:
      return Integer.valueOf(getStatus());

    case OP_TIME:
      return getOp_time();

    case OP_USER:
      return getOp_user();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case TYPE:
      return isSetType();
    case LEVEL:
      return isSetLevel();
    case SYSTEM:
      return isSetSystem();
    case STYPE1:
      return isSetStype1();
    case STYPE2:
      return isSetStype2();
    case CONTENT:
      return isSetContent();
    case STARTTIME:
      return isSetStarttime();
    case ENDTIME:
      return isSetEndtime();
    case FREQUENCY:
      return isSetFrequency();
    case TIMES:
      return isSetTimes();
    case STATUS:
      return isSetStatus();
    case OP_TIME:
      return isSetOp_time();
    case OP_USER:
      return isSetOp_user();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TAlarm)
      return this.equals((TAlarm)that);
    return false;
  }

  public boolean equals(TAlarm that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_type = true;
    boolean that_present_type = true;
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    boolean this_present_level = true;
    boolean that_present_level = true;
    if (this_present_level || that_present_level) {
      if (!(this_present_level && that_present_level))
        return false;
      if (this.level != that.level)
        return false;
    }

    boolean this_present_system = true && this.isSetSystem();
    boolean that_present_system = true && that.isSetSystem();
    if (this_present_system || that_present_system) {
      if (!(this_present_system && that_present_system))
        return false;
      if (!this.system.equals(that.system))
        return false;
    }

    boolean this_present_stype1 = true && this.isSetStype1();
    boolean that_present_stype1 = true && that.isSetStype1();
    if (this_present_stype1 || that_present_stype1) {
      if (!(this_present_stype1 && that_present_stype1))
        return false;
      if (!this.stype1.equals(that.stype1))
        return false;
    }

    boolean this_present_stype2 = true && this.isSetStype2();
    boolean that_present_stype2 = true && that.isSetStype2();
    if (this_present_stype2 || that_present_stype2) {
      if (!(this_present_stype2 && that_present_stype2))
        return false;
      if (!this.stype2.equals(that.stype2))
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_starttime = true;
    boolean that_present_starttime = true;
    if (this_present_starttime || that_present_starttime) {
      if (!(this_present_starttime && that_present_starttime))
        return false;
      if (this.starttime != that.starttime)
        return false;
    }

    boolean this_present_endtime = true;
    boolean that_present_endtime = true;
    if (this_present_endtime || that_present_endtime) {
      if (!(this_present_endtime && that_present_endtime))
        return false;
      if (this.endtime != that.endtime)
        return false;
    }

    boolean this_present_frequency = true;
    boolean that_present_frequency = true;
    if (this_present_frequency || that_present_frequency) {
      if (!(this_present_frequency && that_present_frequency))
        return false;
      if (this.frequency != that.frequency)
        return false;
    }

    boolean this_present_times = true;
    boolean that_present_times = true;
    if (this_present_times || that_present_times) {
      if (!(this_present_times && that_present_times))
        return false;
      if (this.times != that.times)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_op_time = true && this.isSetOp_time();
    boolean that_present_op_time = true && that.isSetOp_time();
    if (this_present_op_time || that_present_op_time) {
      if (!(this_present_op_time && that_present_op_time))
        return false;
      if (!this.op_time.equals(that.op_time))
        return false;
    }

    boolean this_present_op_user = true && this.isSetOp_user();
    boolean that_present_op_user = true && that.isSetOp_user();
    if (this_present_op_user || that_present_op_user) {
      if (!(this_present_op_user && that_present_op_user))
        return false;
      if (!this.op_user.equals(that.op_user))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TAlarm other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TAlarm typedOther = (TAlarm)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, typedOther.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLevel()).compareTo(typedOther.isSetLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.level, typedOther.level);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSystem()).compareTo(typedOther.isSetSystem());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSystem()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.system, typedOther.system);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStype1()).compareTo(typedOther.isSetStype1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStype1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stype1, typedOther.stype1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStype2()).compareTo(typedOther.isSetStype2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStype2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stype2, typedOther.stype2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(typedOther.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, typedOther.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStarttime()).compareTo(typedOther.isSetStarttime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStarttime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.starttime, typedOther.starttime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndtime()).compareTo(typedOther.isSetEndtime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndtime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endtime, typedOther.endtime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrequency()).compareTo(typedOther.isSetFrequency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrequency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frequency, typedOther.frequency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimes()).compareTo(typedOther.isSetTimes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.times, typedOther.times);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOp_time()).compareTo(typedOther.isSetOp_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOp_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.op_time, typedOther.op_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOp_user()).compareTo(typedOther.isSetOp_user());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOp_user()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.op_user, typedOther.op_user);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TAlarm(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    sb.append(this.type);
    first = false;
    if (!first) sb.append(", ");
    sb.append("level:");
    sb.append(this.level);
    first = false;
    if (!first) sb.append(", ");
    sb.append("system:");
    if (this.system == null) {
      sb.append("null");
    } else {
      sb.append(this.system);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stype1:");
    if (this.stype1 == null) {
      sb.append("null");
    } else {
      sb.append(this.stype1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stype2:");
    if (this.stype2 == null) {
      sb.append("null");
    } else {
      sb.append(this.stype2);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      sb.append(this.content);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("starttime:");
    sb.append(this.starttime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endtime:");
    sb.append(this.endtime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("frequency:");
    sb.append(this.frequency);
    first = false;
    if (!first) sb.append(", ");
    sb.append("times:");
    sb.append(this.times);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("op_time:");
    if (this.op_time == null) {
      sb.append("null");
    } else {
      sb.append(this.op_time);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("op_user:");
    if (this.op_user == null) {
      sb.append("null");
    } else {
      sb.append(this.op_user);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TAlarmStandardSchemeFactory implements SchemeFactory {
    public TAlarmStandardScheme getScheme() {
      return new TAlarmStandardScheme();
    }
  }

  private static class TAlarmStandardScheme extends StandardScheme<TAlarm> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TAlarm struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = iprot.readI32();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.level = iprot.readI32();
              struct.setLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SYSTEM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.system = iprot.readString();
              struct.setSystemIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STYPE1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stype1 = iprot.readString();
              struct.setStype1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STYPE2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stype2 = iprot.readString();
              struct.setStype2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // STARTTIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.starttime = iprot.readI32();
              struct.setStarttimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ENDTIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.endtime = iprot.readI32();
              struct.setEndtimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // FREQUENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.frequency = iprot.readI32();
              struct.setFrequencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TIMES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.times = iprot.readI32();
              struct.setTimesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // OP_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.op_time = iprot.readString();
              struct.setOp_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // OP_USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.op_user = iprot.readString();
              struct.setOp_userIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TAlarm struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(struct.type);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LEVEL_FIELD_DESC);
      oprot.writeI32(struct.level);
      oprot.writeFieldEnd();
      if (struct.system != null) {
        oprot.writeFieldBegin(SYSTEM_FIELD_DESC);
        oprot.writeString(struct.system);
        oprot.writeFieldEnd();
      }
      if (struct.stype1 != null) {
        oprot.writeFieldBegin(STYPE1_FIELD_DESC);
        oprot.writeString(struct.stype1);
        oprot.writeFieldEnd();
      }
      if (struct.stype2 != null) {
        oprot.writeFieldBegin(STYPE2_FIELD_DESC);
        oprot.writeString(struct.stype2);
        oprot.writeFieldEnd();
      }
      if (struct.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeString(struct.content);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STARTTIME_FIELD_DESC);
      oprot.writeI32(struct.starttime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ENDTIME_FIELD_DESC);
      oprot.writeI32(struct.endtime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FREQUENCY_FIELD_DESC);
      oprot.writeI32(struct.frequency);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TIMES_FIELD_DESC);
      oprot.writeI32(struct.times);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.op_time != null) {
        oprot.writeFieldBegin(OP_TIME_FIELD_DESC);
        oprot.writeString(struct.op_time);
        oprot.writeFieldEnd();
      }
      if (struct.op_user != null) {
        oprot.writeFieldBegin(OP_USER_FIELD_DESC);
        oprot.writeString(struct.op_user);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TAlarmTupleSchemeFactory implements SchemeFactory {
    public TAlarmTupleScheme getScheme() {
      return new TAlarmTupleScheme();
    }
  }

  private static class TAlarmTupleScheme extends TupleScheme<TAlarm> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TAlarm struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetType()) {
        optionals.set(1);
      }
      if (struct.isSetLevel()) {
        optionals.set(2);
      }
      if (struct.isSetSystem()) {
        optionals.set(3);
      }
      if (struct.isSetStype1()) {
        optionals.set(4);
      }
      if (struct.isSetStype2()) {
        optionals.set(5);
      }
      if (struct.isSetContent()) {
        optionals.set(6);
      }
      if (struct.isSetStarttime()) {
        optionals.set(7);
      }
      if (struct.isSetEndtime()) {
        optionals.set(8);
      }
      if (struct.isSetFrequency()) {
        optionals.set(9);
      }
      if (struct.isSetTimes()) {
        optionals.set(10);
      }
      if (struct.isSetStatus()) {
        optionals.set(11);
      }
      if (struct.isSetOp_time()) {
        optionals.set(12);
      }
      if (struct.isSetOp_user()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type);
      }
      if (struct.isSetLevel()) {
        oprot.writeI32(struct.level);
      }
      if (struct.isSetSystem()) {
        oprot.writeString(struct.system);
      }
      if (struct.isSetStype1()) {
        oprot.writeString(struct.stype1);
      }
      if (struct.isSetStype2()) {
        oprot.writeString(struct.stype2);
      }
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
      if (struct.isSetStarttime()) {
        oprot.writeI32(struct.starttime);
      }
      if (struct.isSetEndtime()) {
        oprot.writeI32(struct.endtime);
      }
      if (struct.isSetFrequency()) {
        oprot.writeI32(struct.frequency);
      }
      if (struct.isSetTimes()) {
        oprot.writeI32(struct.times);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetOp_time()) {
        oprot.writeString(struct.op_time);
      }
      if (struct.isSetOp_user()) {
        oprot.writeString(struct.op_user);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TAlarm struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.type = iprot.readI32();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.level = iprot.readI32();
        struct.setLevelIsSet(true);
      }
      if (incoming.get(3)) {
        struct.system = iprot.readString();
        struct.setSystemIsSet(true);
      }
      if (incoming.get(4)) {
        struct.stype1 = iprot.readString();
        struct.setStype1IsSet(true);
      }
      if (incoming.get(5)) {
        struct.stype2 = iprot.readString();
        struct.setStype2IsSet(true);
      }
      if (incoming.get(6)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
      if (incoming.get(7)) {
        struct.starttime = iprot.readI32();
        struct.setStarttimeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.endtime = iprot.readI32();
        struct.setEndtimeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.frequency = iprot.readI32();
        struct.setFrequencyIsSet(true);
      }
      if (incoming.get(10)) {
        struct.times = iprot.readI32();
        struct.setTimesIsSet(true);
      }
      if (incoming.get(11)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(12)) {
        struct.op_time = iprot.readString();
        struct.setOp_timeIsSet(true);
      }
      if (incoming.get(13)) {
        struct.op_user = iprot.readString();
        struct.setOp_userIsSet(true);
      }
    }
  }

}

