/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package bma.siteone.comments.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;

public class TCommentInfo implements org.apache.thrift.TBase<TCommentInfo, TCommentInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TCommentInfo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField POINT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pointId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField REPLY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("replyId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField IP_FIELD_DESC = new org.apache.thrift.protocol.TField("ip", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField RESERVE1_FIELD_DESC = new org.apache.thrift.protocol.TField("reserve1", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField RESERVE2_FIELD_DESC = new org.apache.thrift.protocol.TField("reserve2", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField RESERVE3_FIELD_DESC = new org.apache.thrift.protocol.TField("reserve3", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField RESERVE4_FIELD_DESC = new org.apache.thrift.protocol.TField("reserve4", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField SUPPORT_FIELD_DESC = new org.apache.thrift.protocol.TField("support", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField OPPOSE_FIELD_DESC = new org.apache.thrift.protocol.TField("oppose", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField NEED_AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("needAuth", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField HIDE_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("hideFlag", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)17);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TCommentInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TCommentInfoTupleSchemeFactory());
  }

  public int id; // required
  public int pointId; // required
  public int replyId; // required
  public String userName; // required
  public int userId; // required
  public String content; // required
  public String ip; // required
  public int reserve1; // required
  public int reserve2; // required
  public String reserve3; // required
  public String reserve4; // required
  public int status; // required
  public int support; // required
  public int oppose; // required
  public int needAuth; // required
  public int hideFlag; // required
  public String createTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    POINT_ID((short)2, "pointId"),
    REPLY_ID((short)3, "replyId"),
    USER_NAME((short)4, "userName"),
    USER_ID((short)5, "userId"),
    CONTENT((short)6, "content"),
    IP((short)7, "ip"),
    RESERVE1((short)8, "reserve1"),
    RESERVE2((short)9, "reserve2"),
    RESERVE3((short)10, "reserve3"),
    RESERVE4((short)11, "reserve4"),
    STATUS((short)12, "status"),
    SUPPORT((short)13, "support"),
    OPPOSE((short)14, "oppose"),
    NEED_AUTH((short)15, "needAuth"),
    HIDE_FLAG((short)16, "hideFlag"),
    CREATE_TIME((short)17, "createTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // POINT_ID
          return POINT_ID;
        case 3: // REPLY_ID
          return REPLY_ID;
        case 4: // USER_NAME
          return USER_NAME;
        case 5: // USER_ID
          return USER_ID;
        case 6: // CONTENT
          return CONTENT;
        case 7: // IP
          return IP;
        case 8: // RESERVE1
          return RESERVE1;
        case 9: // RESERVE2
          return RESERVE2;
        case 10: // RESERVE3
          return RESERVE3;
        case 11: // RESERVE4
          return RESERVE4;
        case 12: // STATUS
          return STATUS;
        case 13: // SUPPORT
          return SUPPORT;
        case 14: // OPPOSE
          return OPPOSE;
        case 15: // NEED_AUTH
          return NEED_AUTH;
        case 16: // HIDE_FLAG
          return HIDE_FLAG;
        case 17: // CREATE_TIME
          return CREATE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
	public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
	public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __POINTID_ISSET_ID = 1;
  private static final int __REPLYID_ISSET_ID = 2;
  private static final int __USERID_ISSET_ID = 3;
  private static final int __RESERVE1_ISSET_ID = 4;
  private static final int __RESERVE2_ISSET_ID = 5;
  private static final int __STATUS_ISSET_ID = 6;
  private static final int __SUPPORT_ISSET_ID = 7;
  private static final int __OPPOSE_ISSET_ID = 8;
  private static final int __NEEDAUTH_ISSET_ID = 9;
  private static final int __HIDEFLAG_ISSET_ID = 10;
  private BitSet __isset_bit_vector = new BitSet(11);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POINT_ID, new org.apache.thrift.meta_data.FieldMetaData("pointId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REPLY_ID, new org.apache.thrift.meta_data.FieldMetaData("replyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IP, new org.apache.thrift.meta_data.FieldMetaData("ip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESERVE1, new org.apache.thrift.meta_data.FieldMetaData("reserve1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RESERVE2, new org.apache.thrift.meta_data.FieldMetaData("reserve2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RESERVE3, new org.apache.thrift.meta_data.FieldMetaData("reserve3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESERVE4, new org.apache.thrift.meta_data.FieldMetaData("reserve4", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SUPPORT, new org.apache.thrift.meta_data.FieldMetaData("support", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OPPOSE, new org.apache.thrift.meta_data.FieldMetaData("oppose", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NEED_AUTH, new org.apache.thrift.meta_data.FieldMetaData("needAuth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HIDE_FLAG, new org.apache.thrift.meta_data.FieldMetaData("hideFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TCommentInfo.class, metaDataMap);
  }

  public TCommentInfo() {
    this.id = 0;

  }

  public TCommentInfo(
    int id,
    int pointId,
    int replyId,
    String userName,
    int userId,
    String content,
    String ip,
    int reserve1,
    int reserve2,
    String reserve3,
    String reserve4,
    int status,
    int support,
    int oppose,
    int needAuth,
    int hideFlag,
    String createTime)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.pointId = pointId;
    setPointIdIsSet(true);
    this.replyId = replyId;
    setReplyIdIsSet(true);
    this.userName = userName;
    this.userId = userId;
    setUserIdIsSet(true);
    this.content = content;
    this.ip = ip;
    this.reserve1 = reserve1;
    setReserve1IsSet(true);
    this.reserve2 = reserve2;
    setReserve2IsSet(true);
    this.reserve3 = reserve3;
    this.reserve4 = reserve4;
    this.status = status;
    setStatusIsSet(true);
    this.support = support;
    setSupportIsSet(true);
    this.oppose = oppose;
    setOpposeIsSet(true);
    this.needAuth = needAuth;
    setNeedAuthIsSet(true);
    this.hideFlag = hideFlag;
    setHideFlagIsSet(true);
    this.createTime = createTime;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TCommentInfo(TCommentInfo other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.id = other.id;
    this.pointId = other.pointId;
    this.replyId = other.replyId;
    if (other.isSetUserName()) {
      this.userName = other.userName;
    }
    this.userId = other.userId;
    if (other.isSetContent()) {
      this.content = other.content;
    }
    if (other.isSetIp()) {
      this.ip = other.ip;
    }
    this.reserve1 = other.reserve1;
    this.reserve2 = other.reserve2;
    if (other.isSetReserve3()) {
      this.reserve3 = other.reserve3;
    }
    if (other.isSetReserve4()) {
      this.reserve4 = other.reserve4;
    }
    this.status = other.status;
    this.support = other.support;
    this.oppose = other.oppose;
    this.needAuth = other.needAuth;
    this.hideFlag = other.hideFlag;
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
  }

  @Override
public TCommentInfo deepCopy() {
    return new TCommentInfo(this);
  }

  @Override
  public void clear() {
    this.id = 0;

    setPointIdIsSet(false);
    this.pointId = 0;
    setReplyIdIsSet(false);
    this.replyId = 0;
    this.userName = null;
    setUserIdIsSet(false);
    this.userId = 0;
    this.content = null;
    this.ip = null;
    setReserve1IsSet(false);
    this.reserve1 = 0;
    setReserve2IsSet(false);
    this.reserve2 = 0;
    this.reserve3 = null;
    this.reserve4 = null;
    setStatusIsSet(false);
    this.status = 0;
    setSupportIsSet(false);
    this.support = 0;
    setOpposeIsSet(false);
    this.oppose = 0;
    setNeedAuthIsSet(false);
    this.needAuth = 0;
    setHideFlagIsSet(false);
    this.hideFlag = 0;
    this.createTime = null;
  }

  public int getId() {
    return this.id;
  }

  public TCommentInfo setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bit_vector.clear(__ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return __isset_bit_vector.get(__ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bit_vector.set(__ID_ISSET_ID, value);
  }

  public int getPointId() {
    return this.pointId;
  }

  public TCommentInfo setPointId(int pointId) {
    this.pointId = pointId;
    setPointIdIsSet(true);
    return this;
  }

  public void unsetPointId() {
    __isset_bit_vector.clear(__POINTID_ISSET_ID);
  }

  /** Returns true if field pointId is set (has been assigned a value) and false otherwise */
  public boolean isSetPointId() {
    return __isset_bit_vector.get(__POINTID_ISSET_ID);
  }

  public void setPointIdIsSet(boolean value) {
    __isset_bit_vector.set(__POINTID_ISSET_ID, value);
  }

  public int getReplyId() {
    return this.replyId;
  }

  public TCommentInfo setReplyId(int replyId) {
    this.replyId = replyId;
    setReplyIdIsSet(true);
    return this;
  }

  public void unsetReplyId() {
    __isset_bit_vector.clear(__REPLYID_ISSET_ID);
  }

  /** Returns true if field replyId is set (has been assigned a value) and false otherwise */
  public boolean isSetReplyId() {
    return __isset_bit_vector.get(__REPLYID_ISSET_ID);
  }

  public void setReplyIdIsSet(boolean value) {
    __isset_bit_vector.set(__REPLYID_ISSET_ID, value);
  }

  public String getUserName() {
    return this.userName;
  }

  public TCommentInfo setUserName(String userName) {
    this.userName = userName;
    return this;
  }

  public void unsetUserName() {
    this.userName = null;
  }

  /** Returns true if field userName is set (has been assigned a value) and false otherwise */
  public boolean isSetUserName() {
    return this.userName != null;
  }

  public void setUserNameIsSet(boolean value) {
    if (!value) {
      this.userName = null;
    }
  }

  public int getUserId() {
    return this.userId;
  }

  public TCommentInfo setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bit_vector.clear(__USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return __isset_bit_vector.get(__USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bit_vector.set(__USERID_ISSET_ID, value);
  }

  public String getContent() {
    return this.content;
  }

  public TCommentInfo setContent(String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public String getIp() {
    return this.ip;
  }

  public TCommentInfo setIp(String ip) {
    this.ip = ip;
    return this;
  }

  public void unsetIp() {
    this.ip = null;
  }

  /** Returns true if field ip is set (has been assigned a value) and false otherwise */
  public boolean isSetIp() {
    return this.ip != null;
  }

  public void setIpIsSet(boolean value) {
    if (!value) {
      this.ip = null;
    }
  }

  public int getReserve1() {
    return this.reserve1;
  }

  public TCommentInfo setReserve1(int reserve1) {
    this.reserve1 = reserve1;
    setReserve1IsSet(true);
    return this;
  }

  public void unsetReserve1() {
    __isset_bit_vector.clear(__RESERVE1_ISSET_ID);
  }

  /** Returns true if field reserve1 is set (has been assigned a value) and false otherwise */
  public boolean isSetReserve1() {
    return __isset_bit_vector.get(__RESERVE1_ISSET_ID);
  }

  public void setReserve1IsSet(boolean value) {
    __isset_bit_vector.set(__RESERVE1_ISSET_ID, value);
  }

  public int getReserve2() {
    return this.reserve2;
  }

  public TCommentInfo setReserve2(int reserve2) {
    this.reserve2 = reserve2;
    setReserve2IsSet(true);
    return this;
  }

  public void unsetReserve2() {
    __isset_bit_vector.clear(__RESERVE2_ISSET_ID);
  }

  /** Returns true if field reserve2 is set (has been assigned a value) and false otherwise */
  public boolean isSetReserve2() {
    return __isset_bit_vector.get(__RESERVE2_ISSET_ID);
  }

  public void setReserve2IsSet(boolean value) {
    __isset_bit_vector.set(__RESERVE2_ISSET_ID, value);
  }

  public String getReserve3() {
    return this.reserve3;
  }

  public TCommentInfo setReserve3(String reserve3) {
    this.reserve3 = reserve3;
    return this;
  }

  public void unsetReserve3() {
    this.reserve3 = null;
  }

  /** Returns true if field reserve3 is set (has been assigned a value) and false otherwise */
  public boolean isSetReserve3() {
    return this.reserve3 != null;
  }

  public void setReserve3IsSet(boolean value) {
    if (!value) {
      this.reserve3 = null;
    }
  }

  public String getReserve4() {
    return this.reserve4;
  }

  public TCommentInfo setReserve4(String reserve4) {
    this.reserve4 = reserve4;
    return this;
  }

  public void unsetReserve4() {
    this.reserve4 = null;
  }

  /** Returns true if field reserve4 is set (has been assigned a value) and false otherwise */
  public boolean isSetReserve4() {
    return this.reserve4 != null;
  }

  public void setReserve4IsSet(boolean value) {
    if (!value) {
      this.reserve4 = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public TCommentInfo setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bit_vector.clear(__STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return __isset_bit_vector.get(__STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bit_vector.set(__STATUS_ISSET_ID, value);
  }

  public int getSupport() {
    return this.support;
  }

  public TCommentInfo setSupport(int support) {
    this.support = support;
    setSupportIsSet(true);
    return this;
  }

  public void unsetSupport() {
    __isset_bit_vector.clear(__SUPPORT_ISSET_ID);
  }

  /** Returns true if field support is set (has been assigned a value) and false otherwise */
  public boolean isSetSupport() {
    return __isset_bit_vector.get(__SUPPORT_ISSET_ID);
  }

  public void setSupportIsSet(boolean value) {
    __isset_bit_vector.set(__SUPPORT_ISSET_ID, value);
  }

  public int getOppose() {
    return this.oppose;
  }

  public TCommentInfo setOppose(int oppose) {
    this.oppose = oppose;
    setOpposeIsSet(true);
    return this;
  }

  public void unsetOppose() {
    __isset_bit_vector.clear(__OPPOSE_ISSET_ID);
  }

  /** Returns true if field oppose is set (has been assigned a value) and false otherwise */
  public boolean isSetOppose() {
    return __isset_bit_vector.get(__OPPOSE_ISSET_ID);
  }

  public void setOpposeIsSet(boolean value) {
    __isset_bit_vector.set(__OPPOSE_ISSET_ID, value);
  }

  public int getNeedAuth() {
    return this.needAuth;
  }

  public TCommentInfo setNeedAuth(int needAuth) {
    this.needAuth = needAuth;
    setNeedAuthIsSet(true);
    return this;
  }

  public void unsetNeedAuth() {
    __isset_bit_vector.clear(__NEEDAUTH_ISSET_ID);
  }

  /** Returns true if field needAuth is set (has been assigned a value) and false otherwise */
  public boolean isSetNeedAuth() {
    return __isset_bit_vector.get(__NEEDAUTH_ISSET_ID);
  }

  public void setNeedAuthIsSet(boolean value) {
    __isset_bit_vector.set(__NEEDAUTH_ISSET_ID, value);
  }

  public int getHideFlag() {
    return this.hideFlag;
  }

  public TCommentInfo setHideFlag(int hideFlag) {
    this.hideFlag = hideFlag;
    setHideFlagIsSet(true);
    return this;
  }

  public void unsetHideFlag() {
    __isset_bit_vector.clear(__HIDEFLAG_ISSET_ID);
  }

  /** Returns true if field hideFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetHideFlag() {
    return __isset_bit_vector.get(__HIDEFLAG_ISSET_ID);
  }

  public void setHideFlagIsSet(boolean value) {
    __isset_bit_vector.set(__HIDEFLAG_ISSET_ID, value);
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public TCommentInfo setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  @Override
public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case POINT_ID:
      if (value == null) {
        unsetPointId();
      } else {
        setPointId((Integer)value);
      }
      break;

    case REPLY_ID:
      if (value == null) {
        unsetReplyId();
      } else {
        setReplyId((Integer)value);
      }
      break;

    case USER_NAME:
      if (value == null) {
        unsetUserName();
      } else {
        setUserName((String)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Integer)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case IP:
      if (value == null) {
        unsetIp();
      } else {
        setIp((String)value);
      }
      break;

    case RESERVE1:
      if (value == null) {
        unsetReserve1();
      } else {
        setReserve1((Integer)value);
      }
      break;

    case RESERVE2:
      if (value == null) {
        unsetReserve2();
      } else {
        setReserve2((Integer)value);
      }
      break;

    case RESERVE3:
      if (value == null) {
        unsetReserve3();
      } else {
        setReserve3((String)value);
      }
      break;

    case RESERVE4:
      if (value == null) {
        unsetReserve4();
      } else {
        setReserve4((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case SUPPORT:
      if (value == null) {
        unsetSupport();
      } else {
        setSupport((Integer)value);
      }
      break;

    case OPPOSE:
      if (value == null) {
        unsetOppose();
      } else {
        setOppose((Integer)value);
      }
      break;

    case NEED_AUTH:
      if (value == null) {
        unsetNeedAuth();
      } else {
        setNeedAuth((Integer)value);
      }
      break;

    case HIDE_FLAG:
      if (value == null) {
        unsetHideFlag();
      } else {
        setHideFlag((Integer)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    }
  }

  @Override
public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case POINT_ID:
      return Integer.valueOf(getPointId());

    case REPLY_ID:
      return Integer.valueOf(getReplyId());

    case USER_NAME:
      return getUserName();

    case USER_ID:
      return Integer.valueOf(getUserId());

    case CONTENT:
      return getContent();

    case IP:
      return getIp();

    case RESERVE1:
      return Integer.valueOf(getReserve1());

    case RESERVE2:
      return Integer.valueOf(getReserve2());

    case RESERVE3:
      return getReserve3();

    case RESERVE4:
      return getReserve4();

    case STATUS:
      return Integer.valueOf(getStatus());

    case SUPPORT:
      return Integer.valueOf(getSupport());

    case OPPOSE:
      return Integer.valueOf(getOppose());

    case NEED_AUTH:
      return Integer.valueOf(getNeedAuth());

    case HIDE_FLAG:
      return Integer.valueOf(getHideFlag());

    case CREATE_TIME:
      return getCreateTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case POINT_ID:
      return isSetPointId();
    case REPLY_ID:
      return isSetReplyId();
    case USER_NAME:
      return isSetUserName();
    case USER_ID:
      return isSetUserId();
    case CONTENT:
      return isSetContent();
    case IP:
      return isSetIp();
    case RESERVE1:
      return isSetReserve1();
    case RESERVE2:
      return isSetReserve2();
    case RESERVE3:
      return isSetReserve3();
    case RESERVE4:
      return isSetReserve4();
    case STATUS:
      return isSetStatus();
    case SUPPORT:
      return isSetSupport();
    case OPPOSE:
      return isSetOppose();
    case NEED_AUTH:
      return isSetNeedAuth();
    case HIDE_FLAG:
      return isSetHideFlag();
    case CREATE_TIME:
      return isSetCreateTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TCommentInfo)
      return this.equals((TCommentInfo)that);
    return false;
  }

  public boolean equals(TCommentInfo that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_pointId = true;
    boolean that_present_pointId = true;
    if (this_present_pointId || that_present_pointId) {
      if (!(this_present_pointId && that_present_pointId))
        return false;
      if (this.pointId != that.pointId)
        return false;
    }

    boolean this_present_replyId = true;
    boolean that_present_replyId = true;
    if (this_present_replyId || that_present_replyId) {
      if (!(this_present_replyId && that_present_replyId))
        return false;
      if (this.replyId != that.replyId)
        return false;
    }

    boolean this_present_userName = true && this.isSetUserName();
    boolean that_present_userName = true && that.isSetUserName();
    if (this_present_userName || that_present_userName) {
      if (!(this_present_userName && that_present_userName))
        return false;
      if (!this.userName.equals(that.userName))
        return false;
    }

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_ip = true && this.isSetIp();
    boolean that_present_ip = true && that.isSetIp();
    if (this_present_ip || that_present_ip) {
      if (!(this_present_ip && that_present_ip))
        return false;
      if (!this.ip.equals(that.ip))
        return false;
    }

    boolean this_present_reserve1 = true;
    boolean that_present_reserve1 = true;
    if (this_present_reserve1 || that_present_reserve1) {
      if (!(this_present_reserve1 && that_present_reserve1))
        return false;
      if (this.reserve1 != that.reserve1)
        return false;
    }

    boolean this_present_reserve2 = true;
    boolean that_present_reserve2 = true;
    if (this_present_reserve2 || that_present_reserve2) {
      if (!(this_present_reserve2 && that_present_reserve2))
        return false;
      if (this.reserve2 != that.reserve2)
        return false;
    }

    boolean this_present_reserve3 = true && this.isSetReserve3();
    boolean that_present_reserve3 = true && that.isSetReserve3();
    if (this_present_reserve3 || that_present_reserve3) {
      if (!(this_present_reserve3 && that_present_reserve3))
        return false;
      if (!this.reserve3.equals(that.reserve3))
        return false;
    }

    boolean this_present_reserve4 = true && this.isSetReserve4();
    boolean that_present_reserve4 = true && that.isSetReserve4();
    if (this_present_reserve4 || that_present_reserve4) {
      if (!(this_present_reserve4 && that_present_reserve4))
        return false;
      if (!this.reserve4.equals(that.reserve4))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_support = true;
    boolean that_present_support = true;
    if (this_present_support || that_present_support) {
      if (!(this_present_support && that_present_support))
        return false;
      if (this.support != that.support)
        return false;
    }

    boolean this_present_oppose = true;
    boolean that_present_oppose = true;
    if (this_present_oppose || that_present_oppose) {
      if (!(this_present_oppose && that_present_oppose))
        return false;
      if (this.oppose != that.oppose)
        return false;
    }

    boolean this_present_needAuth = true;
    boolean that_present_needAuth = true;
    if (this_present_needAuth || that_present_needAuth) {
      if (!(this_present_needAuth && that_present_needAuth))
        return false;
      if (this.needAuth != that.needAuth)
        return false;
    }

    boolean this_present_hideFlag = true;
    boolean that_present_hideFlag = true;
    if (this_present_hideFlag || that_present_hideFlag) {
      if (!(this_present_hideFlag && that_present_hideFlag))
        return false;
      if (this.hideFlag != that.hideFlag)
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
public int compareTo(TCommentInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TCommentInfo typedOther = other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPointId()).compareTo(typedOther.isSetPointId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPointId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pointId, typedOther.pointId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReplyId()).compareTo(typedOther.isSetReplyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReplyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replyId, typedOther.replyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserName()).compareTo(typedOther.isSetUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, typedOther.userName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, typedOther.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(typedOther.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, typedOther.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIp()).compareTo(typedOther.isSetIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip, typedOther.ip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReserve1()).compareTo(typedOther.isSetReserve1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReserve1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reserve1, typedOther.reserve1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReserve2()).compareTo(typedOther.isSetReserve2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReserve2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reserve2, typedOther.reserve2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReserve3()).compareTo(typedOther.isSetReserve3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReserve3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reserve3, typedOther.reserve3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReserve4()).compareTo(typedOther.isSetReserve4());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReserve4()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reserve4, typedOther.reserve4);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSupport()).compareTo(typedOther.isSetSupport());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSupport()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.support, typedOther.support);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOppose()).compareTo(typedOther.isSetOppose());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOppose()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oppose, typedOther.oppose);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNeedAuth()).compareTo(typedOther.isSetNeedAuth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNeedAuth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.needAuth, typedOther.needAuth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHideFlag()).compareTo(typedOther.isSetHideFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHideFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hideFlag, typedOther.hideFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(typedOther.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, typedOther.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @Override
public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  @Override
public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TCommentInfo(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pointId:");
    sb.append(this.pointId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("replyId:");
    sb.append(this.replyId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userName:");
    if (this.userName == null) {
      sb.append("null");
    } else {
      sb.append(this.userName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      sb.append(this.content);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ip:");
    if (this.ip == null) {
      sb.append("null");
    } else {
      sb.append(this.ip);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reserve1:");
    sb.append(this.reserve1);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reserve2:");
    sb.append(this.reserve2);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reserve3:");
    if (this.reserve3 == null) {
      sb.append("null");
    } else {
      sb.append(this.reserve3);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reserve4:");
    if (this.reserve4 == null) {
      sb.append("null");
    } else {
      sb.append(this.reserve4);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("support:");
    sb.append(this.support);
    first = false;
    if (!first) sb.append(", ");
    sb.append("oppose:");
    sb.append(this.oppose);
    first = false;
    if (!first) sb.append(", ");
    sb.append("needAuth:");
    sb.append(this.needAuth);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hideFlag:");
    sb.append(this.hideFlag);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    if (this.createTime == null) {
      sb.append("null");
    } else {
      sb.append(this.createTime);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TCommentInfoStandardSchemeFactory implements SchemeFactory {
    @Override
	public TCommentInfoStandardScheme getScheme() {
      return new TCommentInfoStandardScheme();
    }
  }

  private static class TCommentInfoStandardScheme extends StandardScheme<TCommentInfo> {

    @Override
	public void read(org.apache.thrift.protocol.TProtocol iprot, TCommentInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // POINT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pointId = iprot.readI32();
              struct.setPointIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REPLY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.replyId = iprot.readI32();
              struct.setReplyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userName = iprot.readString();
              struct.setUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userId = iprot.readI32();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ip = iprot.readString();
              struct.setIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // RESERVE1
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.reserve1 = iprot.readI32();
              struct.setReserve1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // RESERVE2
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.reserve2 = iprot.readI32();
              struct.setReserve2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // RESERVE3
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reserve3 = iprot.readString();
              struct.setReserve3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // RESERVE4
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reserve4 = iprot.readString();
              struct.setReserve4IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SUPPORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.support = iprot.readI32();
              struct.setSupportIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // OPPOSE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.oppose = iprot.readI32();
              struct.setOpposeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // NEED_AUTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.needAuth = iprot.readI32();
              struct.setNeedAuthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // HIDE_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hideFlag = iprot.readI32();
              struct.setHideFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
	public void write(org.apache.thrift.protocol.TProtocol oprot, TCommentInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POINT_ID_FIELD_DESC);
      oprot.writeI32(struct.pointId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REPLY_ID_FIELD_DESC);
      oprot.writeI32(struct.replyId);
      oprot.writeFieldEnd();
      if (struct.userName != null) {
        oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
        oprot.writeString(struct.userName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI32(struct.userId);
      oprot.writeFieldEnd();
      if (struct.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeString(struct.content);
        oprot.writeFieldEnd();
      }
      if (struct.ip != null) {
        oprot.writeFieldBegin(IP_FIELD_DESC);
        oprot.writeString(struct.ip);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RESERVE1_FIELD_DESC);
      oprot.writeI32(struct.reserve1);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RESERVE2_FIELD_DESC);
      oprot.writeI32(struct.reserve2);
      oprot.writeFieldEnd();
      if (struct.reserve3 != null) {
        oprot.writeFieldBegin(RESERVE3_FIELD_DESC);
        oprot.writeString(struct.reserve3);
        oprot.writeFieldEnd();
      }
      if (struct.reserve4 != null) {
        oprot.writeFieldBegin(RESERVE4_FIELD_DESC);
        oprot.writeString(struct.reserve4);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SUPPORT_FIELD_DESC);
      oprot.writeI32(struct.support);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OPPOSE_FIELD_DESC);
      oprot.writeI32(struct.oppose);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NEED_AUTH_FIELD_DESC);
      oprot.writeI32(struct.needAuth);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HIDE_FLAG_FIELD_DESC);
      oprot.writeI32(struct.hideFlag);
      oprot.writeFieldEnd();
      if (struct.createTime != null) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeString(struct.createTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TCommentInfoTupleSchemeFactory implements SchemeFactory {
    @Override
	public TCommentInfoTupleScheme getScheme() {
      return new TCommentInfoTupleScheme();
    }
  }

  private static class TCommentInfoTupleScheme extends TupleScheme<TCommentInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TCommentInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetPointId()) {
        optionals.set(1);
      }
      if (struct.isSetReplyId()) {
        optionals.set(2);
      }
      if (struct.isSetUserName()) {
        optionals.set(3);
      }
      if (struct.isSetUserId()) {
        optionals.set(4);
      }
      if (struct.isSetContent()) {
        optionals.set(5);
      }
      if (struct.isSetIp()) {
        optionals.set(6);
      }
      if (struct.isSetReserve1()) {
        optionals.set(7);
      }
      if (struct.isSetReserve2()) {
        optionals.set(8);
      }
      if (struct.isSetReserve3()) {
        optionals.set(9);
      }
      if (struct.isSetReserve4()) {
        optionals.set(10);
      }
      if (struct.isSetStatus()) {
        optionals.set(11);
      }
      if (struct.isSetSupport()) {
        optionals.set(12);
      }
      if (struct.isSetOppose()) {
        optionals.set(13);
      }
      if (struct.isSetNeedAuth()) {
        optionals.set(14);
      }
      if (struct.isSetHideFlag()) {
        optionals.set(15);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(16);
      }
      oprot.writeBitSet(optionals, 17);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetPointId()) {
        oprot.writeI32(struct.pointId);
      }
      if (struct.isSetReplyId()) {
        oprot.writeI32(struct.replyId);
      }
      if (struct.isSetUserName()) {
        oprot.writeString(struct.userName);
      }
      if (struct.isSetUserId()) {
        oprot.writeI32(struct.userId);
      }
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
      if (struct.isSetIp()) {
        oprot.writeString(struct.ip);
      }
      if (struct.isSetReserve1()) {
        oprot.writeI32(struct.reserve1);
      }
      if (struct.isSetReserve2()) {
        oprot.writeI32(struct.reserve2);
      }
      if (struct.isSetReserve3()) {
        oprot.writeString(struct.reserve3);
      }
      if (struct.isSetReserve4()) {
        oprot.writeString(struct.reserve4);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetSupport()) {
        oprot.writeI32(struct.support);
      }
      if (struct.isSetOppose()) {
        oprot.writeI32(struct.oppose);
      }
      if (struct.isSetNeedAuth()) {
        oprot.writeI32(struct.needAuth);
      }
      if (struct.isSetHideFlag()) {
        oprot.writeI32(struct.hideFlag);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TCommentInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(17);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.pointId = iprot.readI32();
        struct.setPointIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.replyId = iprot.readI32();
        struct.setReplyIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.userName = iprot.readString();
        struct.setUserNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.userId = iprot.readI32();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
      if (incoming.get(6)) {
        struct.ip = iprot.readString();
        struct.setIpIsSet(true);
      }
      if (incoming.get(7)) {
        struct.reserve1 = iprot.readI32();
        struct.setReserve1IsSet(true);
      }
      if (incoming.get(8)) {
        struct.reserve2 = iprot.readI32();
        struct.setReserve2IsSet(true);
      }
      if (incoming.get(9)) {
        struct.reserve3 = iprot.readString();
        struct.setReserve3IsSet(true);
      }
      if (incoming.get(10)) {
        struct.reserve4 = iprot.readString();
        struct.setReserve4IsSet(true);
      }
      if (incoming.get(11)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(12)) {
        struct.support = iprot.readI32();
        struct.setSupportIsSet(true);
      }
      if (incoming.get(13)) {
        struct.oppose = iprot.readI32();
        struct.setOpposeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.needAuth = iprot.readI32();
        struct.setNeedAuthIsSet(true);
      }
      if (incoming.get(15)) {
        struct.hideFlag = iprot.readI32();
        struct.setHideFlagIsSet(true);
      }
      if (incoming.get(16)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
    }
  }

}

