/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package bma.siteone.comments.thrift;

import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;

import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

public class TCommentsService {

	public interface Iface {

		public int createComment(TCommentForm info, TCommentPointForm pointForm)
				throws org.apache.thrift.TException;

		public boolean deleteComment(int id)
				throws org.apache.thrift.TException;

		public TCommentInfo getComment(int id)
				throws org.apache.thrift.TException;

		public TCommentSearchResult searchComment(TSearchCommentForm form)
				throws org.apache.thrift.TException;

		public TCommentSearchResult listComment(int pointId, int page,
				int pageSize) throws org.apache.thrift.TException;

		public boolean supportComment(int id, boolean oppose)
				throws org.apache.thrift.TException;

		public boolean authComment(int id, boolean authDone)
				throws org.apache.thrift.TException;

		public boolean reportComment(int id, boolean hide)
				throws org.apache.thrift.TException;

		public int createCommentPoint(TCommentPointForm pointForm)
				throws org.apache.thrift.TException;

		public boolean updateCommentPoint(int id, TCommentPointForm pointForm)
				throws org.apache.thrift.TException;

		public boolean deleteCommentPoint(int id)
				throws org.apache.thrift.TException;

		public TCommentPoint getCommentPoint(int id)
				throws org.apache.thrift.TException;

		public TCommentPoint getCommentPointByName(String name)
				throws org.apache.thrift.TException;

		public TCommentPointSearchResult searchCommentPoint(
				TSearchCommentPointForm form)
				throws org.apache.thrift.TException;

		public TCommentHome getHome(String point, int pageSize)
				throws org.apache.thrift.TException;

	}

	public interface AsyncIface {

		public void createComment(
				TCommentForm info,
				TCommentPointForm pointForm,
				org.apache.thrift.async.AsyncMethodCallback<AsyncClient.createComment_call> resultHandler)
				throws org.apache.thrift.TException;

		public void deleteComment(
				int id,
				org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deleteComment_call> resultHandler)
				throws org.apache.thrift.TException;

		public void getComment(
				int id,
				org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getComment_call> resultHandler)
				throws org.apache.thrift.TException;

		public void searchComment(
				TSearchCommentForm form,
				org.apache.thrift.async.AsyncMethodCallback<AsyncClient.searchComment_call> resultHandler)
				throws org.apache.thrift.TException;

		public void listComment(
				int pointId,
				int page,
				int pageSize,
				org.apache.thrift.async.AsyncMethodCallback<AsyncClient.listComment_call> resultHandler)
				throws org.apache.thrift.TException;

		public void supportComment(
				int id,
				boolean oppose,
				org.apache.thrift.async.AsyncMethodCallback<AsyncClient.supportComment_call> resultHandler)
				throws org.apache.thrift.TException;

		public void authComment(
				int id,
				boolean authDone,
				org.apache.thrift.async.AsyncMethodCallback<AsyncClient.authComment_call> resultHandler)
				throws org.apache.thrift.TException;

		public void reportComment(
				int id,
				boolean hide,
				org.apache.thrift.async.AsyncMethodCallback<AsyncClient.reportComment_call> resultHandler)
				throws org.apache.thrift.TException;

		public void createCommentPoint(
				TCommentPointForm pointForm,
				org.apache.thrift.async.AsyncMethodCallback<AsyncClient.createCommentPoint_call> resultHandler)
				throws org.apache.thrift.TException;

		public void updateCommentPoint(
				int id,
				TCommentPointForm pointForm,
				org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateCommentPoint_call> resultHandler)
				throws org.apache.thrift.TException;

		public void deleteCommentPoint(
				int id,
				org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deleteCommentPoint_call> resultHandler)
				throws org.apache.thrift.TException;

		public void getCommentPoint(
				int id,
				org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getCommentPoint_call> resultHandler)
				throws org.apache.thrift.TException;

		public void getCommentPointByName(
				String name,
				org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getCommentPointByName_call> resultHandler)
				throws org.apache.thrift.TException;

		public void searchCommentPoint(
				TSearchCommentPointForm form,
				org.apache.thrift.async.AsyncMethodCallback<AsyncClient.searchCommentPoint_call> resultHandler)
				throws org.apache.thrift.TException;

		public void getHome(
				String point,
				int pageSize,
				org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getHome_call> resultHandler)
				throws org.apache.thrift.TException;

	}

	public static class Client extends org.apache.thrift.TServiceClient
			implements Iface {
		public static class Factory implements
				org.apache.thrift.TServiceClientFactory<Client> {
			public Factory() {
			}

			@Override
			public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
				return new Client(prot);
			}

			@Override
			public Client getClient(org.apache.thrift.protocol.TProtocol iprot,
					org.apache.thrift.protocol.TProtocol oprot) {
				return new Client(iprot, oprot);
			}
		}

		public Client(org.apache.thrift.protocol.TProtocol prot) {
			super(prot, prot);
		}

		public Client(org.apache.thrift.protocol.TProtocol iprot,
				org.apache.thrift.protocol.TProtocol oprot) {
			super(iprot, oprot);
		}

		@Override
		public int createComment(TCommentForm info, TCommentPointForm pointForm)
				throws org.apache.thrift.TException {
			send_createComment(info, pointForm);
			return recv_createComment();
		}

		public void send_createComment(TCommentForm info,
				TCommentPointForm pointForm)
				throws org.apache.thrift.TException {
			createComment_args args = new createComment_args();
			args.setInfo(info);
			args.setPointForm(pointForm);
			sendBase("createComment", args);
		}

		public int recv_createComment() throws org.apache.thrift.TException {
			createComment_result result = new createComment_result();
			receiveBase(result, "createComment");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(
					org.apache.thrift.TApplicationException.MISSING_RESULT,
					"createComment failed: unknown result");
		}

		@Override
		public boolean deleteComment(int id)
				throws org.apache.thrift.TException {
			send_deleteComment(id);
			return recv_deleteComment();
		}

		public void send_deleteComment(int id)
				throws org.apache.thrift.TException {
			deleteComment_args args = new deleteComment_args();
			args.setId(id);
			sendBase("deleteComment", args);
		}

		public boolean recv_deleteComment() throws org.apache.thrift.TException {
			deleteComment_result result = new deleteComment_result();
			receiveBase(result, "deleteComment");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(
					org.apache.thrift.TApplicationException.MISSING_RESULT,
					"deleteComment failed: unknown result");
		}

		@Override
		public TCommentInfo getComment(int id)
				throws org.apache.thrift.TException {
			send_getComment(id);
			return recv_getComment();
		}

		public void send_getComment(int id) throws org.apache.thrift.TException {
			getComment_args args = new getComment_args();
			args.setId(id);
			sendBase("getComment", args);
		}

		public TCommentInfo recv_getComment()
				throws org.apache.thrift.TException {
			getComment_result result = new getComment_result();
			receiveBase(result, "getComment");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(
					org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getComment failed: unknown result");
		}

		@Override
		public TCommentSearchResult searchComment(TSearchCommentForm form)
				throws org.apache.thrift.TException {
			send_searchComment(form);
			return recv_searchComment();
		}

		public void send_searchComment(TSearchCommentForm form)
				throws org.apache.thrift.TException {
			searchComment_args args = new searchComment_args();
			args.setForm(form);
			sendBase("searchComment", args);
		}

		public TCommentSearchResult recv_searchComment()
				throws org.apache.thrift.TException {
			searchComment_result result = new searchComment_result();
			receiveBase(result, "searchComment");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(
					org.apache.thrift.TApplicationException.MISSING_RESULT,
					"searchComment failed: unknown result");
		}

		@Override
		public TCommentSearchResult listComment(int pointId, int page,
				int pageSize) throws org.apache.thrift.TException {
			send_listComment(pointId, page, pageSize);
			return recv_listComment();
		}

		public void send_listComment(int pointId, int page, int pageSize)
				throws org.apache.thrift.TException {
			listComment_args args = new listComment_args();
			args.setPointId(pointId);
			args.setPage(page);
			args.setPageSize(pageSize);
			sendBase("listComment", args);
		}

		public TCommentSearchResult recv_listComment()
				throws org.apache.thrift.TException {
			listComment_result result = new listComment_result();
			receiveBase(result, "listComment");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(
					org.apache.thrift.TApplicationException.MISSING_RESULT,
					"listComment failed: unknown result");
		}

		@Override
		public boolean supportComment(int id, boolean oppose)
				throws org.apache.thrift.TException {
			send_supportComment(id, oppose);
			return recv_supportComment();
		}

		public void send_supportComment(int id, boolean oppose)
				throws org.apache.thrift.TException {
			supportComment_args args = new supportComment_args();
			args.setId(id);
			args.setOppose(oppose);
			sendBase("supportComment", args);
		}

		public boolean recv_supportComment()
				throws org.apache.thrift.TException {
			supportComment_result result = new supportComment_result();
			receiveBase(result, "supportComment");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(
					org.apache.thrift.TApplicationException.MISSING_RESULT,
					"supportComment failed: unknown result");
		}

		@Override
		public boolean authComment(int id, boolean authDone)
				throws org.apache.thrift.TException {
			send_authComment(id, authDone);
			return recv_authComment();
		}

		public void send_authComment(int id, boolean authDone)
				throws org.apache.thrift.TException {
			authComment_args args = new authComment_args();
			args.setId(id);
			args.setAuthDone(authDone);
			sendBase("authComment", args);
		}

		public boolean recv_authComment() throws org.apache.thrift.TException {
			authComment_result result = new authComment_result();
			receiveBase(result, "authComment");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(
					org.apache.thrift.TApplicationException.MISSING_RESULT,
					"authComment failed: unknown result");
		}

		@Override
		public boolean reportComment(int id, boolean hide)
				throws org.apache.thrift.TException {
			send_reportComment(id, hide);
			return recv_reportComment();
		}

		public void send_reportComment(int id, boolean hide)
				throws org.apache.thrift.TException {
			reportComment_args args = new reportComment_args();
			args.setId(id);
			args.setHide(hide);
			sendBase("reportComment", args);
		}

		public boolean recv_reportComment() throws org.apache.thrift.TException {
			reportComment_result result = new reportComment_result();
			receiveBase(result, "reportComment");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(
					org.apache.thrift.TApplicationException.MISSING_RESULT,
					"reportComment failed: unknown result");
		}

		@Override
		public int createCommentPoint(TCommentPointForm pointForm)
				throws org.apache.thrift.TException {
			send_createCommentPoint(pointForm);
			return recv_createCommentPoint();
		}

		public void send_createCommentPoint(TCommentPointForm pointForm)
				throws org.apache.thrift.TException {
			createCommentPoint_args args = new createCommentPoint_args();
			args.setPointForm(pointForm);
			sendBase("createCommentPoint", args);
		}

		public int recv_createCommentPoint()
				throws org.apache.thrift.TException {
			createCommentPoint_result result = new createCommentPoint_result();
			receiveBase(result, "createCommentPoint");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(
					org.apache.thrift.TApplicationException.MISSING_RESULT,
					"createCommentPoint failed: unknown result");
		}

		@Override
		public boolean updateCommentPoint(int id, TCommentPointForm pointForm)
				throws org.apache.thrift.TException {
			send_updateCommentPoint(id, pointForm);
			return recv_updateCommentPoint();
		}

		public void send_updateCommentPoint(int id, TCommentPointForm pointForm)
				throws org.apache.thrift.TException {
			updateCommentPoint_args args = new updateCommentPoint_args();
			args.setId(id);
			args.setPointForm(pointForm);
			sendBase("updateCommentPoint", args);
		}

		public boolean recv_updateCommentPoint()
				throws org.apache.thrift.TException {
			updateCommentPoint_result result = new updateCommentPoint_result();
			receiveBase(result, "updateCommentPoint");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(
					org.apache.thrift.TApplicationException.MISSING_RESULT,
					"updateCommentPoint failed: unknown result");
		}

		@Override
		public boolean deleteCommentPoint(int id)
				throws org.apache.thrift.TException {
			send_deleteCommentPoint(id);
			return recv_deleteCommentPoint();
		}

		public void send_deleteCommentPoint(int id)
				throws org.apache.thrift.TException {
			deleteCommentPoint_args args = new deleteCommentPoint_args();
			args.setId(id);
			sendBase("deleteCommentPoint", args);
		}

		public boolean recv_deleteCommentPoint()
				throws org.apache.thrift.TException {
			deleteCommentPoint_result result = new deleteCommentPoint_result();
			receiveBase(result, "deleteCommentPoint");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(
					org.apache.thrift.TApplicationException.MISSING_RESULT,
					"deleteCommentPoint failed: unknown result");
		}

		@Override
		public TCommentPoint getCommentPoint(int id)
				throws org.apache.thrift.TException {
			send_getCommentPoint(id);
			return recv_getCommentPoint();
		}

		public void send_getCommentPoint(int id)
				throws org.apache.thrift.TException {
			getCommentPoint_args args = new getCommentPoint_args();
			args.setId(id);
			sendBase("getCommentPoint", args);
		}

		public TCommentPoint recv_getCommentPoint()
				throws org.apache.thrift.TException {
			getCommentPoint_result result = new getCommentPoint_result();
			receiveBase(result, "getCommentPoint");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(
					org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getCommentPoint failed: unknown result");
		}

		@Override
		public TCommentPoint getCommentPointByName(String name)
				throws org.apache.thrift.TException {
			send_getCommentPointByName(name);
			return recv_getCommentPointByName();
		}

		public void send_getCommentPointByName(String name)
				throws org.apache.thrift.TException {
			getCommentPointByName_args args = new getCommentPointByName_args();
			args.setName(name);
			sendBase("getCommentPointByName", args);
		}

		public TCommentPoint recv_getCommentPointByName()
				throws org.apache.thrift.TException {
			getCommentPointByName_result result = new getCommentPointByName_result();
			receiveBase(result, "getCommentPointByName");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(
					org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getCommentPointByName failed: unknown result");
		}

		@Override
		public TCommentPointSearchResult searchCommentPoint(
				TSearchCommentPointForm form)
				throws org.apache.thrift.TException {
			send_searchCommentPoint(form);
			return recv_searchCommentPoint();
		}

		public void send_searchCommentPoint(TSearchCommentPointForm form)
				throws org.apache.thrift.TException {
			searchCommentPoint_args args = new searchCommentPoint_args();
			args.setForm(form);
			sendBase("searchCommentPoint", args);
		}

		public TCommentPointSearchResult recv_searchCommentPoint()
				throws org.apache.thrift.TException {
			searchCommentPoint_result result = new searchCommentPoint_result();
			receiveBase(result, "searchCommentPoint");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(
					org.apache.thrift.TApplicationException.MISSING_RESULT,
					"searchCommentPoint failed: unknown result");
		}

		@Override
		public TCommentHome getHome(String point, int pageSize)
				throws org.apache.thrift.TException {
			send_getHome(point, pageSize);
			return recv_getHome();
		}

		public void send_getHome(String point, int pageSize)
				throws org.apache.thrift.TException {
			getHome_args args = new getHome_args();
			args.setPoint(point);
			args.setPageSize(pageSize);
			sendBase("getHome", args);
		}

		public TCommentHome recv_getHome() throws org.apache.thrift.TException {
			getHome_result result = new getHome_result();
			receiveBase(result, "getHome");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(
					org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getHome failed: unknown result");
		}

	}

	public static class AsyncClient extends
			org.apache.thrift.async.TAsyncClient implements AsyncIface {
		public static class Factory implements
				org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
			private org.apache.thrift.async.TAsyncClientManager clientManager;
			private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

			public Factory(
					org.apache.thrift.async.TAsyncClientManager clientManager,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
				this.clientManager = clientManager;
				this.protocolFactory = protocolFactory;
			}

			@Override
			public AsyncClient getAsyncClient(
					org.apache.thrift.transport.TNonblockingTransport transport) {
				return new AsyncClient(protocolFactory, clientManager,
						transport);
			}
		}

		public AsyncClient(
				org.apache.thrift.protocol.TProtocolFactory protocolFactory,
				org.apache.thrift.async.TAsyncClientManager clientManager,
				org.apache.thrift.transport.TNonblockingTransport transport) {
			super(protocolFactory, clientManager, transport);
		}

		@Override
		public void createComment(
				TCommentForm info,
				TCommentPointForm pointForm,
				org.apache.thrift.async.AsyncMethodCallback<createComment_call> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			createComment_call method_call = new createComment_call(info,
					pointForm, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class createComment_call extends
				org.apache.thrift.async.TAsyncMethodCall {
			private TCommentForm info;
			private TCommentPointForm pointForm;

			public createComment_call(
					TCommentForm info,
					TCommentPointForm pointForm,
					org.apache.thrift.async.AsyncMethodCallback<createComment_call> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport)
					throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.info = info;
				this.pointForm = pointForm;
			}

			@Override
			public void write_args(org.apache.thrift.protocol.TProtocol prot)
					throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
						"createComment",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				createComment_args args = new createComment_args();
				args.setInfo(info);
				args.setPointForm(pointForm);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public int getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client
						.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_createComment();
			}
		}

		@Override
		public void deleteComment(
				int id,
				org.apache.thrift.async.AsyncMethodCallback<deleteComment_call> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			deleteComment_call method_call = new deleteComment_call(id,
					resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class deleteComment_call extends
				org.apache.thrift.async.TAsyncMethodCall {
			private int id;

			public deleteComment_call(
					int id,
					org.apache.thrift.async.AsyncMethodCallback<deleteComment_call> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport)
					throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.id = id;
			}

			@Override
			public void write_args(org.apache.thrift.protocol.TProtocol prot)
					throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
						"deleteComment",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				deleteComment_args args = new deleteComment_args();
				args.setId(id);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public boolean getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client
						.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_deleteComment();
			}
		}

		@Override
		public void getComment(
				int id,
				org.apache.thrift.async.AsyncMethodCallback<getComment_call> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getComment_call method_call = new getComment_call(id,
					resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getComment_call extends
				org.apache.thrift.async.TAsyncMethodCall {
			private int id;

			public getComment_call(
					int id,
					org.apache.thrift.async.AsyncMethodCallback<getComment_call> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport)
					throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.id = id;
			}

			@Override
			public void write_args(org.apache.thrift.protocol.TProtocol prot)
					throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
						"getComment",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getComment_args args = new getComment_args();
				args.setId(id);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public TCommentInfo getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client
						.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getComment();
			}
		}

		@Override
		public void searchComment(
				TSearchCommentForm form,
				org.apache.thrift.async.AsyncMethodCallback<searchComment_call> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			searchComment_call method_call = new searchComment_call(form,
					resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class searchComment_call extends
				org.apache.thrift.async.TAsyncMethodCall {
			private TSearchCommentForm form;

			public searchComment_call(
					TSearchCommentForm form,
					org.apache.thrift.async.AsyncMethodCallback<searchComment_call> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport)
					throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.form = form;
			}

			@Override
			public void write_args(org.apache.thrift.protocol.TProtocol prot)
					throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
						"searchComment",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				searchComment_args args = new searchComment_args();
				args.setForm(form);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public TCommentSearchResult getResult()
					throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client
						.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_searchComment();
			}
		}

		@Override
		public void listComment(
				int pointId,
				int page,
				int pageSize,
				org.apache.thrift.async.AsyncMethodCallback<listComment_call> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			listComment_call method_call = new listComment_call(pointId, page,
					pageSize, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class listComment_call extends
				org.apache.thrift.async.TAsyncMethodCall {
			private int pointId;
			private int page;
			private int pageSize;

			public listComment_call(
					int pointId,
					int page,
					int pageSize,
					org.apache.thrift.async.AsyncMethodCallback<listComment_call> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport)
					throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.pointId = pointId;
				this.page = page;
				this.pageSize = pageSize;
			}

			@Override
			public void write_args(org.apache.thrift.protocol.TProtocol prot)
					throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
						"listComment",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				listComment_args args = new listComment_args();
				args.setPointId(pointId);
				args.setPage(page);
				args.setPageSize(pageSize);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public TCommentSearchResult getResult()
					throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client
						.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_listComment();
			}
		}

		@Override
		public void supportComment(
				int id,
				boolean oppose,
				org.apache.thrift.async.AsyncMethodCallback<supportComment_call> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			supportComment_call method_call = new supportComment_call(id,
					oppose, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class supportComment_call extends
				org.apache.thrift.async.TAsyncMethodCall {
			private int id;
			private boolean oppose;

			public supportComment_call(
					int id,
					boolean oppose,
					org.apache.thrift.async.AsyncMethodCallback<supportComment_call> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport)
					throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.id = id;
				this.oppose = oppose;
			}

			@Override
			public void write_args(org.apache.thrift.protocol.TProtocol prot)
					throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
						"supportComment",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				supportComment_args args = new supportComment_args();
				args.setId(id);
				args.setOppose(oppose);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public boolean getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client
						.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_supportComment();
			}
		}

		@Override
		public void authComment(
				int id,
				boolean authDone,
				org.apache.thrift.async.AsyncMethodCallback<authComment_call> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			authComment_call method_call = new authComment_call(id, authDone,
					resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class authComment_call extends
				org.apache.thrift.async.TAsyncMethodCall {
			private int id;
			private boolean authDone;

			public authComment_call(
					int id,
					boolean authDone,
					org.apache.thrift.async.AsyncMethodCallback<authComment_call> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport)
					throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.id = id;
				this.authDone = authDone;
			}

			@Override
			public void write_args(org.apache.thrift.protocol.TProtocol prot)
					throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
						"authComment",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				authComment_args args = new authComment_args();
				args.setId(id);
				args.setAuthDone(authDone);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public boolean getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client
						.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_authComment();
			}
		}

		@Override
		public void reportComment(
				int id,
				boolean hide,
				org.apache.thrift.async.AsyncMethodCallback<reportComment_call> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			reportComment_call method_call = new reportComment_call(id, hide,
					resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class reportComment_call extends
				org.apache.thrift.async.TAsyncMethodCall {
			private int id;
			private boolean hide;

			public reportComment_call(
					int id,
					boolean hide,
					org.apache.thrift.async.AsyncMethodCallback<reportComment_call> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport)
					throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.id = id;
				this.hide = hide;
			}

			@Override
			public void write_args(org.apache.thrift.protocol.TProtocol prot)
					throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
						"reportComment",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				reportComment_args args = new reportComment_args();
				args.setId(id);
				args.setHide(hide);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public boolean getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client
						.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_reportComment();
			}
		}

		@Override
		public void createCommentPoint(
				TCommentPointForm pointForm,
				org.apache.thrift.async.AsyncMethodCallback<createCommentPoint_call> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			createCommentPoint_call method_call = new createCommentPoint_call(
					pointForm, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class createCommentPoint_call extends
				org.apache.thrift.async.TAsyncMethodCall {
			private TCommentPointForm pointForm;

			public createCommentPoint_call(
					TCommentPointForm pointForm,
					org.apache.thrift.async.AsyncMethodCallback<createCommentPoint_call> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport)
					throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.pointForm = pointForm;
			}

			@Override
			public void write_args(org.apache.thrift.protocol.TProtocol prot)
					throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
						"createCommentPoint",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				createCommentPoint_args args = new createCommentPoint_args();
				args.setPointForm(pointForm);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public int getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client
						.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_createCommentPoint();
			}
		}

		@Override
		public void updateCommentPoint(
				int id,
				TCommentPointForm pointForm,
				org.apache.thrift.async.AsyncMethodCallback<updateCommentPoint_call> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			updateCommentPoint_call method_call = new updateCommentPoint_call(
					id, pointForm, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class updateCommentPoint_call extends
				org.apache.thrift.async.TAsyncMethodCall {
			private int id;
			private TCommentPointForm pointForm;

			public updateCommentPoint_call(
					int id,
					TCommentPointForm pointForm,
					org.apache.thrift.async.AsyncMethodCallback<updateCommentPoint_call> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport)
					throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.id = id;
				this.pointForm = pointForm;
			}

			@Override
			public void write_args(org.apache.thrift.protocol.TProtocol prot)
					throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
						"updateCommentPoint",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				updateCommentPoint_args args = new updateCommentPoint_args();
				args.setId(id);
				args.setPointForm(pointForm);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public boolean getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client
						.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_updateCommentPoint();
			}
		}

		@Override
		public void deleteCommentPoint(
				int id,
				org.apache.thrift.async.AsyncMethodCallback<deleteCommentPoint_call> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			deleteCommentPoint_call method_call = new deleteCommentPoint_call(
					id, resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class deleteCommentPoint_call extends
				org.apache.thrift.async.TAsyncMethodCall {
			private int id;

			public deleteCommentPoint_call(
					int id,
					org.apache.thrift.async.AsyncMethodCallback<deleteCommentPoint_call> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport)
					throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.id = id;
			}

			@Override
			public void write_args(org.apache.thrift.protocol.TProtocol prot)
					throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
						"deleteCommentPoint",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				deleteCommentPoint_args args = new deleteCommentPoint_args();
				args.setId(id);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public boolean getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client
						.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_deleteCommentPoint();
			}
		}

		@Override
		public void getCommentPoint(
				int id,
				org.apache.thrift.async.AsyncMethodCallback<getCommentPoint_call> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getCommentPoint_call method_call = new getCommentPoint_call(id,
					resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getCommentPoint_call extends
				org.apache.thrift.async.TAsyncMethodCall {
			private int id;

			public getCommentPoint_call(
					int id,
					org.apache.thrift.async.AsyncMethodCallback<getCommentPoint_call> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport)
					throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.id = id;
			}

			@Override
			public void write_args(org.apache.thrift.protocol.TProtocol prot)
					throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
						"getCommentPoint",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getCommentPoint_args args = new getCommentPoint_args();
				args.setId(id);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public TCommentPoint getResult()
					throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client
						.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getCommentPoint();
			}
		}

		@Override
		public void getCommentPointByName(
				String name,
				org.apache.thrift.async.AsyncMethodCallback<getCommentPointByName_call> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getCommentPointByName_call method_call = new getCommentPointByName_call(
					name, resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getCommentPointByName_call extends
				org.apache.thrift.async.TAsyncMethodCall {
			private String name;

			public getCommentPointByName_call(
					String name,
					org.apache.thrift.async.AsyncMethodCallback<getCommentPointByName_call> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport)
					throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.name = name;
			}

			@Override
			public void write_args(org.apache.thrift.protocol.TProtocol prot)
					throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
						"getCommentPointByName",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getCommentPointByName_args args = new getCommentPointByName_args();
				args.setName(name);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public TCommentPoint getResult()
					throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client
						.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getCommentPointByName();
			}
		}

		@Override
		public void searchCommentPoint(
				TSearchCommentPointForm form,
				org.apache.thrift.async.AsyncMethodCallback<searchCommentPoint_call> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			searchCommentPoint_call method_call = new searchCommentPoint_call(
					form, resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class searchCommentPoint_call extends
				org.apache.thrift.async.TAsyncMethodCall {
			private TSearchCommentPointForm form;

			public searchCommentPoint_call(
					TSearchCommentPointForm form,
					org.apache.thrift.async.AsyncMethodCallback<searchCommentPoint_call> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport)
					throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.form = form;
			}

			@Override
			public void write_args(org.apache.thrift.protocol.TProtocol prot)
					throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
						"searchCommentPoint",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				searchCommentPoint_args args = new searchCommentPoint_args();
				args.setForm(form);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public TCommentPointSearchResult getResult()
					throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client
						.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_searchCommentPoint();
			}
		}

		@Override
		public void getHome(
				String point,
				int pageSize,
				org.apache.thrift.async.AsyncMethodCallback<getHome_call> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getHome_call method_call = new getHome_call(point, pageSize,
					resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getHome_call extends
				org.apache.thrift.async.TAsyncMethodCall {
			private String point;
			private int pageSize;

			public getHome_call(
					String point,
					int pageSize,
					org.apache.thrift.async.AsyncMethodCallback<getHome_call> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport)
					throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.point = point;
				this.pageSize = pageSize;
			}

			@Override
			public void write_args(org.apache.thrift.protocol.TProtocol prot)
					throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
						"getHome",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getHome_args args = new getHome_args();
				args.setPoint(point);
				args.setPageSize(pageSize);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public TCommentHome getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client
						.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getHome();
			}
		}

	}

	public static class Processor<I extends Iface> extends
			org.apache.thrift.TBaseProcessor<I> implements
			org.apache.thrift.TProcessor {

		public Processor(I iface) {
			super(
					iface,
					getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
		}

		protected Processor(
				I iface,
				Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
			super(iface, getProcessMap(processMap));
		}

		private static <I extends Iface> Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(
				Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
			processMap.put("createComment", new createComment());
			processMap.put("deleteComment", new deleteComment());
			processMap.put("getComment", new getComment());
			processMap.put("searchComment", new searchComment());
			processMap.put("listComment", new listComment());
			processMap.put("supportComment", new supportComment());
			processMap.put("authComment", new authComment());
			processMap.put("reportComment", new reportComment());
			processMap.put("createCommentPoint", new createCommentPoint());
			processMap.put("updateCommentPoint", new updateCommentPoint());
			processMap.put("deleteCommentPoint", new deleteCommentPoint());
			processMap.put("getCommentPoint", new getCommentPoint());
			processMap
					.put("getCommentPointByName", new getCommentPointByName());
			processMap.put("searchCommentPoint", new searchCommentPoint());
			processMap.put("getHome", new getHome());
			return processMap;
		}

		private static class createComment<I extends Iface> extends
				org.apache.thrift.ProcessFunction<I, createComment_args> {
			public createComment() {
				super("createComment");
			}

			@Override
			protected createComment_args getEmptyArgsInstance() {
				return new createComment_args();
			}

			@Override
			protected createComment_result getResult(I iface,
					createComment_args args)
					throws org.apache.thrift.TException {
				createComment_result result = new createComment_result();
				result.success = iface.createComment(args.info, args.pointForm);
				result.setSuccessIsSet(true);
				return result;
			}
		}

		private static class deleteComment<I extends Iface> extends
				org.apache.thrift.ProcessFunction<I, deleteComment_args> {
			public deleteComment() {
				super("deleteComment");
			}

			@Override
			protected deleteComment_args getEmptyArgsInstance() {
				return new deleteComment_args();
			}

			@Override
			protected deleteComment_result getResult(I iface,
					deleteComment_args args)
					throws org.apache.thrift.TException {
				deleteComment_result result = new deleteComment_result();
				result.success = iface.deleteComment(args.id);
				result.setSuccessIsSet(true);
				return result;
			}
		}

		private static class getComment<I extends Iface> extends
				org.apache.thrift.ProcessFunction<I, getComment_args> {
			public getComment() {
				super("getComment");
			}

			@Override
			protected getComment_args getEmptyArgsInstance() {
				return new getComment_args();
			}

			@Override
			protected getComment_result getResult(I iface, getComment_args args)
					throws org.apache.thrift.TException {
				getComment_result result = new getComment_result();
				result.success = iface.getComment(args.id);
				return result;
			}
		}

		private static class searchComment<I extends Iface> extends
				org.apache.thrift.ProcessFunction<I, searchComment_args> {
			public searchComment() {
				super("searchComment");
			}

			@Override
			protected searchComment_args getEmptyArgsInstance() {
				return new searchComment_args();
			}

			@Override
			protected searchComment_result getResult(I iface,
					searchComment_args args)
					throws org.apache.thrift.TException {
				searchComment_result result = new searchComment_result();
				result.success = iface.searchComment(args.form);
				return result;
			}
		}

		private static class listComment<I extends Iface> extends
				org.apache.thrift.ProcessFunction<I, listComment_args> {
			public listComment() {
				super("listComment");
			}

			@Override
			protected listComment_args getEmptyArgsInstance() {
				return new listComment_args();
			}

			@Override
			protected listComment_result getResult(I iface,
					listComment_args args) throws org.apache.thrift.TException {
				listComment_result result = new listComment_result();
				result.success = iface.listComment(args.pointId, args.page,
						args.pageSize);
				return result;
			}
		}

		private static class supportComment<I extends Iface> extends
				org.apache.thrift.ProcessFunction<I, supportComment_args> {
			public supportComment() {
				super("supportComment");
			}

			@Override
			protected supportComment_args getEmptyArgsInstance() {
				return new supportComment_args();
			}

			@Override
			protected supportComment_result getResult(I iface,
					supportComment_args args)
					throws org.apache.thrift.TException {
				supportComment_result result = new supportComment_result();
				result.success = iface.supportComment(args.id, args.oppose);
				result.setSuccessIsSet(true);
				return result;
			}
		}

		private static class authComment<I extends Iface> extends
				org.apache.thrift.ProcessFunction<I, authComment_args> {
			public authComment() {
				super("authComment");
			}

			@Override
			protected authComment_args getEmptyArgsInstance() {
				return new authComment_args();
			}

			@Override
			protected authComment_result getResult(I iface,
					authComment_args args) throws org.apache.thrift.TException {
				authComment_result result = new authComment_result();
				result.success = iface.authComment(args.id, args.authDone);
				result.setSuccessIsSet(true);
				return result;
			}
		}

		private static class reportComment<I extends Iface> extends
				org.apache.thrift.ProcessFunction<I, reportComment_args> {
			public reportComment() {
				super("reportComment");
			}

			@Override
			protected reportComment_args getEmptyArgsInstance() {
				return new reportComment_args();
			}

			@Override
			protected reportComment_result getResult(I iface,
					reportComment_args args)
					throws org.apache.thrift.TException {
				reportComment_result result = new reportComment_result();
				result.success = iface.reportComment(args.id, args.hide);
				result.setSuccessIsSet(true);
				return result;
			}
		}

		private static class createCommentPoint<I extends Iface> extends
				org.apache.thrift.ProcessFunction<I, createCommentPoint_args> {
			public createCommentPoint() {
				super("createCommentPoint");
			}

			@Override
			protected createCommentPoint_args getEmptyArgsInstance() {
				return new createCommentPoint_args();
			}

			@Override
			protected createCommentPoint_result getResult(I iface,
					createCommentPoint_args args)
					throws org.apache.thrift.TException {
				createCommentPoint_result result = new createCommentPoint_result();
				result.success = iface.createCommentPoint(args.pointForm);
				result.setSuccessIsSet(true);
				return result;
			}
		}

		private static class updateCommentPoint<I extends Iface> extends
				org.apache.thrift.ProcessFunction<I, updateCommentPoint_args> {
			public updateCommentPoint() {
				super("updateCommentPoint");
			}

			@Override
			protected updateCommentPoint_args getEmptyArgsInstance() {
				return new updateCommentPoint_args();
			}

			@Override
			protected updateCommentPoint_result getResult(I iface,
					updateCommentPoint_args args)
					throws org.apache.thrift.TException {
				updateCommentPoint_result result = new updateCommentPoint_result();
				result.success = iface.updateCommentPoint(args.id,
						args.pointForm);
				result.setSuccessIsSet(true);
				return result;
			}
		}

		private static class deleteCommentPoint<I extends Iface> extends
				org.apache.thrift.ProcessFunction<I, deleteCommentPoint_args> {
			public deleteCommentPoint() {
				super("deleteCommentPoint");
			}

			@Override
			protected deleteCommentPoint_args getEmptyArgsInstance() {
				return new deleteCommentPoint_args();
			}

			@Override
			protected deleteCommentPoint_result getResult(I iface,
					deleteCommentPoint_args args)
					throws org.apache.thrift.TException {
				deleteCommentPoint_result result = new deleteCommentPoint_result();
				result.success = iface.deleteCommentPoint(args.id);
				result.setSuccessIsSet(true);
				return result;
			}
		}

		private static class getCommentPoint<I extends Iface> extends
				org.apache.thrift.ProcessFunction<I, getCommentPoint_args> {
			public getCommentPoint() {
				super("getCommentPoint");
			}

			@Override
			protected getCommentPoint_args getEmptyArgsInstance() {
				return new getCommentPoint_args();
			}

			@Override
			protected getCommentPoint_result getResult(I iface,
					getCommentPoint_args args)
					throws org.apache.thrift.TException {
				getCommentPoint_result result = new getCommentPoint_result();
				result.success = iface.getCommentPoint(args.id);
				return result;
			}
		}

		private static class getCommentPointByName<I extends Iface>
				extends
				org.apache.thrift.ProcessFunction<I, getCommentPointByName_args> {
			public getCommentPointByName() {
				super("getCommentPointByName");
			}

			@Override
			protected getCommentPointByName_args getEmptyArgsInstance() {
				return new getCommentPointByName_args();
			}

			@Override
			protected getCommentPointByName_result getResult(I iface,
					getCommentPointByName_args args)
					throws org.apache.thrift.TException {
				getCommentPointByName_result result = new getCommentPointByName_result();
				result.success = iface.getCommentPointByName(args.name);
				return result;
			}
		}

		private static class searchCommentPoint<I extends Iface> extends
				org.apache.thrift.ProcessFunction<I, searchCommentPoint_args> {
			public searchCommentPoint() {
				super("searchCommentPoint");
			}

			@Override
			protected searchCommentPoint_args getEmptyArgsInstance() {
				return new searchCommentPoint_args();
			}

			@Override
			protected searchCommentPoint_result getResult(I iface,
					searchCommentPoint_args args)
					throws org.apache.thrift.TException {
				searchCommentPoint_result result = new searchCommentPoint_result();
				result.success = iface.searchCommentPoint(args.form);
				return result;
			}
		}

		private static class getHome<I extends Iface> extends
				org.apache.thrift.ProcessFunction<I, getHome_args> {
			public getHome() {
				super("getHome");
			}

			@Override
			protected getHome_args getEmptyArgsInstance() {
				return new getHome_args();
			}

			@Override
			protected getHome_result getResult(I iface, getHome_args args)
					throws org.apache.thrift.TException {
				getHome_result result = new getHome_result();
				result.success = iface.getHome(args.point, args.pageSize);
				return result;
			}
		}

	}

	public static class createComment_args
			implements
			org.apache.thrift.TBase<createComment_args, createComment_args._Fields>,
			java.io.Serializable, Cloneable {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"createComment_args");

		private static final org.apache.thrift.protocol.TField INFO_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"info", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
		private static final org.apache.thrift.protocol.TField POINT_FORM_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"pointForm", org.apache.thrift.protocol.TType.STRUCT, (short) 2);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new createComment_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new createComment_argsTupleSchemeFactory());
		}

		public TCommentForm info; // required
		public TCommentPointForm pointForm; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			INFO((short) 1, "info"), POINT_FORM((short) 2, "pointForm");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // INFO
					return INFO;
				case 2: // POINT_FORM
					return POINT_FORM;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			@Override
			public short getThriftFieldId() {
				return _thriftId;
			}

			@Override
			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.INFO,
					new org.apache.thrift.meta_data.FieldMetaData("info",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(
									org.apache.thrift.protocol.TType.STRUCT,
									TCommentForm.class)));
			tmpMap.put(_Fields.POINT_FORM,
					new org.apache.thrift.meta_data.FieldMetaData("pointForm",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(
									org.apache.thrift.protocol.TType.STRUCT,
									TCommentPointForm.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					createComment_args.class, metaDataMap);
		}

		public createComment_args() {
		}

		public createComment_args(TCommentForm info, TCommentPointForm pointForm) {
			this();
			this.info = info;
			this.pointForm = pointForm;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public createComment_args(createComment_args other) {
			if (other.isSetInfo()) {
				this.info = new TCommentForm(other.info);
			}
			if (other.isSetPointForm()) {
				this.pointForm = new TCommentPointForm(other.pointForm);
			}
		}

		@Override
		public createComment_args deepCopy() {
			return new createComment_args(this);
		}

		@Override
		public void clear() {
			this.info = null;
			this.pointForm = null;
		}

		public TCommentForm getInfo() {
			return this.info;
		}

		public createComment_args setInfo(TCommentForm info) {
			this.info = info;
			return this;
		}

		public void unsetInfo() {
			this.info = null;
		}

		/**
		 * Returns true if field info is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetInfo() {
			return this.info != null;
		}

		public void setInfoIsSet(boolean value) {
			if (!value) {
				this.info = null;
			}
		}

		public TCommentPointForm getPointForm() {
			return this.pointForm;
		}

		public createComment_args setPointForm(TCommentPointForm pointForm) {
			this.pointForm = pointForm;
			return this;
		}

		public void unsetPointForm() {
			this.pointForm = null;
		}

		/**
		 * Returns true if field pointForm is set (has been assigned a value)
		 * and false otherwise
		 */
		public boolean isSetPointForm() {
			return this.pointForm != null;
		}

		public void setPointFormIsSet(boolean value) {
			if (!value) {
				this.pointForm = null;
			}
		}

		@Override
		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case INFO:
				if (value == null) {
					unsetInfo();
				} else {
					setInfo((TCommentForm) value);
				}
				break;

			case POINT_FORM:
				if (value == null) {
					unsetPointForm();
				} else {
					setPointForm((TCommentPointForm) value);
				}
				break;

			}
		}

		@Override
		public Object getFieldValue(_Fields field) {
			switch (field) {
			case INFO:
				return getInfo();

			case POINT_FORM:
				return getPointForm();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		@Override
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case INFO:
				return isSetInfo();
			case POINT_FORM:
				return isSetPointForm();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof createComment_args)
				return this.equals((createComment_args) that);
			return false;
		}

		public boolean equals(createComment_args that) {
			if (that == null)
				return false;

			boolean this_present_info = true && this.isSetInfo();
			boolean that_present_info = true && that.isSetInfo();
			if (this_present_info || that_present_info) {
				if (!(this_present_info && that_present_info))
					return false;
				if (!this.info.equals(that.info))
					return false;
			}

			boolean this_present_pointForm = true && this.isSetPointForm();
			boolean that_present_pointForm = true && that.isSetPointForm();
			if (this_present_pointForm || that_present_pointForm) {
				if (!(this_present_pointForm && that_present_pointForm))
					return false;
				if (!this.pointForm.equals(that.pointForm))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			return 0;
		}

		@Override
		public int compareTo(createComment_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;
			createComment_args typedOther = other;

			lastComparison = Boolean.valueOf(isSetInfo()).compareTo(
					typedOther.isSetInfo());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetInfo()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.info, typedOther.info);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetPointForm()).compareTo(
					typedOther.isSetPointForm());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetPointForm()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.pointForm, typedOther.pointForm);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@Override
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		@Override
		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("createComment_args(");
			boolean first = true;

			sb.append("info:");
			if (this.info == null) {
				sb.append("null");
			} else {
				sb.append(this.info);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("pointForm:");
			if (this.pointForm == null) {
				sb.append("null");
			} else {
				sb.append(this.pointForm);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class createComment_argsStandardSchemeFactory implements
				SchemeFactory {
			@Override
			public createComment_argsStandardScheme getScheme() {
				return new createComment_argsStandardScheme();
			}
		}

		private static class createComment_argsStandardScheme extends
				StandardScheme<createComment_args> {

			@Override
			public void read(org.apache.thrift.protocol.TProtocol iprot,
					createComment_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // INFO
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.info = new TCommentForm();
							struct.info.read(iprot);
							struct.setInfoIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 2: // POINT_FORM
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.pointForm = new TCommentPointForm();
							struct.pointForm.read(iprot);
							struct.setPointFormIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			@Override
			public void write(org.apache.thrift.protocol.TProtocol oprot,
					createComment_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.info != null) {
					oprot.writeFieldBegin(INFO_FIELD_DESC);
					struct.info.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.pointForm != null) {
					oprot.writeFieldBegin(POINT_FORM_FIELD_DESC);
					struct.pointForm.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class createComment_argsTupleSchemeFactory implements
				SchemeFactory {
			@Override
			public createComment_argsTupleScheme getScheme() {
				return new createComment_argsTupleScheme();
			}
		}

		private static class createComment_argsTupleScheme extends
				TupleScheme<createComment_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					createComment_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetInfo()) {
					optionals.set(0);
				}
				if (struct.isSetPointForm()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetInfo()) {
					struct.info.write(oprot);
				}
				if (struct.isSetPointForm()) {
					struct.pointForm.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot,
					createComment_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.info = new TCommentForm();
					struct.info.read(iprot);
					struct.setInfoIsSet(true);
				}
				if (incoming.get(1)) {
					struct.pointForm = new TCommentPointForm();
					struct.pointForm.read(iprot);
					struct.setPointFormIsSet(true);
				}
			}
		}

	}

	public static class createComment_result
			implements
			org.apache.thrift.TBase<createComment_result, createComment_result._Fields>,
			java.io.Serializable, Cloneable {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"createComment_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.I32, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new createComment_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new createComment_resultTupleSchemeFactory());
		}

		public int success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			@Override
			public short getThriftFieldId() {
				return _thriftId;
			}

			@Override
			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __SUCCESS_ISSET_ID = 0;
		private BitSet __isset_bit_vector = new BitSet(1);
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.I32)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					createComment_result.class, metaDataMap);
		}

		public createComment_result() {
		}

		public createComment_result(int success) {
			this();
			this.success = success;
			setSuccessIsSet(true);
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public createComment_result(createComment_result other) {
			__isset_bit_vector.clear();
			__isset_bit_vector.or(other.__isset_bit_vector);
			this.success = other.success;
		}

		@Override
		public createComment_result deepCopy() {
			return new createComment_result(this);
		}

		@Override
		public void clear() {
			setSuccessIsSet(false);
			this.success = 0;
		}

		public int getSuccess() {
			return this.success;
		}

		public createComment_result setSuccess(int success) {
			this.success = success;
			setSuccessIsSet(true);
			return this;
		}

		public void unsetSuccess() {
			__isset_bit_vector.clear(__SUCCESS_ISSET_ID);
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
		}

		public void setSuccessIsSet(boolean value) {
			__isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
		}

		@Override
		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Integer) value);
				}
				break;

			}
		}

		@Override
		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return Integer.valueOf(getSuccess());

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		@Override
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof createComment_result)
				return this.equals((createComment_result) that);
			return false;
		}

		public boolean equals(createComment_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true;
			boolean that_present_success = true;
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (this.success != that.success)
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			return 0;
		}

		@Override
		public int compareTo(createComment_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;
			createComment_result typedOther = other;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
					typedOther.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.success, typedOther.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@Override
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		@Override
		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("createComment_result(");

			sb.append("success:");
			sb.append(this.success);

			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class createComment_resultStandardSchemeFactory
				implements SchemeFactory {
			@Override
			public createComment_resultStandardScheme getScheme() {
				return new createComment_resultStandardScheme();
			}
		}

		private static class createComment_resultStandardScheme extends
				StandardScheme<createComment_result> {

			@Override
			public void read(org.apache.thrift.protocol.TProtocol iprot,
					createComment_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.success = iprot.readI32();
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			@Override
			public void write(org.apache.thrift.protocol.TProtocol oprot,
					createComment_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
				oprot.writeI32(struct.success);
				oprot.writeFieldEnd();
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class createComment_resultTupleSchemeFactory implements
				SchemeFactory {
			@Override
			public createComment_resultTupleScheme getScheme() {
				return new createComment_resultTupleScheme();
			}
		}

		private static class createComment_resultTupleScheme extends
				TupleScheme<createComment_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					createComment_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeI32(struct.success);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot,
					createComment_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = iprot.readI32();
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class deleteComment_args
			implements
			org.apache.thrift.TBase<deleteComment_args, deleteComment_args._Fields>,
			java.io.Serializable, Cloneable {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"deleteComment_args");

		private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"id", org.apache.thrift.protocol.TType.I32, (short) 1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new deleteComment_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new deleteComment_argsTupleSchemeFactory());
		}

		public int id; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			ID((short) 1, "id");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // ID
					return ID;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			@Override
			public short getThriftFieldId() {
				return _thriftId;
			}

			@Override
			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __ID_ISSET_ID = 0;
		private BitSet __isset_bit_vector = new BitSet(1);
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.ID,
					new org.apache.thrift.meta_data.FieldMetaData("id",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.I32)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					deleteComment_args.class, metaDataMap);
		}

		public deleteComment_args() {
		}

		public deleteComment_args(int id) {
			this();
			this.id = id;
			setIdIsSet(true);
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public deleteComment_args(deleteComment_args other) {
			__isset_bit_vector.clear();
			__isset_bit_vector.or(other.__isset_bit_vector);
			this.id = other.id;
		}

		@Override
		public deleteComment_args deepCopy() {
			return new deleteComment_args(this);
		}

		@Override
		public void clear() {
			setIdIsSet(false);
			this.id = 0;
		}

		public int getId() {
			return this.id;
		}

		public deleteComment_args setId(int id) {
			this.id = id;
			setIdIsSet(true);
			return this;
		}

		public void unsetId() {
			__isset_bit_vector.clear(__ID_ISSET_ID);
		}

		/**
		 * Returns true if field id is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetId() {
			return __isset_bit_vector.get(__ID_ISSET_ID);
		}

		public void setIdIsSet(boolean value) {
			__isset_bit_vector.set(__ID_ISSET_ID, value);
		}

		@Override
		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case ID:
				if (value == null) {
					unsetId();
				} else {
					setId((Integer) value);
				}
				break;

			}
		}

		@Override
		public Object getFieldValue(_Fields field) {
			switch (field) {
			case ID:
				return Integer.valueOf(getId());

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		@Override
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case ID:
				return isSetId();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof deleteComment_args)
				return this.equals((deleteComment_args) that);
			return false;
		}

		public boolean equals(deleteComment_args that) {
			if (that == null)
				return false;

			boolean this_present_id = true;
			boolean that_present_id = true;
			if (this_present_id || that_present_id) {
				if (!(this_present_id && that_present_id))
					return false;
				if (this.id != that.id)
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			return 0;
		}

		@Override
		public int compareTo(deleteComment_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;
			deleteComment_args typedOther = other;

			lastComparison = Boolean.valueOf(isSetId()).compareTo(
					typedOther.isSetId());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetId()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.id, typedOther.id);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@Override
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		@Override
		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("deleteComment_args(");

			sb.append("id:");
			sb.append(this.id);

			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java
				// serialization is wacky, and doesn't call the default
				// constructor.
				__isset_bit_vector = new BitSet(1);
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class deleteComment_argsStandardSchemeFactory implements
				SchemeFactory {
			@Override
			public deleteComment_argsStandardScheme getScheme() {
				return new deleteComment_argsStandardScheme();
			}
		}

		private static class deleteComment_argsStandardScheme extends
				StandardScheme<deleteComment_args> {

			@Override
			public void read(org.apache.thrift.protocol.TProtocol iprot,
					deleteComment_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // ID
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.id = iprot.readI32();
							struct.setIdIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			@Override
			public void write(org.apache.thrift.protocol.TProtocol oprot,
					deleteComment_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldBegin(ID_FIELD_DESC);
				oprot.writeI32(struct.id);
				oprot.writeFieldEnd();
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class deleteComment_argsTupleSchemeFactory implements
				SchemeFactory {
			@Override
			public deleteComment_argsTupleScheme getScheme() {
				return new deleteComment_argsTupleScheme();
			}
		}

		private static class deleteComment_argsTupleScheme extends
				TupleScheme<deleteComment_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					deleteComment_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetId()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetId()) {
					oprot.writeI32(struct.id);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot,
					deleteComment_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.id = iprot.readI32();
					struct.setIdIsSet(true);
				}
			}
		}

	}

	public static class deleteComment_result
			implements
			org.apache.thrift.TBase<deleteComment_result, deleteComment_result._Fields>,
			java.io.Serializable, Cloneable {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"deleteComment_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.BOOL, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new deleteComment_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new deleteComment_resultTupleSchemeFactory());
		}

		public boolean success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			@Override
			public short getThriftFieldId() {
				return _thriftId;
			}

			@Override
			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __SUCCESS_ISSET_ID = 0;
		private BitSet __isset_bit_vector = new BitSet(1);
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.BOOL)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					deleteComment_result.class, metaDataMap);
		}

		public deleteComment_result() {
		}

		public deleteComment_result(boolean success) {
			this();
			this.success = success;
			setSuccessIsSet(true);
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public deleteComment_result(deleteComment_result other) {
			__isset_bit_vector.clear();
			__isset_bit_vector.or(other.__isset_bit_vector);
			this.success = other.success;
		}

		@Override
		public deleteComment_result deepCopy() {
			return new deleteComment_result(this);
		}

		@Override
		public void clear() {
			setSuccessIsSet(false);
			this.success = false;
		}

		public boolean isSuccess() {
			return this.success;
		}

		public deleteComment_result setSuccess(boolean success) {
			this.success = success;
			setSuccessIsSet(true);
			return this;
		}

		public void unsetSuccess() {
			__isset_bit_vector.clear(__SUCCESS_ISSET_ID);
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
		}

		public void setSuccessIsSet(boolean value) {
			__isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
		}

		@Override
		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Boolean) value);
				}
				break;

			}
		}

		@Override
		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return Boolean.valueOf(isSuccess());

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		@Override
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof deleteComment_result)
				return this.equals((deleteComment_result) that);
			return false;
		}

		public boolean equals(deleteComment_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true;
			boolean that_present_success = true;
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (this.success != that.success)
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			return 0;
		}

		@Override
		public int compareTo(deleteComment_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;
			deleteComment_result typedOther = other;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
					typedOther.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.success, typedOther.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@Override
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		@Override
		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("deleteComment_result(");

			sb.append("success:");
			sb.append(this.success);

			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class deleteComment_resultStandardSchemeFactory
				implements SchemeFactory {
			@Override
			public deleteComment_resultStandardScheme getScheme() {
				return new deleteComment_resultStandardScheme();
			}
		}

		private static class deleteComment_resultStandardScheme extends
				StandardScheme<deleteComment_result> {

			@Override
			public void read(org.apache.thrift.protocol.TProtocol iprot,
					deleteComment_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
							struct.success = iprot.readBool();
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			@Override
			public void write(org.apache.thrift.protocol.TProtocol oprot,
					deleteComment_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
				oprot.writeBool(struct.success);
				oprot.writeFieldEnd();
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class deleteComment_resultTupleSchemeFactory implements
				SchemeFactory {
			@Override
			public deleteComment_resultTupleScheme getScheme() {
				return new deleteComment_resultTupleScheme();
			}
		}

		private static class deleteComment_resultTupleScheme extends
				TupleScheme<deleteComment_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					deleteComment_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeBool(struct.success);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot,
					deleteComment_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = iprot.readBool();
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class getComment_args implements
			org.apache.thrift.TBase<getComment_args, getComment_args._Fields>,
			java.io.Serializable, Cloneable {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getComment_args");

		private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"id", org.apache.thrift.protocol.TType.I32, (short) 1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new getComment_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new getComment_argsTupleSchemeFactory());
		}

		public int id; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			ID((short) 1, "id");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // ID
					return ID;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			@Override
			public short getThriftFieldId() {
				return _thriftId;
			}

			@Override
			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __ID_ISSET_ID = 0;
		private BitSet __isset_bit_vector = new BitSet(1);
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.ID,
					new org.apache.thrift.meta_data.FieldMetaData("id",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.I32)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					getComment_args.class, metaDataMap);
		}

		public getComment_args() {
		}

		public getComment_args(int id) {
			this();
			this.id = id;
			setIdIsSet(true);
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getComment_args(getComment_args other) {
			__isset_bit_vector.clear();
			__isset_bit_vector.or(other.__isset_bit_vector);
			this.id = other.id;
		}

		@Override
		public getComment_args deepCopy() {
			return new getComment_args(this);
		}

		@Override
		public void clear() {
			setIdIsSet(false);
			this.id = 0;
		}

		public int getId() {
			return this.id;
		}

		public getComment_args setId(int id) {
			this.id = id;
			setIdIsSet(true);
			return this;
		}

		public void unsetId() {
			__isset_bit_vector.clear(__ID_ISSET_ID);
		}

		/**
		 * Returns true if field id is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetId() {
			return __isset_bit_vector.get(__ID_ISSET_ID);
		}

		public void setIdIsSet(boolean value) {
			__isset_bit_vector.set(__ID_ISSET_ID, value);
		}

		@Override
		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case ID:
				if (value == null) {
					unsetId();
				} else {
					setId((Integer) value);
				}
				break;

			}
		}

		@Override
		public Object getFieldValue(_Fields field) {
			switch (field) {
			case ID:
				return Integer.valueOf(getId());

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		@Override
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case ID:
				return isSetId();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof getComment_args)
				return this.equals((getComment_args) that);
			return false;
		}

		public boolean equals(getComment_args that) {
			if (that == null)
				return false;

			boolean this_present_id = true;
			boolean that_present_id = true;
			if (this_present_id || that_present_id) {
				if (!(this_present_id && that_present_id))
					return false;
				if (this.id != that.id)
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			return 0;
		}

		@Override
		public int compareTo(getComment_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;
			getComment_args typedOther = other;

			lastComparison = Boolean.valueOf(isSetId()).compareTo(
					typedOther.isSetId());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetId()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.id, typedOther.id);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@Override
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		@Override
		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("getComment_args(");

			sb.append("id:");
			sb.append(this.id);

			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java
				// serialization is wacky, and doesn't call the default
				// constructor.
				__isset_bit_vector = new BitSet(1);
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getComment_argsStandardSchemeFactory implements
				SchemeFactory {
			@Override
			public getComment_argsStandardScheme getScheme() {
				return new getComment_argsStandardScheme();
			}
		}

		private static class getComment_argsStandardScheme extends
				StandardScheme<getComment_args> {

			@Override
			public void read(org.apache.thrift.protocol.TProtocol iprot,
					getComment_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // ID
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.id = iprot.readI32();
							struct.setIdIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			@Override
			public void write(org.apache.thrift.protocol.TProtocol oprot,
					getComment_args struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldBegin(ID_FIELD_DESC);
				oprot.writeI32(struct.id);
				oprot.writeFieldEnd();
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getComment_argsTupleSchemeFactory implements
				SchemeFactory {
			@Override
			public getComment_argsTupleScheme getScheme() {
				return new getComment_argsTupleScheme();
			}
		}

		private static class getComment_argsTupleScheme extends
				TupleScheme<getComment_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					getComment_args struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetId()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetId()) {
					oprot.writeI32(struct.id);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot,
					getComment_args struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.id = iprot.readI32();
					struct.setIdIsSet(true);
				}
			}
		}

	}

	public static class getComment_result
			implements
			org.apache.thrift.TBase<getComment_result, getComment_result._Fields>,
			java.io.Serializable, Cloneable {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getComment_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new getComment_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new getComment_resultTupleSchemeFactory());
		}

		public TCommentInfo success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			@Override
			public short getThriftFieldId() {
				return _thriftId;
			}

			@Override
			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(
									org.apache.thrift.protocol.TType.STRUCT,
									TCommentInfo.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					getComment_result.class, metaDataMap);
		}

		public getComment_result() {
		}

		public getComment_result(TCommentInfo success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getComment_result(getComment_result other) {
			if (other.isSetSuccess()) {
				this.success = new TCommentInfo(other.success);
			}
		}

		@Override
		public getComment_result deepCopy() {
			return new getComment_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public TCommentInfo getSuccess() {
			return this.success;
		}

		public getComment_result setSuccess(TCommentInfo success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@Override
		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((TCommentInfo) value);
				}
				break;

			}
		}

		@Override
		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		@Override
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof getComment_result)
				return this.equals((getComment_result) that);
			return false;
		}

		public boolean equals(getComment_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			return 0;
		}

		@Override
		public int compareTo(getComment_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;
			getComment_result typedOther = other;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
					typedOther.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.success, typedOther.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@Override
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		@Override
		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("getComment_result(");

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}

			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getComment_resultStandardSchemeFactory implements
				SchemeFactory {
			@Override
			public getComment_resultStandardScheme getScheme() {
				return new getComment_resultStandardScheme();
			}
		}

		private static class getComment_resultStandardScheme extends
				StandardScheme<getComment_result> {

			@Override
			public void read(org.apache.thrift.protocol.TProtocol iprot,
					getComment_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new TCommentInfo();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			@Override
			public void write(org.apache.thrift.protocol.TProtocol oprot,
					getComment_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getComment_resultTupleSchemeFactory implements
				SchemeFactory {
			@Override
			public getComment_resultTupleScheme getScheme() {
				return new getComment_resultTupleScheme();
			}
		}

		private static class getComment_resultTupleScheme extends
				TupleScheme<getComment_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					getComment_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot,
					getComment_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new TCommentInfo();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class searchComment_args
			implements
			org.apache.thrift.TBase<searchComment_args, searchComment_args._Fields>,
			java.io.Serializable, Cloneable {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"searchComment_args");

		private static final org.apache.thrift.protocol.TField FORM_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"form", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new searchComment_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new searchComment_argsTupleSchemeFactory());
		}

		public TSearchCommentForm form; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			FORM((short) 1, "form");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // FORM
					return FORM;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			@Override
			public short getThriftFieldId() {
				return _thriftId;
			}

			@Override
			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.FORM,
					new org.apache.thrift.meta_data.FieldMetaData("form",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(
									org.apache.thrift.protocol.TType.STRUCT,
									TSearchCommentForm.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					searchComment_args.class, metaDataMap);
		}

		public searchComment_args() {
		}

		public searchComment_args(TSearchCommentForm form) {
			this();
			this.form = form;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public searchComment_args(searchComment_args other) {
			if (other.isSetForm()) {
				this.form = new TSearchCommentForm(other.form);
			}
		}

		@Override
		public searchComment_args deepCopy() {
			return new searchComment_args(this);
		}

		@Override
		public void clear() {
			this.form = null;
		}

		public TSearchCommentForm getForm() {
			return this.form;
		}

		public searchComment_args setForm(TSearchCommentForm form) {
			this.form = form;
			return this;
		}

		public void unsetForm() {
			this.form = null;
		}

		/**
		 * Returns true if field form is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetForm() {
			return this.form != null;
		}

		public void setFormIsSet(boolean value) {
			if (!value) {
				this.form = null;
			}
		}

		@Override
		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case FORM:
				if (value == null) {
					unsetForm();
				} else {
					setForm((TSearchCommentForm) value);
				}
				break;

			}
		}

		@Override
		public Object getFieldValue(_Fields field) {
			switch (field) {
			case FORM:
				return getForm();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		@Override
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case FORM:
				return isSetForm();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof searchComment_args)
				return this.equals((searchComment_args) that);
			return false;
		}

		public boolean equals(searchComment_args that) {
			if (that == null)
				return false;

			boolean this_present_form = true && this.isSetForm();
			boolean that_present_form = true && that.isSetForm();
			if (this_present_form || that_present_form) {
				if (!(this_present_form && that_present_form))
					return false;
				if (!this.form.equals(that.form))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			return 0;
		}

		@Override
		public int compareTo(searchComment_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;
			searchComment_args typedOther = other;

			lastComparison = Boolean.valueOf(isSetForm()).compareTo(
					typedOther.isSetForm());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetForm()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.form, typedOther.form);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@Override
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		@Override
		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("searchComment_args(");

			sb.append("form:");
			if (this.form == null) {
				sb.append("null");
			} else {
				sb.append(this.form);
			}

			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class searchComment_argsStandardSchemeFactory implements
				SchemeFactory {
			@Override
			public searchComment_argsStandardScheme getScheme() {
				return new searchComment_argsStandardScheme();
			}
		}

		private static class searchComment_argsStandardScheme extends
				StandardScheme<searchComment_args> {

			@Override
			public void read(org.apache.thrift.protocol.TProtocol iprot,
					searchComment_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // FORM
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.form = new TSearchCommentForm();
							struct.form.read(iprot);
							struct.setFormIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			@Override
			public void write(org.apache.thrift.protocol.TProtocol oprot,
					searchComment_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.form != null) {
					oprot.writeFieldBegin(FORM_FIELD_DESC);
					struct.form.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class searchComment_argsTupleSchemeFactory implements
				SchemeFactory {
			@Override
			public searchComment_argsTupleScheme getScheme() {
				return new searchComment_argsTupleScheme();
			}
		}

		private static class searchComment_argsTupleScheme extends
				TupleScheme<searchComment_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					searchComment_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetForm()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetForm()) {
					struct.form.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot,
					searchComment_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.form = new TSearchCommentForm();
					struct.form.read(iprot);
					struct.setFormIsSet(true);
				}
			}
		}

	}

	public static class searchComment_result
			implements
			org.apache.thrift.TBase<searchComment_result, searchComment_result._Fields>,
			java.io.Serializable, Cloneable {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"searchComment_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new searchComment_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new searchComment_resultTupleSchemeFactory());
		}

		public TCommentSearchResult success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			@Override
			public short getThriftFieldId() {
				return _thriftId;
			}

			@Override
			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(
									org.apache.thrift.protocol.TType.STRUCT,
									TCommentSearchResult.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					searchComment_result.class, metaDataMap);
		}

		public searchComment_result() {
		}

		public searchComment_result(TCommentSearchResult success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public searchComment_result(searchComment_result other) {
			if (other.isSetSuccess()) {
				this.success = new TCommentSearchResult(other.success);
			}
		}

		@Override
		public searchComment_result deepCopy() {
			return new searchComment_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public TCommentSearchResult getSuccess() {
			return this.success;
		}

		public searchComment_result setSuccess(TCommentSearchResult success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@Override
		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((TCommentSearchResult) value);
				}
				break;

			}
		}

		@Override
		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		@Override
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof searchComment_result)
				return this.equals((searchComment_result) that);
			return false;
		}

		public boolean equals(searchComment_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			return 0;
		}

		@Override
		public int compareTo(searchComment_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;
			searchComment_result typedOther = other;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
					typedOther.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.success, typedOther.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@Override
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		@Override
		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("searchComment_result(");

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}

			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class searchComment_resultStandardSchemeFactory
				implements SchemeFactory {
			@Override
			public searchComment_resultStandardScheme getScheme() {
				return new searchComment_resultStandardScheme();
			}
		}

		private static class searchComment_resultStandardScheme extends
				StandardScheme<searchComment_result> {

			@Override
			public void read(org.apache.thrift.protocol.TProtocol iprot,
					searchComment_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new TCommentSearchResult();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			@Override
			public void write(org.apache.thrift.protocol.TProtocol oprot,
					searchComment_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class searchComment_resultTupleSchemeFactory implements
				SchemeFactory {
			@Override
			public searchComment_resultTupleScheme getScheme() {
				return new searchComment_resultTupleScheme();
			}
		}

		private static class searchComment_resultTupleScheme extends
				TupleScheme<searchComment_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					searchComment_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot,
					searchComment_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new TCommentSearchResult();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class listComment_args
			implements
			org.apache.thrift.TBase<listComment_args, listComment_args._Fields>,
			java.io.Serializable, Cloneable {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"listComment_args");

		private static final org.apache.thrift.protocol.TField POINT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"pointId", org.apache.thrift.protocol.TType.I32, (short) 1);
		private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"page", org.apache.thrift.protocol.TType.I32, (short) 2);
		private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"pageSize", org.apache.thrift.protocol.TType.I32, (short) 3);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new listComment_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new listComment_argsTupleSchemeFactory());
		}

		public int pointId; // required
		public int page; // required
		public int pageSize; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			POINT_ID((short) 1, "pointId"), PAGE((short) 2, "page"), PAGE_SIZE(
					(short) 3, "pageSize");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // POINT_ID
					return POINT_ID;
				case 2: // PAGE
					return PAGE;
				case 3: // PAGE_SIZE
					return PAGE_SIZE;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			@Override
			public short getThriftFieldId() {
				return _thriftId;
			}

			@Override
			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __POINTID_ISSET_ID = 0;
		private static final int __PAGE_ISSET_ID = 1;
		private static final int __PAGESIZE_ISSET_ID = 2;
		private BitSet __isset_bit_vector = new BitSet(3);
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.POINT_ID,
					new org.apache.thrift.meta_data.FieldMetaData("pointId",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.I32)));
			tmpMap.put(_Fields.PAGE,
					new org.apache.thrift.meta_data.FieldMetaData("page",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.I32)));
			tmpMap.put(_Fields.PAGE_SIZE,
					new org.apache.thrift.meta_data.FieldMetaData("pageSize",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.I32)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					listComment_args.class, metaDataMap);
		}

		public listComment_args() {
		}

		public listComment_args(int pointId, int page, int pageSize) {
			this();
			this.pointId = pointId;
			setPointIdIsSet(true);
			this.page = page;
			setPageIsSet(true);
			this.pageSize = pageSize;
			setPageSizeIsSet(true);
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public listComment_args(listComment_args other) {
			__isset_bit_vector.clear();
			__isset_bit_vector.or(other.__isset_bit_vector);
			this.pointId = other.pointId;
			this.page = other.page;
			this.pageSize = other.pageSize;
		}

		@Override
		public listComment_args deepCopy() {
			return new listComment_args(this);
		}

		@Override
		public void clear() {
			setPointIdIsSet(false);
			this.pointId = 0;
			setPageIsSet(false);
			this.page = 0;
			setPageSizeIsSet(false);
			this.pageSize = 0;
		}

		public int getPointId() {
			return this.pointId;
		}

		public listComment_args setPointId(int pointId) {
			this.pointId = pointId;
			setPointIdIsSet(true);
			return this;
		}

		public void unsetPointId() {
			__isset_bit_vector.clear(__POINTID_ISSET_ID);
		}

		/**
		 * Returns true if field pointId is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetPointId() {
			return __isset_bit_vector.get(__POINTID_ISSET_ID);
		}

		public void setPointIdIsSet(boolean value) {
			__isset_bit_vector.set(__POINTID_ISSET_ID, value);
		}

		public int getPage() {
			return this.page;
		}

		public listComment_args setPage(int page) {
			this.page = page;
			setPageIsSet(true);
			return this;
		}

		public void unsetPage() {
			__isset_bit_vector.clear(__PAGE_ISSET_ID);
		}

		/**
		 * Returns true if field page is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetPage() {
			return __isset_bit_vector.get(__PAGE_ISSET_ID);
		}

		public void setPageIsSet(boolean value) {
			__isset_bit_vector.set(__PAGE_ISSET_ID, value);
		}

		public int getPageSize() {
			return this.pageSize;
		}

		public listComment_args setPageSize(int pageSize) {
			this.pageSize = pageSize;
			setPageSizeIsSet(true);
			return this;
		}

		public void unsetPageSize() {
			__isset_bit_vector.clear(__PAGESIZE_ISSET_ID);
		}

		/**
		 * Returns true if field pageSize is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetPageSize() {
			return __isset_bit_vector.get(__PAGESIZE_ISSET_ID);
		}

		public void setPageSizeIsSet(boolean value) {
			__isset_bit_vector.set(__PAGESIZE_ISSET_ID, value);
		}

		@Override
		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case POINT_ID:
				if (value == null) {
					unsetPointId();
				} else {
					setPointId((Integer) value);
				}
				break;

			case PAGE:
				if (value == null) {
					unsetPage();
				} else {
					setPage((Integer) value);
				}
				break;

			case PAGE_SIZE:
				if (value == null) {
					unsetPageSize();
				} else {
					setPageSize((Integer) value);
				}
				break;

			}
		}

		@Override
		public Object getFieldValue(_Fields field) {
			switch (field) {
			case POINT_ID:
				return Integer.valueOf(getPointId());

			case PAGE:
				return Integer.valueOf(getPage());

			case PAGE_SIZE:
				return Integer.valueOf(getPageSize());

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		@Override
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case POINT_ID:
				return isSetPointId();
			case PAGE:
				return isSetPage();
			case PAGE_SIZE:
				return isSetPageSize();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof listComment_args)
				return this.equals((listComment_args) that);
			return false;
		}

		public boolean equals(listComment_args that) {
			if (that == null)
				return false;

			boolean this_present_pointId = true;
			boolean that_present_pointId = true;
			if (this_present_pointId || that_present_pointId) {
				if (!(this_present_pointId && that_present_pointId))
					return false;
				if (this.pointId != that.pointId)
					return false;
			}

			boolean this_present_page = true;
			boolean that_present_page = true;
			if (this_present_page || that_present_page) {
				if (!(this_present_page && that_present_page))
					return false;
				if (this.page != that.page)
					return false;
			}

			boolean this_present_pageSize = true;
			boolean that_present_pageSize = true;
			if (this_present_pageSize || that_present_pageSize) {
				if (!(this_present_pageSize && that_present_pageSize))
					return false;
				if (this.pageSize != that.pageSize)
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			return 0;
		}

		@Override
		public int compareTo(listComment_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;
			listComment_args typedOther = other;

			lastComparison = Boolean.valueOf(isSetPointId()).compareTo(
					typedOther.isSetPointId());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetPointId()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.pointId, typedOther.pointId);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetPage()).compareTo(
					typedOther.isSetPage());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetPage()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.page, typedOther.page);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(
					typedOther.isSetPageSize());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetPageSize()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.pageSize, typedOther.pageSize);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@Override
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		@Override
		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("listComment_args(");
			boolean first = true;

			sb.append("pointId:");
			sb.append(this.pointId);
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("page:");
			sb.append(this.page);
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("pageSize:");
			sb.append(this.pageSize);
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java
				// serialization is wacky, and doesn't call the default
				// constructor.
				__isset_bit_vector = new BitSet(1);
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class listComment_argsStandardSchemeFactory implements
				SchemeFactory {
			@Override
			public listComment_argsStandardScheme getScheme() {
				return new listComment_argsStandardScheme();
			}
		}

		private static class listComment_argsStandardScheme extends
				StandardScheme<listComment_args> {

			@Override
			public void read(org.apache.thrift.protocol.TProtocol iprot,
					listComment_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // POINT_ID
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.pointId = iprot.readI32();
							struct.setPointIdIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 2: // PAGE
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.page = iprot.readI32();
							struct.setPageIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 3: // PAGE_SIZE
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.pageSize = iprot.readI32();
							struct.setPageSizeIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			@Override
			public void write(org.apache.thrift.protocol.TProtocol oprot,
					listComment_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldBegin(POINT_ID_FIELD_DESC);
				oprot.writeI32(struct.pointId);
				oprot.writeFieldEnd();
				oprot.writeFieldBegin(PAGE_FIELD_DESC);
				oprot.writeI32(struct.page);
				oprot.writeFieldEnd();
				oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
				oprot.writeI32(struct.pageSize);
				oprot.writeFieldEnd();
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class listComment_argsTupleSchemeFactory implements
				SchemeFactory {
			@Override
			public listComment_argsTupleScheme getScheme() {
				return new listComment_argsTupleScheme();
			}
		}

		private static class listComment_argsTupleScheme extends
				TupleScheme<listComment_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					listComment_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetPointId()) {
					optionals.set(0);
				}
				if (struct.isSetPage()) {
					optionals.set(1);
				}
				if (struct.isSetPageSize()) {
					optionals.set(2);
				}
				oprot.writeBitSet(optionals, 3);
				if (struct.isSetPointId()) {
					oprot.writeI32(struct.pointId);
				}
				if (struct.isSetPage()) {
					oprot.writeI32(struct.page);
				}
				if (struct.isSetPageSize()) {
					oprot.writeI32(struct.pageSize);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot,
					listComment_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(3);
				if (incoming.get(0)) {
					struct.pointId = iprot.readI32();
					struct.setPointIdIsSet(true);
				}
				if (incoming.get(1)) {
					struct.page = iprot.readI32();
					struct.setPageIsSet(true);
				}
				if (incoming.get(2)) {
					struct.pageSize = iprot.readI32();
					struct.setPageSizeIsSet(true);
				}
			}
		}

	}

	public static class listComment_result
			implements
			org.apache.thrift.TBase<listComment_result, listComment_result._Fields>,
			java.io.Serializable, Cloneable {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"listComment_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new listComment_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new listComment_resultTupleSchemeFactory());
		}

		public TCommentSearchResult success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			@Override
			public short getThriftFieldId() {
				return _thriftId;
			}

			@Override
			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(
									org.apache.thrift.protocol.TType.STRUCT,
									TCommentSearchResult.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					listComment_result.class, metaDataMap);
		}

		public listComment_result() {
		}

		public listComment_result(TCommentSearchResult success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public listComment_result(listComment_result other) {
			if (other.isSetSuccess()) {
				this.success = new TCommentSearchResult(other.success);
			}
		}

		@Override
		public listComment_result deepCopy() {
			return new listComment_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public TCommentSearchResult getSuccess() {
			return this.success;
		}

		public listComment_result setSuccess(TCommentSearchResult success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@Override
		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((TCommentSearchResult) value);
				}
				break;

			}
		}

		@Override
		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		@Override
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof listComment_result)
				return this.equals((listComment_result) that);
			return false;
		}

		public boolean equals(listComment_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			return 0;
		}

		@Override
		public int compareTo(listComment_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;
			listComment_result typedOther = other;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
					typedOther.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.success, typedOther.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@Override
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		@Override
		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("listComment_result(");

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}

			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class listComment_resultStandardSchemeFactory implements
				SchemeFactory {
			@Override
			public listComment_resultStandardScheme getScheme() {
				return new listComment_resultStandardScheme();
			}
		}

		private static class listComment_resultStandardScheme extends
				StandardScheme<listComment_result> {

			@Override
			public void read(org.apache.thrift.protocol.TProtocol iprot,
					listComment_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new TCommentSearchResult();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			@Override
			public void write(org.apache.thrift.protocol.TProtocol oprot,
					listComment_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class listComment_resultTupleSchemeFactory implements
				SchemeFactory {
			@Override
			public listComment_resultTupleScheme getScheme() {
				return new listComment_resultTupleScheme();
			}
		}

		private static class listComment_resultTupleScheme extends
				TupleScheme<listComment_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					listComment_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot,
					listComment_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new TCommentSearchResult();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class supportComment_args
			implements
			org.apache.thrift.TBase<supportComment_args, supportComment_args._Fields>,
			java.io.Serializable, Cloneable {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"supportComment_args");

		private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"id", org.apache.thrift.protocol.TType.I32, (short) 1);
		private static final org.apache.thrift.protocol.TField OPPOSE_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"oppose", org.apache.thrift.protocol.TType.BOOL, (short) 2);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new supportComment_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new supportComment_argsTupleSchemeFactory());
		}

		public int id; // required
		public boolean oppose; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			ID((short) 1, "id"), OPPOSE((short) 2, "oppose");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // ID
					return ID;
				case 2: // OPPOSE
					return OPPOSE;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			@Override
			public short getThriftFieldId() {
				return _thriftId;
			}

			@Override
			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __ID_ISSET_ID = 0;
		private static final int __OPPOSE_ISSET_ID = 1;
		private BitSet __isset_bit_vector = new BitSet(2);
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.ID,
					new org.apache.thrift.meta_data.FieldMetaData("id",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.I32)));
			tmpMap.put(_Fields.OPPOSE,
					new org.apache.thrift.meta_data.FieldMetaData("oppose",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.BOOL)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					supportComment_args.class, metaDataMap);
		}

		public supportComment_args() {
		}

		public supportComment_args(int id, boolean oppose) {
			this();
			this.id = id;
			setIdIsSet(true);
			this.oppose = oppose;
			setOpposeIsSet(true);
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public supportComment_args(supportComment_args other) {
			__isset_bit_vector.clear();
			__isset_bit_vector.or(other.__isset_bit_vector);
			this.id = other.id;
			this.oppose = other.oppose;
		}

		@Override
		public supportComment_args deepCopy() {
			return new supportComment_args(this);
		}

		@Override
		public void clear() {
			setIdIsSet(false);
			this.id = 0;
			setOpposeIsSet(false);
			this.oppose = false;
		}

		public int getId() {
			return this.id;
		}

		public supportComment_args setId(int id) {
			this.id = id;
			setIdIsSet(true);
			return this;
		}

		public void unsetId() {
			__isset_bit_vector.clear(__ID_ISSET_ID);
		}

		/**
		 * Returns true if field id is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetId() {
			return __isset_bit_vector.get(__ID_ISSET_ID);
		}

		public void setIdIsSet(boolean value) {
			__isset_bit_vector.set(__ID_ISSET_ID, value);
		}

		public boolean isOppose() {
			return this.oppose;
		}

		public supportComment_args setOppose(boolean oppose) {
			this.oppose = oppose;
			setOpposeIsSet(true);
			return this;
		}

		public void unsetOppose() {
			__isset_bit_vector.clear(__OPPOSE_ISSET_ID);
		}

		/**
		 * Returns true if field oppose is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetOppose() {
			return __isset_bit_vector.get(__OPPOSE_ISSET_ID);
		}

		public void setOpposeIsSet(boolean value) {
			__isset_bit_vector.set(__OPPOSE_ISSET_ID, value);
		}

		@Override
		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case ID:
				if (value == null) {
					unsetId();
				} else {
					setId((Integer) value);
				}
				break;

			case OPPOSE:
				if (value == null) {
					unsetOppose();
				} else {
					setOppose((Boolean) value);
				}
				break;

			}
		}

		@Override
		public Object getFieldValue(_Fields field) {
			switch (field) {
			case ID:
				return Integer.valueOf(getId());

			case OPPOSE:
				return Boolean.valueOf(isOppose());

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		@Override
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case ID:
				return isSetId();
			case OPPOSE:
				return isSetOppose();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof supportComment_args)
				return this.equals((supportComment_args) that);
			return false;
		}

		public boolean equals(supportComment_args that) {
			if (that == null)
				return false;

			boolean this_present_id = true;
			boolean that_present_id = true;
			if (this_present_id || that_present_id) {
				if (!(this_present_id && that_present_id))
					return false;
				if (this.id != that.id)
					return false;
			}

			boolean this_present_oppose = true;
			boolean that_present_oppose = true;
			if (this_present_oppose || that_present_oppose) {
				if (!(this_present_oppose && that_present_oppose))
					return false;
				if (this.oppose != that.oppose)
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			return 0;
		}

		@Override
		public int compareTo(supportComment_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;
			supportComment_args typedOther = other;

			lastComparison = Boolean.valueOf(isSetId()).compareTo(
					typedOther.isSetId());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetId()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.id, typedOther.id);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetOppose()).compareTo(
					typedOther.isSetOppose());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetOppose()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.oppose, typedOther.oppose);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@Override
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		@Override
		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("supportComment_args(");
			boolean first = true;

			sb.append("id:");
			sb.append(this.id);
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("oppose:");
			sb.append(this.oppose);
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java
				// serialization is wacky, and doesn't call the default
				// constructor.
				__isset_bit_vector = new BitSet(1);
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class supportComment_argsStandardSchemeFactory implements
				SchemeFactory {
			@Override
			public supportComment_argsStandardScheme getScheme() {
				return new supportComment_argsStandardScheme();
			}
		}

		private static class supportComment_argsStandardScheme extends
				StandardScheme<supportComment_args> {

			@Override
			public void read(org.apache.thrift.protocol.TProtocol iprot,
					supportComment_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // ID
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.id = iprot.readI32();
							struct.setIdIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 2: // OPPOSE
						if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
							struct.oppose = iprot.readBool();
							struct.setOpposeIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			@Override
			public void write(org.apache.thrift.protocol.TProtocol oprot,
					supportComment_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldBegin(ID_FIELD_DESC);
				oprot.writeI32(struct.id);
				oprot.writeFieldEnd();
				oprot.writeFieldBegin(OPPOSE_FIELD_DESC);
				oprot.writeBool(struct.oppose);
				oprot.writeFieldEnd();
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class supportComment_argsTupleSchemeFactory implements
				SchemeFactory {
			@Override
			public supportComment_argsTupleScheme getScheme() {
				return new supportComment_argsTupleScheme();
			}
		}

		private static class supportComment_argsTupleScheme extends
				TupleScheme<supportComment_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					supportComment_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetId()) {
					optionals.set(0);
				}
				if (struct.isSetOppose()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetId()) {
					oprot.writeI32(struct.id);
				}
				if (struct.isSetOppose()) {
					oprot.writeBool(struct.oppose);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot,
					supportComment_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.id = iprot.readI32();
					struct.setIdIsSet(true);
				}
				if (incoming.get(1)) {
					struct.oppose = iprot.readBool();
					struct.setOpposeIsSet(true);
				}
			}
		}

	}

	public static class supportComment_result
			implements
			org.apache.thrift.TBase<supportComment_result, supportComment_result._Fields>,
			java.io.Serializable, Cloneable {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"supportComment_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.BOOL, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new supportComment_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new supportComment_resultTupleSchemeFactory());
		}

		public boolean success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			@Override
			public short getThriftFieldId() {
				return _thriftId;
			}

			@Override
			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __SUCCESS_ISSET_ID = 0;
		private BitSet __isset_bit_vector = new BitSet(1);
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.BOOL)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					supportComment_result.class, metaDataMap);
		}

		public supportComment_result() {
		}

		public supportComment_result(boolean success) {
			this();
			this.success = success;
			setSuccessIsSet(true);
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public supportComment_result(supportComment_result other) {
			__isset_bit_vector.clear();
			__isset_bit_vector.or(other.__isset_bit_vector);
			this.success = other.success;
		}

		@Override
		public supportComment_result deepCopy() {
			return new supportComment_result(this);
		}

		@Override
		public void clear() {
			setSuccessIsSet(false);
			this.success = false;
		}

		public boolean isSuccess() {
			return this.success;
		}

		public supportComment_result setSuccess(boolean success) {
			this.success = success;
			setSuccessIsSet(true);
			return this;
		}

		public void unsetSuccess() {
			__isset_bit_vector.clear(__SUCCESS_ISSET_ID);
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
		}

		public void setSuccessIsSet(boolean value) {
			__isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
		}

		@Override
		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Boolean) value);
				}
				break;

			}
		}

		@Override
		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return Boolean.valueOf(isSuccess());

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		@Override
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof supportComment_result)
				return this.equals((supportComment_result) that);
			return false;
		}

		public boolean equals(supportComment_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true;
			boolean that_present_success = true;
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (this.success != that.success)
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			return 0;
		}

		@Override
		public int compareTo(supportComment_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;
			supportComment_result typedOther = other;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
					typedOther.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.success, typedOther.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@Override
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		@Override
		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("supportComment_result(");

			sb.append("success:");
			sb.append(this.success);

			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class supportComment_resultStandardSchemeFactory
				implements SchemeFactory {
			@Override
			public supportComment_resultStandardScheme getScheme() {
				return new supportComment_resultStandardScheme();
			}
		}

		private static class supportComment_resultStandardScheme extends
				StandardScheme<supportComment_result> {

			@Override
			public void read(org.apache.thrift.protocol.TProtocol iprot,
					supportComment_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
							struct.success = iprot.readBool();
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			@Override
			public void write(org.apache.thrift.protocol.TProtocol oprot,
					supportComment_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
				oprot.writeBool(struct.success);
				oprot.writeFieldEnd();
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class supportComment_resultTupleSchemeFactory implements
				SchemeFactory {
			@Override
			public supportComment_resultTupleScheme getScheme() {
				return new supportComment_resultTupleScheme();
			}
		}

		private static class supportComment_resultTupleScheme extends
				TupleScheme<supportComment_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					supportComment_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeBool(struct.success);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot,
					supportComment_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = iprot.readBool();
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class authComment_args
			implements
			org.apache.thrift.TBase<authComment_args, authComment_args._Fields>,
			java.io.Serializable, Cloneable {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"authComment_args");

		private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"id", org.apache.thrift.protocol.TType.I32, (short) 1);
		private static final org.apache.thrift.protocol.TField AUTH_DONE_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"authDone", org.apache.thrift.protocol.TType.BOOL, (short) 2);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new authComment_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new authComment_argsTupleSchemeFactory());
		}

		public int id; // required
		public boolean authDone; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			ID((short) 1, "id"), AUTH_DONE((short) 2, "authDone");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // ID
					return ID;
				case 2: // AUTH_DONE
					return AUTH_DONE;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			@Override
			public short getThriftFieldId() {
				return _thriftId;
			}

			@Override
			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __ID_ISSET_ID = 0;
		private static final int __AUTHDONE_ISSET_ID = 1;
		private BitSet __isset_bit_vector = new BitSet(2);
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.ID,
					new org.apache.thrift.meta_data.FieldMetaData("id",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.I32)));
			tmpMap.put(_Fields.AUTH_DONE,
					new org.apache.thrift.meta_data.FieldMetaData("authDone",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.BOOL)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					authComment_args.class, metaDataMap);
		}

		public authComment_args() {
		}

		public authComment_args(int id, boolean authDone) {
			this();
			this.id = id;
			setIdIsSet(true);
			this.authDone = authDone;
			setAuthDoneIsSet(true);
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public authComment_args(authComment_args other) {
			__isset_bit_vector.clear();
			__isset_bit_vector.or(other.__isset_bit_vector);
			this.id = other.id;
			this.authDone = other.authDone;
		}

		@Override
		public authComment_args deepCopy() {
			return new authComment_args(this);
		}

		@Override
		public void clear() {
			setIdIsSet(false);
			this.id = 0;
			setAuthDoneIsSet(false);
			this.authDone = false;
		}

		public int getId() {
			return this.id;
		}

		public authComment_args setId(int id) {
			this.id = id;
			setIdIsSet(true);
			return this;
		}

		public void unsetId() {
			__isset_bit_vector.clear(__ID_ISSET_ID);
		}

		/**
		 * Returns true if field id is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetId() {
			return __isset_bit_vector.get(__ID_ISSET_ID);
		}

		public void setIdIsSet(boolean value) {
			__isset_bit_vector.set(__ID_ISSET_ID, value);
		}

		public boolean isAuthDone() {
			return this.authDone;
		}

		public authComment_args setAuthDone(boolean authDone) {
			this.authDone = authDone;
			setAuthDoneIsSet(true);
			return this;
		}

		public void unsetAuthDone() {
			__isset_bit_vector.clear(__AUTHDONE_ISSET_ID);
		}

		/**
		 * Returns true if field authDone is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetAuthDone() {
			return __isset_bit_vector.get(__AUTHDONE_ISSET_ID);
		}

		public void setAuthDoneIsSet(boolean value) {
			__isset_bit_vector.set(__AUTHDONE_ISSET_ID, value);
		}

		@Override
		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case ID:
				if (value == null) {
					unsetId();
				} else {
					setId((Integer) value);
				}
				break;

			case AUTH_DONE:
				if (value == null) {
					unsetAuthDone();
				} else {
					setAuthDone((Boolean) value);
				}
				break;

			}
		}

		@Override
		public Object getFieldValue(_Fields field) {
			switch (field) {
			case ID:
				return Integer.valueOf(getId());

			case AUTH_DONE:
				return Boolean.valueOf(isAuthDone());

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		@Override
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case ID:
				return isSetId();
			case AUTH_DONE:
				return isSetAuthDone();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof authComment_args)
				return this.equals((authComment_args) that);
			return false;
		}

		public boolean equals(authComment_args that) {
			if (that == null)
				return false;

			boolean this_present_id = true;
			boolean that_present_id = true;
			if (this_present_id || that_present_id) {
				if (!(this_present_id && that_present_id))
					return false;
				if (this.id != that.id)
					return false;
			}

			boolean this_present_authDone = true;
			boolean that_present_authDone = true;
			if (this_present_authDone || that_present_authDone) {
				if (!(this_present_authDone && that_present_authDone))
					return false;
				if (this.authDone != that.authDone)
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			return 0;
		}

		@Override
		public int compareTo(authComment_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;
			authComment_args typedOther = other;

			lastComparison = Boolean.valueOf(isSetId()).compareTo(
					typedOther.isSetId());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetId()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.id, typedOther.id);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetAuthDone()).compareTo(
					typedOther.isSetAuthDone());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetAuthDone()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.authDone, typedOther.authDone);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@Override
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		@Override
		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("authComment_args(");
			boolean first = true;

			sb.append("id:");
			sb.append(this.id);
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("authDone:");
			sb.append(this.authDone);
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java
				// serialization is wacky, and doesn't call the default
				// constructor.
				__isset_bit_vector = new BitSet(1);
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class authComment_argsStandardSchemeFactory implements
				SchemeFactory {
			@Override
			public authComment_argsStandardScheme getScheme() {
				return new authComment_argsStandardScheme();
			}
		}

		private static class authComment_argsStandardScheme extends
				StandardScheme<authComment_args> {

			@Override
			public void read(org.apache.thrift.protocol.TProtocol iprot,
					authComment_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // ID
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.id = iprot.readI32();
							struct.setIdIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 2: // AUTH_DONE
						if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
							struct.authDone = iprot.readBool();
							struct.setAuthDoneIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			@Override
			public void write(org.apache.thrift.protocol.TProtocol oprot,
					authComment_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldBegin(ID_FIELD_DESC);
				oprot.writeI32(struct.id);
				oprot.writeFieldEnd();
				oprot.writeFieldBegin(AUTH_DONE_FIELD_DESC);
				oprot.writeBool(struct.authDone);
				oprot.writeFieldEnd();
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class authComment_argsTupleSchemeFactory implements
				SchemeFactory {
			@Override
			public authComment_argsTupleScheme getScheme() {
				return new authComment_argsTupleScheme();
			}
		}

		private static class authComment_argsTupleScheme extends
				TupleScheme<authComment_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					authComment_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetId()) {
					optionals.set(0);
				}
				if (struct.isSetAuthDone()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetId()) {
					oprot.writeI32(struct.id);
				}
				if (struct.isSetAuthDone()) {
					oprot.writeBool(struct.authDone);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot,
					authComment_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.id = iprot.readI32();
					struct.setIdIsSet(true);
				}
				if (incoming.get(1)) {
					struct.authDone = iprot.readBool();
					struct.setAuthDoneIsSet(true);
				}
			}
		}

	}

	public static class authComment_result
			implements
			org.apache.thrift.TBase<authComment_result, authComment_result._Fields>,
			java.io.Serializable, Cloneable {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"authComment_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.BOOL, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new authComment_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new authComment_resultTupleSchemeFactory());
		}

		public boolean success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			@Override
			public short getThriftFieldId() {
				return _thriftId;
			}

			@Override
			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __SUCCESS_ISSET_ID = 0;
		private BitSet __isset_bit_vector = new BitSet(1);
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.BOOL)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					authComment_result.class, metaDataMap);
		}

		public authComment_result() {
		}

		public authComment_result(boolean success) {
			this();
			this.success = success;
			setSuccessIsSet(true);
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public authComment_result(authComment_result other) {
			__isset_bit_vector.clear();
			__isset_bit_vector.or(other.__isset_bit_vector);
			this.success = other.success;
		}

		@Override
		public authComment_result deepCopy() {
			return new authComment_result(this);
		}

		@Override
		public void clear() {
			setSuccessIsSet(false);
			this.success = false;
		}

		public boolean isSuccess() {
			return this.success;
		}

		public authComment_result setSuccess(boolean success) {
			this.success = success;
			setSuccessIsSet(true);
			return this;
		}

		public void unsetSuccess() {
			__isset_bit_vector.clear(__SUCCESS_ISSET_ID);
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
		}

		public void setSuccessIsSet(boolean value) {
			__isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
		}

		@Override
		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Boolean) value);
				}
				break;

			}
		}

		@Override
		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return Boolean.valueOf(isSuccess());

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		@Override
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof authComment_result)
				return this.equals((authComment_result) that);
			return false;
		}

		public boolean equals(authComment_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true;
			boolean that_present_success = true;
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (this.success != that.success)
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			return 0;
		}

		@Override
		public int compareTo(authComment_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;
			authComment_result typedOther = other;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
					typedOther.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.success, typedOther.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@Override
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		@Override
		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("authComment_result(");

			sb.append("success:");
			sb.append(this.success);

			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class authComment_resultStandardSchemeFactory implements
				SchemeFactory {
			@Override
			public authComment_resultStandardScheme getScheme() {
				return new authComment_resultStandardScheme();
			}
		}

		private static class authComment_resultStandardScheme extends
				StandardScheme<authComment_result> {

			@Override
			public void read(org.apache.thrift.protocol.TProtocol iprot,
					authComment_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
							struct.success = iprot.readBool();
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			@Override
			public void write(org.apache.thrift.protocol.TProtocol oprot,
					authComment_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
				oprot.writeBool(struct.success);
				oprot.writeFieldEnd();
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class authComment_resultTupleSchemeFactory implements
				SchemeFactory {
			@Override
			public authComment_resultTupleScheme getScheme() {
				return new authComment_resultTupleScheme();
			}
		}

		private static class authComment_resultTupleScheme extends
				TupleScheme<authComment_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					authComment_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeBool(struct.success);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot,
					authComment_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = iprot.readBool();
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class reportComment_args
			implements
			org.apache.thrift.TBase<reportComment_args, reportComment_args._Fields>,
			java.io.Serializable, Cloneable {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"reportComment_args");

		private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"id", org.apache.thrift.protocol.TType.I32, (short) 1);
		private static final org.apache.thrift.protocol.TField HIDE_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"hide", org.apache.thrift.protocol.TType.BOOL, (short) 2);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new reportComment_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new reportComment_argsTupleSchemeFactory());
		}

		public int id; // required
		public boolean hide; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			ID((short) 1, "id"), HIDE((short) 2, "hide");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // ID
					return ID;
				case 2: // HIDE
					return HIDE;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			@Override
			public short getThriftFieldId() {
				return _thriftId;
			}

			@Override
			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __ID_ISSET_ID = 0;
		private static final int __HIDE_ISSET_ID = 1;
		private BitSet __isset_bit_vector = new BitSet(2);
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.ID,
					new org.apache.thrift.meta_data.FieldMetaData("id",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.I32)));
			tmpMap.put(_Fields.HIDE,
					new org.apache.thrift.meta_data.FieldMetaData("hide",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.BOOL)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					reportComment_args.class, metaDataMap);
		}

		public reportComment_args() {
		}

		public reportComment_args(int id, boolean hide) {
			this();
			this.id = id;
			setIdIsSet(true);
			this.hide = hide;
			setHideIsSet(true);
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public reportComment_args(reportComment_args other) {
			__isset_bit_vector.clear();
			__isset_bit_vector.or(other.__isset_bit_vector);
			this.id = other.id;
			this.hide = other.hide;
		}

		@Override
		public reportComment_args deepCopy() {
			return new reportComment_args(this);
		}

		@Override
		public void clear() {
			setIdIsSet(false);
			this.id = 0;
			setHideIsSet(false);
			this.hide = false;
		}

		public int getId() {
			return this.id;
		}

		public reportComment_args setId(int id) {
			this.id = id;
			setIdIsSet(true);
			return this;
		}

		public void unsetId() {
			__isset_bit_vector.clear(__ID_ISSET_ID);
		}

		/**
		 * Returns true if field id is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetId() {
			return __isset_bit_vector.get(__ID_ISSET_ID);
		}

		public void setIdIsSet(boolean value) {
			__isset_bit_vector.set(__ID_ISSET_ID, value);
		}

		public boolean isHide() {
			return this.hide;
		}

		public reportComment_args setHide(boolean hide) {
			this.hide = hide;
			setHideIsSet(true);
			return this;
		}

		public void unsetHide() {
			__isset_bit_vector.clear(__HIDE_ISSET_ID);
		}

		/**
		 * Returns true if field hide is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetHide() {
			return __isset_bit_vector.get(__HIDE_ISSET_ID);
		}

		public void setHideIsSet(boolean value) {
			__isset_bit_vector.set(__HIDE_ISSET_ID, value);
		}

		@Override
		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case ID:
				if (value == null) {
					unsetId();
				} else {
					setId((Integer) value);
				}
				break;

			case HIDE:
				if (value == null) {
					unsetHide();
				} else {
					setHide((Boolean) value);
				}
				break;

			}
		}

		@Override
		public Object getFieldValue(_Fields field) {
			switch (field) {
			case ID:
				return Integer.valueOf(getId());

			case HIDE:
				return Boolean.valueOf(isHide());

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		@Override
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case ID:
				return isSetId();
			case HIDE:
				return isSetHide();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof reportComment_args)
				return this.equals((reportComment_args) that);
			return false;
		}

		public boolean equals(reportComment_args that) {
			if (that == null)
				return false;

			boolean this_present_id = true;
			boolean that_present_id = true;
			if (this_present_id || that_present_id) {
				if (!(this_present_id && that_present_id))
					return false;
				if (this.id != that.id)
					return false;
			}

			boolean this_present_hide = true;
			boolean that_present_hide = true;
			if (this_present_hide || that_present_hide) {
				if (!(this_present_hide && that_present_hide))
					return false;
				if (this.hide != that.hide)
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			return 0;
		}

		@Override
		public int compareTo(reportComment_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;
			reportComment_args typedOther = other;

			lastComparison = Boolean.valueOf(isSetId()).compareTo(
					typedOther.isSetId());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetId()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.id, typedOther.id);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetHide()).compareTo(
					typedOther.isSetHide());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetHide()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.hide, typedOther.hide);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@Override
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		@Override
		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("reportComment_args(");
			boolean first = true;

			sb.append("id:");
			sb.append(this.id);
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("hide:");
			sb.append(this.hide);
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java
				// serialization is wacky, and doesn't call the default
				// constructor.
				__isset_bit_vector = new BitSet(1);
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class reportComment_argsStandardSchemeFactory implements
				SchemeFactory {
			@Override
			public reportComment_argsStandardScheme getScheme() {
				return new reportComment_argsStandardScheme();
			}
		}

		private static class reportComment_argsStandardScheme extends
				StandardScheme<reportComment_args> {

			@Override
			public void read(org.apache.thrift.protocol.TProtocol iprot,
					reportComment_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // ID
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.id = iprot.readI32();
							struct.setIdIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 2: // HIDE
						if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
							struct.hide = iprot.readBool();
							struct.setHideIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			@Override
			public void write(org.apache.thrift.protocol.TProtocol oprot,
					reportComment_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldBegin(ID_FIELD_DESC);
				oprot.writeI32(struct.id);
				oprot.writeFieldEnd();
				oprot.writeFieldBegin(HIDE_FIELD_DESC);
				oprot.writeBool(struct.hide);
				oprot.writeFieldEnd();
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class reportComment_argsTupleSchemeFactory implements
				SchemeFactory {
			@Override
			public reportComment_argsTupleScheme getScheme() {
				return new reportComment_argsTupleScheme();
			}
		}

		private static class reportComment_argsTupleScheme extends
				TupleScheme<reportComment_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					reportComment_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetId()) {
					optionals.set(0);
				}
				if (struct.isSetHide()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetId()) {
					oprot.writeI32(struct.id);
				}
				if (struct.isSetHide()) {
					oprot.writeBool(struct.hide);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot,
					reportComment_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.id = iprot.readI32();
					struct.setIdIsSet(true);
				}
				if (incoming.get(1)) {
					struct.hide = iprot.readBool();
					struct.setHideIsSet(true);
				}
			}
		}

	}

	public static class reportComment_result
			implements
			org.apache.thrift.TBase<reportComment_result, reportComment_result._Fields>,
			java.io.Serializable, Cloneable {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"reportComment_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.BOOL, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new reportComment_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new reportComment_resultTupleSchemeFactory());
		}

		public boolean success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			@Override
			public short getThriftFieldId() {
				return _thriftId;
			}

			@Override
			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __SUCCESS_ISSET_ID = 0;
		private BitSet __isset_bit_vector = new BitSet(1);
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.BOOL)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					reportComment_result.class, metaDataMap);
		}

		public reportComment_result() {
		}

		public reportComment_result(boolean success) {
			this();
			this.success = success;
			setSuccessIsSet(true);
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public reportComment_result(reportComment_result other) {
			__isset_bit_vector.clear();
			__isset_bit_vector.or(other.__isset_bit_vector);
			this.success = other.success;
		}

		@Override
		public reportComment_result deepCopy() {
			return new reportComment_result(this);
		}

		@Override
		public void clear() {
			setSuccessIsSet(false);
			this.success = false;
		}

		public boolean isSuccess() {
			return this.success;
		}

		public reportComment_result setSuccess(boolean success) {
			this.success = success;
			setSuccessIsSet(true);
			return this;
		}

		public void unsetSuccess() {
			__isset_bit_vector.clear(__SUCCESS_ISSET_ID);
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
		}

		public void setSuccessIsSet(boolean value) {
			__isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
		}

		@Override
		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Boolean) value);
				}
				break;

			}
		}

		@Override
		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return Boolean.valueOf(isSuccess());

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		@Override
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof reportComment_result)
				return this.equals((reportComment_result) that);
			return false;
		}

		public boolean equals(reportComment_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true;
			boolean that_present_success = true;
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (this.success != that.success)
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			return 0;
		}

		@Override
		public int compareTo(reportComment_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;
			reportComment_result typedOther = other;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
					typedOther.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.success, typedOther.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@Override
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		@Override
		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("reportComment_result(");

			sb.append("success:");
			sb.append(this.success);

			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class reportComment_resultStandardSchemeFactory
				implements SchemeFactory {
			@Override
			public reportComment_resultStandardScheme getScheme() {
				return new reportComment_resultStandardScheme();
			}
		}

		private static class reportComment_resultStandardScheme extends
				StandardScheme<reportComment_result> {

			@Override
			public void read(org.apache.thrift.protocol.TProtocol iprot,
					reportComment_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
							struct.success = iprot.readBool();
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			@Override
			public void write(org.apache.thrift.protocol.TProtocol oprot,
					reportComment_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
				oprot.writeBool(struct.success);
				oprot.writeFieldEnd();
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class reportComment_resultTupleSchemeFactory implements
				SchemeFactory {
			@Override
			public reportComment_resultTupleScheme getScheme() {
				return new reportComment_resultTupleScheme();
			}
		}

		private static class reportComment_resultTupleScheme extends
				TupleScheme<reportComment_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					reportComment_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeBool(struct.success);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot,
					reportComment_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = iprot.readBool();
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class createCommentPoint_args
			implements
			org.apache.thrift.TBase<createCommentPoint_args, createCommentPoint_args._Fields>,
			java.io.Serializable, Cloneable {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"createCommentPoint_args");

		private static final org.apache.thrift.protocol.TField POINT_FORM_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"pointForm", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new createCommentPoint_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new createCommentPoint_argsTupleSchemeFactory());
		}

		public TCommentPointForm pointForm; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			POINT_FORM((short) 1, "pointForm");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // POINT_FORM
					return POINT_FORM;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			@Override
			public short getThriftFieldId() {
				return _thriftId;
			}

			@Override
			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.POINT_FORM,
					new org.apache.thrift.meta_data.FieldMetaData("pointForm",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(
									org.apache.thrift.protocol.TType.STRUCT,
									TCommentPointForm.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					createCommentPoint_args.class, metaDataMap);
		}

		public createCommentPoint_args() {
		}

		public createCommentPoint_args(TCommentPointForm pointForm) {
			this();
			this.pointForm = pointForm;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public createCommentPoint_args(createCommentPoint_args other) {
			if (other.isSetPointForm()) {
				this.pointForm = new TCommentPointForm(other.pointForm);
			}
		}

		@Override
		public createCommentPoint_args deepCopy() {
			return new createCommentPoint_args(this);
		}

		@Override
		public void clear() {
			this.pointForm = null;
		}

		public TCommentPointForm getPointForm() {
			return this.pointForm;
		}

		public createCommentPoint_args setPointForm(TCommentPointForm pointForm) {
			this.pointForm = pointForm;
			return this;
		}

		public void unsetPointForm() {
			this.pointForm = null;
		}

		/**
		 * Returns true if field pointForm is set (has been assigned a value)
		 * and false otherwise
		 */
		public boolean isSetPointForm() {
			return this.pointForm != null;
		}

		public void setPointFormIsSet(boolean value) {
			if (!value) {
				this.pointForm = null;
			}
		}

		@Override
		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case POINT_FORM:
				if (value == null) {
					unsetPointForm();
				} else {
					setPointForm((TCommentPointForm) value);
				}
				break;

			}
		}

		@Override
		public Object getFieldValue(_Fields field) {
			switch (field) {
			case POINT_FORM:
				return getPointForm();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		@Override
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case POINT_FORM:
				return isSetPointForm();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof createCommentPoint_args)
				return this.equals((createCommentPoint_args) that);
			return false;
		}

		public boolean equals(createCommentPoint_args that) {
			if (that == null)
				return false;

			boolean this_present_pointForm = true && this.isSetPointForm();
			boolean that_present_pointForm = true && that.isSetPointForm();
			if (this_present_pointForm || that_present_pointForm) {
				if (!(this_present_pointForm && that_present_pointForm))
					return false;
				if (!this.pointForm.equals(that.pointForm))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			return 0;
		}

		@Override
		public int compareTo(createCommentPoint_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;
			createCommentPoint_args typedOther = other;

			lastComparison = Boolean.valueOf(isSetPointForm()).compareTo(
					typedOther.isSetPointForm());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetPointForm()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.pointForm, typedOther.pointForm);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@Override
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		@Override
		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("createCommentPoint_args(");

			sb.append("pointForm:");
			if (this.pointForm == null) {
				sb.append("null");
			} else {
				sb.append(this.pointForm);
			}

			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class createCommentPoint_argsStandardSchemeFactory
				implements SchemeFactory {
			@Override
			public createCommentPoint_argsStandardScheme getScheme() {
				return new createCommentPoint_argsStandardScheme();
			}
		}

		private static class createCommentPoint_argsStandardScheme extends
				StandardScheme<createCommentPoint_args> {

			@Override
			public void read(org.apache.thrift.protocol.TProtocol iprot,
					createCommentPoint_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // POINT_FORM
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.pointForm = new TCommentPointForm();
							struct.pointForm.read(iprot);
							struct.setPointFormIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			@Override
			public void write(org.apache.thrift.protocol.TProtocol oprot,
					createCommentPoint_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.pointForm != null) {
					oprot.writeFieldBegin(POINT_FORM_FIELD_DESC);
					struct.pointForm.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class createCommentPoint_argsTupleSchemeFactory
				implements SchemeFactory {
			@Override
			public createCommentPoint_argsTupleScheme getScheme() {
				return new createCommentPoint_argsTupleScheme();
			}
		}

		private static class createCommentPoint_argsTupleScheme extends
				TupleScheme<createCommentPoint_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					createCommentPoint_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetPointForm()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetPointForm()) {
					struct.pointForm.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot,
					createCommentPoint_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.pointForm = new TCommentPointForm();
					struct.pointForm.read(iprot);
					struct.setPointFormIsSet(true);
				}
			}
		}

	}

	public static class createCommentPoint_result
			implements
			org.apache.thrift.TBase<createCommentPoint_result, createCommentPoint_result._Fields>,
			java.io.Serializable, Cloneable {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"createCommentPoint_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.I32, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new createCommentPoint_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new createCommentPoint_resultTupleSchemeFactory());
		}

		public int success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			@Override
			public short getThriftFieldId() {
				return _thriftId;
			}

			@Override
			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __SUCCESS_ISSET_ID = 0;
		private BitSet __isset_bit_vector = new BitSet(1);
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.I32)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					createCommentPoint_result.class, metaDataMap);
		}

		public createCommentPoint_result() {
		}

		public createCommentPoint_result(int success) {
			this();
			this.success = success;
			setSuccessIsSet(true);
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public createCommentPoint_result(createCommentPoint_result other) {
			__isset_bit_vector.clear();
			__isset_bit_vector.or(other.__isset_bit_vector);
			this.success = other.success;
		}

		@Override
		public createCommentPoint_result deepCopy() {
			return new createCommentPoint_result(this);
		}

		@Override
		public void clear() {
			setSuccessIsSet(false);
			this.success = 0;
		}

		public int getSuccess() {
			return this.success;
		}

		public createCommentPoint_result setSuccess(int success) {
			this.success = success;
			setSuccessIsSet(true);
			return this;
		}

		public void unsetSuccess() {
			__isset_bit_vector.clear(__SUCCESS_ISSET_ID);
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
		}

		public void setSuccessIsSet(boolean value) {
			__isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
		}

		@Override
		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Integer) value);
				}
				break;

			}
		}

		@Override
		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return Integer.valueOf(getSuccess());

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		@Override
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof createCommentPoint_result)
				return this.equals((createCommentPoint_result) that);
			return false;
		}

		public boolean equals(createCommentPoint_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true;
			boolean that_present_success = true;
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (this.success != that.success)
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			return 0;
		}

		@Override
		public int compareTo(createCommentPoint_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;
			createCommentPoint_result typedOther = other;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
					typedOther.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.success, typedOther.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@Override
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		@Override
		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("createCommentPoint_result(");

			sb.append("success:");
			sb.append(this.success);

			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class createCommentPoint_resultStandardSchemeFactory
				implements SchemeFactory {
			@Override
			public createCommentPoint_resultStandardScheme getScheme() {
				return new createCommentPoint_resultStandardScheme();
			}
		}

		private static class createCommentPoint_resultStandardScheme extends
				StandardScheme<createCommentPoint_result> {

			@Override
			public void read(org.apache.thrift.protocol.TProtocol iprot,
					createCommentPoint_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.success = iprot.readI32();
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			@Override
			public void write(org.apache.thrift.protocol.TProtocol oprot,
					createCommentPoint_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
				oprot.writeI32(struct.success);
				oprot.writeFieldEnd();
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class createCommentPoint_resultTupleSchemeFactory
				implements SchemeFactory {
			@Override
			public createCommentPoint_resultTupleScheme getScheme() {
				return new createCommentPoint_resultTupleScheme();
			}
		}

		private static class createCommentPoint_resultTupleScheme extends
				TupleScheme<createCommentPoint_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					createCommentPoint_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeI32(struct.success);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot,
					createCommentPoint_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = iprot.readI32();
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class updateCommentPoint_args
			implements
			org.apache.thrift.TBase<updateCommentPoint_args, updateCommentPoint_args._Fields>,
			java.io.Serializable, Cloneable {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"updateCommentPoint_args");

		private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"id", org.apache.thrift.protocol.TType.I32, (short) 1);
		private static final org.apache.thrift.protocol.TField POINT_FORM_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"pointForm", org.apache.thrift.protocol.TType.STRUCT, (short) 2);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new updateCommentPoint_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new updateCommentPoint_argsTupleSchemeFactory());
		}

		public int id; // required
		public TCommentPointForm pointForm; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			ID((short) 1, "id"), POINT_FORM((short) 2, "pointForm");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // ID
					return ID;
				case 2: // POINT_FORM
					return POINT_FORM;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			@Override
			public short getThriftFieldId() {
				return _thriftId;
			}

			@Override
			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __ID_ISSET_ID = 0;
		private BitSet __isset_bit_vector = new BitSet(1);
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.ID,
					new org.apache.thrift.meta_data.FieldMetaData("id",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.I32)));
			tmpMap.put(_Fields.POINT_FORM,
					new org.apache.thrift.meta_data.FieldMetaData("pointForm",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(
									org.apache.thrift.protocol.TType.STRUCT,
									TCommentPointForm.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					updateCommentPoint_args.class, metaDataMap);
		}

		public updateCommentPoint_args() {
		}

		public updateCommentPoint_args(int id, TCommentPointForm pointForm) {
			this();
			this.id = id;
			setIdIsSet(true);
			this.pointForm = pointForm;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public updateCommentPoint_args(updateCommentPoint_args other) {
			__isset_bit_vector.clear();
			__isset_bit_vector.or(other.__isset_bit_vector);
			this.id = other.id;
			if (other.isSetPointForm()) {
				this.pointForm = new TCommentPointForm(other.pointForm);
			}
		}

		@Override
		public updateCommentPoint_args deepCopy() {
			return new updateCommentPoint_args(this);
		}

		@Override
		public void clear() {
			setIdIsSet(false);
			this.id = 0;
			this.pointForm = null;
		}

		public int getId() {
			return this.id;
		}

		public updateCommentPoint_args setId(int id) {
			this.id = id;
			setIdIsSet(true);
			return this;
		}

		public void unsetId() {
			__isset_bit_vector.clear(__ID_ISSET_ID);
		}

		/**
		 * Returns true if field id is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetId() {
			return __isset_bit_vector.get(__ID_ISSET_ID);
		}

		public void setIdIsSet(boolean value) {
			__isset_bit_vector.set(__ID_ISSET_ID, value);
		}

		public TCommentPointForm getPointForm() {
			return this.pointForm;
		}

		public updateCommentPoint_args setPointForm(TCommentPointForm pointForm) {
			this.pointForm = pointForm;
			return this;
		}

		public void unsetPointForm() {
			this.pointForm = null;
		}

		/**
		 * Returns true if field pointForm is set (has been assigned a value)
		 * and false otherwise
		 */
		public boolean isSetPointForm() {
			return this.pointForm != null;
		}

		public void setPointFormIsSet(boolean value) {
			if (!value) {
				this.pointForm = null;
			}
		}

		@Override
		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case ID:
				if (value == null) {
					unsetId();
				} else {
					setId((Integer) value);
				}
				break;

			case POINT_FORM:
				if (value == null) {
					unsetPointForm();
				} else {
					setPointForm((TCommentPointForm) value);
				}
				break;

			}
		}

		@Override
		public Object getFieldValue(_Fields field) {
			switch (field) {
			case ID:
				return Integer.valueOf(getId());

			case POINT_FORM:
				return getPointForm();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		@Override
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case ID:
				return isSetId();
			case POINT_FORM:
				return isSetPointForm();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof updateCommentPoint_args)
				return this.equals((updateCommentPoint_args) that);
			return false;
		}

		public boolean equals(updateCommentPoint_args that) {
			if (that == null)
				return false;

			boolean this_present_id = true;
			boolean that_present_id = true;
			if (this_present_id || that_present_id) {
				if (!(this_present_id && that_present_id))
					return false;
				if (this.id != that.id)
					return false;
			}

			boolean this_present_pointForm = true && this.isSetPointForm();
			boolean that_present_pointForm = true && that.isSetPointForm();
			if (this_present_pointForm || that_present_pointForm) {
				if (!(this_present_pointForm && that_present_pointForm))
					return false;
				if (!this.pointForm.equals(that.pointForm))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			return 0;
		}

		@Override
		public int compareTo(updateCommentPoint_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;
			updateCommentPoint_args typedOther = other;

			lastComparison = Boolean.valueOf(isSetId()).compareTo(
					typedOther.isSetId());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetId()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.id, typedOther.id);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetPointForm()).compareTo(
					typedOther.isSetPointForm());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetPointForm()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.pointForm, typedOther.pointForm);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@Override
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		@Override
		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("updateCommentPoint_args(");
			boolean first = true;

			sb.append("id:");
			sb.append(this.id);
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("pointForm:");
			if (this.pointForm == null) {
				sb.append("null");
			} else {
				sb.append(this.pointForm);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java
				// serialization is wacky, and doesn't call the default
				// constructor.
				__isset_bit_vector = new BitSet(1);
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class updateCommentPoint_argsStandardSchemeFactory
				implements SchemeFactory {
			@Override
			public updateCommentPoint_argsStandardScheme getScheme() {
				return new updateCommentPoint_argsStandardScheme();
			}
		}

		private static class updateCommentPoint_argsStandardScheme extends
				StandardScheme<updateCommentPoint_args> {

			@Override
			public void read(org.apache.thrift.protocol.TProtocol iprot,
					updateCommentPoint_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // ID
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.id = iprot.readI32();
							struct.setIdIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 2: // POINT_FORM
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.pointForm = new TCommentPointForm();
							struct.pointForm.read(iprot);
							struct.setPointFormIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			@Override
			public void write(org.apache.thrift.protocol.TProtocol oprot,
					updateCommentPoint_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldBegin(ID_FIELD_DESC);
				oprot.writeI32(struct.id);
				oprot.writeFieldEnd();
				if (struct.pointForm != null) {
					oprot.writeFieldBegin(POINT_FORM_FIELD_DESC);
					struct.pointForm.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class updateCommentPoint_argsTupleSchemeFactory
				implements SchemeFactory {
			@Override
			public updateCommentPoint_argsTupleScheme getScheme() {
				return new updateCommentPoint_argsTupleScheme();
			}
		}

		private static class updateCommentPoint_argsTupleScheme extends
				TupleScheme<updateCommentPoint_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					updateCommentPoint_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetId()) {
					optionals.set(0);
				}
				if (struct.isSetPointForm()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetId()) {
					oprot.writeI32(struct.id);
				}
				if (struct.isSetPointForm()) {
					struct.pointForm.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot,
					updateCommentPoint_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.id = iprot.readI32();
					struct.setIdIsSet(true);
				}
				if (incoming.get(1)) {
					struct.pointForm = new TCommentPointForm();
					struct.pointForm.read(iprot);
					struct.setPointFormIsSet(true);
				}
			}
		}

	}

	public static class updateCommentPoint_result
			implements
			org.apache.thrift.TBase<updateCommentPoint_result, updateCommentPoint_result._Fields>,
			java.io.Serializable, Cloneable {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"updateCommentPoint_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.BOOL, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new updateCommentPoint_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new updateCommentPoint_resultTupleSchemeFactory());
		}

		public boolean success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			@Override
			public short getThriftFieldId() {
				return _thriftId;
			}

			@Override
			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __SUCCESS_ISSET_ID = 0;
		private BitSet __isset_bit_vector = new BitSet(1);
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.BOOL)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					updateCommentPoint_result.class, metaDataMap);
		}

		public updateCommentPoint_result() {
		}

		public updateCommentPoint_result(boolean success) {
			this();
			this.success = success;
			setSuccessIsSet(true);
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public updateCommentPoint_result(updateCommentPoint_result other) {
			__isset_bit_vector.clear();
			__isset_bit_vector.or(other.__isset_bit_vector);
			this.success = other.success;
		}

		@Override
		public updateCommentPoint_result deepCopy() {
			return new updateCommentPoint_result(this);
		}

		@Override
		public void clear() {
			setSuccessIsSet(false);
			this.success = false;
		}

		public boolean isSuccess() {
			return this.success;
		}

		public updateCommentPoint_result setSuccess(boolean success) {
			this.success = success;
			setSuccessIsSet(true);
			return this;
		}

		public void unsetSuccess() {
			__isset_bit_vector.clear(__SUCCESS_ISSET_ID);
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
		}

		public void setSuccessIsSet(boolean value) {
			__isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
		}

		@Override
		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Boolean) value);
				}
				break;

			}
		}

		@Override
		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return Boolean.valueOf(isSuccess());

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		@Override
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof updateCommentPoint_result)
				return this.equals((updateCommentPoint_result) that);
			return false;
		}

		public boolean equals(updateCommentPoint_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true;
			boolean that_present_success = true;
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (this.success != that.success)
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			return 0;
		}

		@Override
		public int compareTo(updateCommentPoint_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;
			updateCommentPoint_result typedOther = other;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
					typedOther.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.success, typedOther.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@Override
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		@Override
		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("updateCommentPoint_result(");

			sb.append("success:");
			sb.append(this.success);

			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class updateCommentPoint_resultStandardSchemeFactory
				implements SchemeFactory {
			@Override
			public updateCommentPoint_resultStandardScheme getScheme() {
				return new updateCommentPoint_resultStandardScheme();
			}
		}

		private static class updateCommentPoint_resultStandardScheme extends
				StandardScheme<updateCommentPoint_result> {

			@Override
			public void read(org.apache.thrift.protocol.TProtocol iprot,
					updateCommentPoint_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
							struct.success = iprot.readBool();
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			@Override
			public void write(org.apache.thrift.protocol.TProtocol oprot,
					updateCommentPoint_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
				oprot.writeBool(struct.success);
				oprot.writeFieldEnd();
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class updateCommentPoint_resultTupleSchemeFactory
				implements SchemeFactory {
			@Override
			public updateCommentPoint_resultTupleScheme getScheme() {
				return new updateCommentPoint_resultTupleScheme();
			}
		}

		private static class updateCommentPoint_resultTupleScheme extends
				TupleScheme<updateCommentPoint_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					updateCommentPoint_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeBool(struct.success);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot,
					updateCommentPoint_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = iprot.readBool();
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class deleteCommentPoint_args
			implements
			org.apache.thrift.TBase<deleteCommentPoint_args, deleteCommentPoint_args._Fields>,
			java.io.Serializable, Cloneable {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"deleteCommentPoint_args");

		private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"id", org.apache.thrift.protocol.TType.I32, (short) 1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new deleteCommentPoint_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new deleteCommentPoint_argsTupleSchemeFactory());
		}

		public int id; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			ID((short) 1, "id");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // ID
					return ID;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			@Override
			public short getThriftFieldId() {
				return _thriftId;
			}

			@Override
			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __ID_ISSET_ID = 0;
		private BitSet __isset_bit_vector = new BitSet(1);
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.ID,
					new org.apache.thrift.meta_data.FieldMetaData("id",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.I32)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					deleteCommentPoint_args.class, metaDataMap);
		}

		public deleteCommentPoint_args() {
		}

		public deleteCommentPoint_args(int id) {
			this();
			this.id = id;
			setIdIsSet(true);
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public deleteCommentPoint_args(deleteCommentPoint_args other) {
			__isset_bit_vector.clear();
			__isset_bit_vector.or(other.__isset_bit_vector);
			this.id = other.id;
		}

		@Override
		public deleteCommentPoint_args deepCopy() {
			return new deleteCommentPoint_args(this);
		}

		@Override
		public void clear() {
			setIdIsSet(false);
			this.id = 0;
		}

		public int getId() {
			return this.id;
		}

		public deleteCommentPoint_args setId(int id) {
			this.id = id;
			setIdIsSet(true);
			return this;
		}

		public void unsetId() {
			__isset_bit_vector.clear(__ID_ISSET_ID);
		}

		/**
		 * Returns true if field id is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetId() {
			return __isset_bit_vector.get(__ID_ISSET_ID);
		}

		public void setIdIsSet(boolean value) {
			__isset_bit_vector.set(__ID_ISSET_ID, value);
		}

		@Override
		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case ID:
				if (value == null) {
					unsetId();
				} else {
					setId((Integer) value);
				}
				break;

			}
		}

		@Override
		public Object getFieldValue(_Fields field) {
			switch (field) {
			case ID:
				return Integer.valueOf(getId());

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		@Override
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case ID:
				return isSetId();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof deleteCommentPoint_args)
				return this.equals((deleteCommentPoint_args) that);
			return false;
		}

		public boolean equals(deleteCommentPoint_args that) {
			if (that == null)
				return false;

			boolean this_present_id = true;
			boolean that_present_id = true;
			if (this_present_id || that_present_id) {
				if (!(this_present_id && that_present_id))
					return false;
				if (this.id != that.id)
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			return 0;
		}

		@Override
		public int compareTo(deleteCommentPoint_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;
			deleteCommentPoint_args typedOther = other;

			lastComparison = Boolean.valueOf(isSetId()).compareTo(
					typedOther.isSetId());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetId()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.id, typedOther.id);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@Override
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		@Override
		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("deleteCommentPoint_args(");

			sb.append("id:");
			sb.append(this.id);

			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java
				// serialization is wacky, and doesn't call the default
				// constructor.
				__isset_bit_vector = new BitSet(1);
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class deleteCommentPoint_argsStandardSchemeFactory
				implements SchemeFactory {
			@Override
			public deleteCommentPoint_argsStandardScheme getScheme() {
				return new deleteCommentPoint_argsStandardScheme();
			}
		}

		private static class deleteCommentPoint_argsStandardScheme extends
				StandardScheme<deleteCommentPoint_args> {

			@Override
			public void read(org.apache.thrift.protocol.TProtocol iprot,
					deleteCommentPoint_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // ID
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.id = iprot.readI32();
							struct.setIdIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			@Override
			public void write(org.apache.thrift.protocol.TProtocol oprot,
					deleteCommentPoint_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldBegin(ID_FIELD_DESC);
				oprot.writeI32(struct.id);
				oprot.writeFieldEnd();
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class deleteCommentPoint_argsTupleSchemeFactory
				implements SchemeFactory {
			@Override
			public deleteCommentPoint_argsTupleScheme getScheme() {
				return new deleteCommentPoint_argsTupleScheme();
			}
		}

		private static class deleteCommentPoint_argsTupleScheme extends
				TupleScheme<deleteCommentPoint_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					deleteCommentPoint_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetId()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetId()) {
					oprot.writeI32(struct.id);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot,
					deleteCommentPoint_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.id = iprot.readI32();
					struct.setIdIsSet(true);
				}
			}
		}

	}

	public static class deleteCommentPoint_result
			implements
			org.apache.thrift.TBase<deleteCommentPoint_result, deleteCommentPoint_result._Fields>,
			java.io.Serializable, Cloneable {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"deleteCommentPoint_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.BOOL, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new deleteCommentPoint_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new deleteCommentPoint_resultTupleSchemeFactory());
		}

		public boolean success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			@Override
			public short getThriftFieldId() {
				return _thriftId;
			}

			@Override
			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __SUCCESS_ISSET_ID = 0;
		private BitSet __isset_bit_vector = new BitSet(1);
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.BOOL)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					deleteCommentPoint_result.class, metaDataMap);
		}

		public deleteCommentPoint_result() {
		}

		public deleteCommentPoint_result(boolean success) {
			this();
			this.success = success;
			setSuccessIsSet(true);
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public deleteCommentPoint_result(deleteCommentPoint_result other) {
			__isset_bit_vector.clear();
			__isset_bit_vector.or(other.__isset_bit_vector);
			this.success = other.success;
		}

		@Override
		public deleteCommentPoint_result deepCopy() {
			return new deleteCommentPoint_result(this);
		}

		@Override
		public void clear() {
			setSuccessIsSet(false);
			this.success = false;
		}

		public boolean isSuccess() {
			return this.success;
		}

		public deleteCommentPoint_result setSuccess(boolean success) {
			this.success = success;
			setSuccessIsSet(true);
			return this;
		}

		public void unsetSuccess() {
			__isset_bit_vector.clear(__SUCCESS_ISSET_ID);
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
		}

		public void setSuccessIsSet(boolean value) {
			__isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
		}

		@Override
		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Boolean) value);
				}
				break;

			}
		}

		@Override
		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return Boolean.valueOf(isSuccess());

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		@Override
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof deleteCommentPoint_result)
				return this.equals((deleteCommentPoint_result) that);
			return false;
		}

		public boolean equals(deleteCommentPoint_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true;
			boolean that_present_success = true;
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (this.success != that.success)
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			return 0;
		}

		@Override
		public int compareTo(deleteCommentPoint_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;
			deleteCommentPoint_result typedOther = other;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
					typedOther.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.success, typedOther.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@Override
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		@Override
		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("deleteCommentPoint_result(");

			sb.append("success:");
			sb.append(this.success);

			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class deleteCommentPoint_resultStandardSchemeFactory
				implements SchemeFactory {
			@Override
			public deleteCommentPoint_resultStandardScheme getScheme() {
				return new deleteCommentPoint_resultStandardScheme();
			}
		}

		private static class deleteCommentPoint_resultStandardScheme extends
				StandardScheme<deleteCommentPoint_result> {

			@Override
			public void read(org.apache.thrift.protocol.TProtocol iprot,
					deleteCommentPoint_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
							struct.success = iprot.readBool();
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			@Override
			public void write(org.apache.thrift.protocol.TProtocol oprot,
					deleteCommentPoint_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
				oprot.writeBool(struct.success);
				oprot.writeFieldEnd();
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class deleteCommentPoint_resultTupleSchemeFactory
				implements SchemeFactory {
			@Override
			public deleteCommentPoint_resultTupleScheme getScheme() {
				return new deleteCommentPoint_resultTupleScheme();
			}
		}

		private static class deleteCommentPoint_resultTupleScheme extends
				TupleScheme<deleteCommentPoint_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					deleteCommentPoint_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeBool(struct.success);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot,
					deleteCommentPoint_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = iprot.readBool();
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class getCommentPoint_args
			implements
			org.apache.thrift.TBase<getCommentPoint_args, getCommentPoint_args._Fields>,
			java.io.Serializable, Cloneable {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getCommentPoint_args");

		private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"id", org.apache.thrift.protocol.TType.I32, (short) 1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new getCommentPoint_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new getCommentPoint_argsTupleSchemeFactory());
		}

		public int id; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			ID((short) 1, "id");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // ID
					return ID;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			@Override
			public short getThriftFieldId() {
				return _thriftId;
			}

			@Override
			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __ID_ISSET_ID = 0;
		private BitSet __isset_bit_vector = new BitSet(1);
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.ID,
					new org.apache.thrift.meta_data.FieldMetaData("id",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.I32)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					getCommentPoint_args.class, metaDataMap);
		}

		public getCommentPoint_args() {
		}

		public getCommentPoint_args(int id) {
			this();
			this.id = id;
			setIdIsSet(true);
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getCommentPoint_args(getCommentPoint_args other) {
			__isset_bit_vector.clear();
			__isset_bit_vector.or(other.__isset_bit_vector);
			this.id = other.id;
		}

		@Override
		public getCommentPoint_args deepCopy() {
			return new getCommentPoint_args(this);
		}

		@Override
		public void clear() {
			setIdIsSet(false);
			this.id = 0;
		}

		public int getId() {
			return this.id;
		}

		public getCommentPoint_args setId(int id) {
			this.id = id;
			setIdIsSet(true);
			return this;
		}

		public void unsetId() {
			__isset_bit_vector.clear(__ID_ISSET_ID);
		}

		/**
		 * Returns true if field id is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetId() {
			return __isset_bit_vector.get(__ID_ISSET_ID);
		}

		public void setIdIsSet(boolean value) {
			__isset_bit_vector.set(__ID_ISSET_ID, value);
		}

		@Override
		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case ID:
				if (value == null) {
					unsetId();
				} else {
					setId((Integer) value);
				}
				break;

			}
		}

		@Override
		public Object getFieldValue(_Fields field) {
			switch (field) {
			case ID:
				return Integer.valueOf(getId());

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		@Override
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case ID:
				return isSetId();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof getCommentPoint_args)
				return this.equals((getCommentPoint_args) that);
			return false;
		}

		public boolean equals(getCommentPoint_args that) {
			if (that == null)
				return false;

			boolean this_present_id = true;
			boolean that_present_id = true;
			if (this_present_id || that_present_id) {
				if (!(this_present_id && that_present_id))
					return false;
				if (this.id != that.id)
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			return 0;
		}

		@Override
		public int compareTo(getCommentPoint_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;
			getCommentPoint_args typedOther = other;

			lastComparison = Boolean.valueOf(isSetId()).compareTo(
					typedOther.isSetId());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetId()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.id, typedOther.id);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@Override
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		@Override
		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("getCommentPoint_args(");

			sb.append("id:");
			sb.append(this.id);

			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java
				// serialization is wacky, and doesn't call the default
				// constructor.
				__isset_bit_vector = new BitSet(1);
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getCommentPoint_argsStandardSchemeFactory
				implements SchemeFactory {
			@Override
			public getCommentPoint_argsStandardScheme getScheme() {
				return new getCommentPoint_argsStandardScheme();
			}
		}

		private static class getCommentPoint_argsStandardScheme extends
				StandardScheme<getCommentPoint_args> {

			@Override
			public void read(org.apache.thrift.protocol.TProtocol iprot,
					getCommentPoint_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // ID
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.id = iprot.readI32();
							struct.setIdIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			@Override
			public void write(org.apache.thrift.protocol.TProtocol oprot,
					getCommentPoint_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldBegin(ID_FIELD_DESC);
				oprot.writeI32(struct.id);
				oprot.writeFieldEnd();
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getCommentPoint_argsTupleSchemeFactory implements
				SchemeFactory {
			@Override
			public getCommentPoint_argsTupleScheme getScheme() {
				return new getCommentPoint_argsTupleScheme();
			}
		}

		private static class getCommentPoint_argsTupleScheme extends
				TupleScheme<getCommentPoint_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					getCommentPoint_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetId()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetId()) {
					oprot.writeI32(struct.id);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot,
					getCommentPoint_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.id = iprot.readI32();
					struct.setIdIsSet(true);
				}
			}
		}

	}

	public static class getCommentPoint_result
			implements
			org.apache.thrift.TBase<getCommentPoint_result, getCommentPoint_result._Fields>,
			java.io.Serializable, Cloneable {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getCommentPoint_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new getCommentPoint_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new getCommentPoint_resultTupleSchemeFactory());
		}

		public TCommentPoint success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			@Override
			public short getThriftFieldId() {
				return _thriftId;
			}

			@Override
			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(
									org.apache.thrift.protocol.TType.STRUCT,
									TCommentPoint.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					getCommentPoint_result.class, metaDataMap);
		}

		public getCommentPoint_result() {
		}

		public getCommentPoint_result(TCommentPoint success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getCommentPoint_result(getCommentPoint_result other) {
			if (other.isSetSuccess()) {
				this.success = new TCommentPoint(other.success);
			}
		}

		@Override
		public getCommentPoint_result deepCopy() {
			return new getCommentPoint_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public TCommentPoint getSuccess() {
			return this.success;
		}

		public getCommentPoint_result setSuccess(TCommentPoint success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@Override
		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((TCommentPoint) value);
				}
				break;

			}
		}

		@Override
		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		@Override
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof getCommentPoint_result)
				return this.equals((getCommentPoint_result) that);
			return false;
		}

		public boolean equals(getCommentPoint_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			return 0;
		}

		@Override
		public int compareTo(getCommentPoint_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;
			getCommentPoint_result typedOther = other;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
					typedOther.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.success, typedOther.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@Override
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		@Override
		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("getCommentPoint_result(");

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}

			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getCommentPoint_resultStandardSchemeFactory
				implements SchemeFactory {
			@Override
			public getCommentPoint_resultStandardScheme getScheme() {
				return new getCommentPoint_resultStandardScheme();
			}
		}

		private static class getCommentPoint_resultStandardScheme extends
				StandardScheme<getCommentPoint_result> {

			@Override
			public void read(org.apache.thrift.protocol.TProtocol iprot,
					getCommentPoint_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new TCommentPoint();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			@Override
			public void write(org.apache.thrift.protocol.TProtocol oprot,
					getCommentPoint_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getCommentPoint_resultTupleSchemeFactory implements
				SchemeFactory {
			@Override
			public getCommentPoint_resultTupleScheme getScheme() {
				return new getCommentPoint_resultTupleScheme();
			}
		}

		private static class getCommentPoint_resultTupleScheme extends
				TupleScheme<getCommentPoint_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					getCommentPoint_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot,
					getCommentPoint_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new TCommentPoint();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class getCommentPointByName_args
			implements
			org.apache.thrift.TBase<getCommentPointByName_args, getCommentPointByName_args._Fields>,
			java.io.Serializable, Cloneable {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getCommentPointByName_args");

		private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"name", org.apache.thrift.protocol.TType.STRING, (short) 1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new getCommentPointByName_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new getCommentPointByName_argsTupleSchemeFactory());
		}

		public String name; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			NAME((short) 1, "name");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // NAME
					return NAME;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			@Override
			public short getThriftFieldId() {
				return _thriftId;
			}

			@Override
			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.NAME,
					new org.apache.thrift.meta_data.FieldMetaData("name",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					getCommentPointByName_args.class, metaDataMap);
		}

		public getCommentPointByName_args() {
		}

		public getCommentPointByName_args(String name) {
			this();
			this.name = name;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getCommentPointByName_args(getCommentPointByName_args other) {
			if (other.isSetName()) {
				this.name = other.name;
			}
		}

		@Override
		public getCommentPointByName_args deepCopy() {
			return new getCommentPointByName_args(this);
		}

		@Override
		public void clear() {
			this.name = null;
		}

		public String getName() {
			return this.name;
		}

		public getCommentPointByName_args setName(String name) {
			this.name = name;
			return this;
		}

		public void unsetName() {
			this.name = null;
		}

		/**
		 * Returns true if field name is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetName() {
			return this.name != null;
		}

		public void setNameIsSet(boolean value) {
			if (!value) {
				this.name = null;
			}
		}

		@Override
		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case NAME:
				if (value == null) {
					unsetName();
				} else {
					setName((String) value);
				}
				break;

			}
		}

		@Override
		public Object getFieldValue(_Fields field) {
			switch (field) {
			case NAME:
				return getName();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		@Override
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case NAME:
				return isSetName();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof getCommentPointByName_args)
				return this.equals((getCommentPointByName_args) that);
			return false;
		}

		public boolean equals(getCommentPointByName_args that) {
			if (that == null)
				return false;

			boolean this_present_name = true && this.isSetName();
			boolean that_present_name = true && that.isSetName();
			if (this_present_name || that_present_name) {
				if (!(this_present_name && that_present_name))
					return false;
				if (!this.name.equals(that.name))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			return 0;
		}

		@Override
		public int compareTo(getCommentPointByName_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;
			getCommentPointByName_args typedOther = other;

			lastComparison = Boolean.valueOf(isSetName()).compareTo(
					typedOther.isSetName());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetName()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.name, typedOther.name);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@Override
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		@Override
		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("getCommentPointByName_args(");

			sb.append("name:");
			if (this.name == null) {
				sb.append("null");
			} else {
				sb.append(this.name);
			}

			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getCommentPointByName_argsStandardSchemeFactory
				implements SchemeFactory {
			@Override
			public getCommentPointByName_argsStandardScheme getScheme() {
				return new getCommentPointByName_argsStandardScheme();
			}
		}

		private static class getCommentPointByName_argsStandardScheme extends
				StandardScheme<getCommentPointByName_args> {

			@Override
			public void read(org.apache.thrift.protocol.TProtocol iprot,
					getCommentPointByName_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // NAME
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.name = iprot.readString();
							struct.setNameIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			@Override
			public void write(org.apache.thrift.protocol.TProtocol oprot,
					getCommentPointByName_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.name != null) {
					oprot.writeFieldBegin(NAME_FIELD_DESC);
					oprot.writeString(struct.name);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getCommentPointByName_argsTupleSchemeFactory
				implements SchemeFactory {
			@Override
			public getCommentPointByName_argsTupleScheme getScheme() {
				return new getCommentPointByName_argsTupleScheme();
			}
		}

		private static class getCommentPointByName_argsTupleScheme extends
				TupleScheme<getCommentPointByName_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					getCommentPointByName_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetName()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetName()) {
					oprot.writeString(struct.name);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot,
					getCommentPointByName_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.name = iprot.readString();
					struct.setNameIsSet(true);
				}
			}
		}

	}

	public static class getCommentPointByName_result
			implements
			org.apache.thrift.TBase<getCommentPointByName_result, getCommentPointByName_result._Fields>,
			java.io.Serializable, Cloneable {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getCommentPointByName_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new getCommentPointByName_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new getCommentPointByName_resultTupleSchemeFactory());
		}

		public TCommentPoint success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			@Override
			public short getThriftFieldId() {
				return _thriftId;
			}

			@Override
			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(
									org.apache.thrift.protocol.TType.STRUCT,
									TCommentPoint.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					getCommentPointByName_result.class, metaDataMap);
		}

		public getCommentPointByName_result() {
		}

		public getCommentPointByName_result(TCommentPoint success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getCommentPointByName_result(getCommentPointByName_result other) {
			if (other.isSetSuccess()) {
				this.success = new TCommentPoint(other.success);
			}
		}

		@Override
		public getCommentPointByName_result deepCopy() {
			return new getCommentPointByName_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public TCommentPoint getSuccess() {
			return this.success;
		}

		public getCommentPointByName_result setSuccess(TCommentPoint success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@Override
		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((TCommentPoint) value);
				}
				break;

			}
		}

		@Override
		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		@Override
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof getCommentPointByName_result)
				return this.equals((getCommentPointByName_result) that);
			return false;
		}

		public boolean equals(getCommentPointByName_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			return 0;
		}

		@Override
		public int compareTo(getCommentPointByName_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;
			getCommentPointByName_result typedOther = other;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
					typedOther.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.success, typedOther.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@Override
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		@Override
		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder(
					"getCommentPointByName_result(");

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}

			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getCommentPointByName_resultStandardSchemeFactory
				implements SchemeFactory {
			@Override
			public getCommentPointByName_resultStandardScheme getScheme() {
				return new getCommentPointByName_resultStandardScheme();
			}
		}

		private static class getCommentPointByName_resultStandardScheme extends
				StandardScheme<getCommentPointByName_result> {

			@Override
			public void read(org.apache.thrift.protocol.TProtocol iprot,
					getCommentPointByName_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new TCommentPoint();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			@Override
			public void write(org.apache.thrift.protocol.TProtocol oprot,
					getCommentPointByName_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getCommentPointByName_resultTupleSchemeFactory
				implements SchemeFactory {
			@Override
			public getCommentPointByName_resultTupleScheme getScheme() {
				return new getCommentPointByName_resultTupleScheme();
			}
		}

		private static class getCommentPointByName_resultTupleScheme extends
				TupleScheme<getCommentPointByName_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					getCommentPointByName_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot,
					getCommentPointByName_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new TCommentPoint();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class searchCommentPoint_args
			implements
			org.apache.thrift.TBase<searchCommentPoint_args, searchCommentPoint_args._Fields>,
			java.io.Serializable, Cloneable {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"searchCommentPoint_args");

		private static final org.apache.thrift.protocol.TField FORM_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"form", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new searchCommentPoint_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new searchCommentPoint_argsTupleSchemeFactory());
		}

		public TSearchCommentPointForm form; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			FORM((short) 1, "form");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // FORM
					return FORM;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			@Override
			public short getThriftFieldId() {
				return _thriftId;
			}

			@Override
			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.FORM,
					new org.apache.thrift.meta_data.FieldMetaData("form",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(
									org.apache.thrift.protocol.TType.STRUCT,
									TSearchCommentPointForm.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					searchCommentPoint_args.class, metaDataMap);
		}

		public searchCommentPoint_args() {
		}

		public searchCommentPoint_args(TSearchCommentPointForm form) {
			this();
			this.form = form;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public searchCommentPoint_args(searchCommentPoint_args other) {
			if (other.isSetForm()) {
				this.form = new TSearchCommentPointForm(other.form);
			}
		}

		@Override
		public searchCommentPoint_args deepCopy() {
			return new searchCommentPoint_args(this);
		}

		@Override
		public void clear() {
			this.form = null;
		}

		public TSearchCommentPointForm getForm() {
			return this.form;
		}

		public searchCommentPoint_args setForm(TSearchCommentPointForm form) {
			this.form = form;
			return this;
		}

		public void unsetForm() {
			this.form = null;
		}

		/**
		 * Returns true if field form is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetForm() {
			return this.form != null;
		}

		public void setFormIsSet(boolean value) {
			if (!value) {
				this.form = null;
			}
		}

		@Override
		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case FORM:
				if (value == null) {
					unsetForm();
				} else {
					setForm((TSearchCommentPointForm) value);
				}
				break;

			}
		}

		@Override
		public Object getFieldValue(_Fields field) {
			switch (field) {
			case FORM:
				return getForm();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		@Override
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case FORM:
				return isSetForm();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof searchCommentPoint_args)
				return this.equals((searchCommentPoint_args) that);
			return false;
		}

		public boolean equals(searchCommentPoint_args that) {
			if (that == null)
				return false;

			boolean this_present_form = true && this.isSetForm();
			boolean that_present_form = true && that.isSetForm();
			if (this_present_form || that_present_form) {
				if (!(this_present_form && that_present_form))
					return false;
				if (!this.form.equals(that.form))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			return 0;
		}

		@Override
		public int compareTo(searchCommentPoint_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;
			searchCommentPoint_args typedOther = other;

			lastComparison = Boolean.valueOf(isSetForm()).compareTo(
					typedOther.isSetForm());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetForm()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.form, typedOther.form);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@Override
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		@Override
		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("searchCommentPoint_args(");

			sb.append("form:");
			if (this.form == null) {
				sb.append("null");
			} else {
				sb.append(this.form);
			}

			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class searchCommentPoint_argsStandardSchemeFactory
				implements SchemeFactory {
			@Override
			public searchCommentPoint_argsStandardScheme getScheme() {
				return new searchCommentPoint_argsStandardScheme();
			}
		}

		private static class searchCommentPoint_argsStandardScheme extends
				StandardScheme<searchCommentPoint_args> {

			@Override
			public void read(org.apache.thrift.protocol.TProtocol iprot,
					searchCommentPoint_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // FORM
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.form = new TSearchCommentPointForm();
							struct.form.read(iprot);
							struct.setFormIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			@Override
			public void write(org.apache.thrift.protocol.TProtocol oprot,
					searchCommentPoint_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.form != null) {
					oprot.writeFieldBegin(FORM_FIELD_DESC);
					struct.form.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class searchCommentPoint_argsTupleSchemeFactory
				implements SchemeFactory {
			@Override
			public searchCommentPoint_argsTupleScheme getScheme() {
				return new searchCommentPoint_argsTupleScheme();
			}
		}

		private static class searchCommentPoint_argsTupleScheme extends
				TupleScheme<searchCommentPoint_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					searchCommentPoint_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetForm()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetForm()) {
					struct.form.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot,
					searchCommentPoint_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.form = new TSearchCommentPointForm();
					struct.form.read(iprot);
					struct.setFormIsSet(true);
				}
			}
		}

	}

	public static class searchCommentPoint_result
			implements
			org.apache.thrift.TBase<searchCommentPoint_result, searchCommentPoint_result._Fields>,
			java.io.Serializable, Cloneable {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"searchCommentPoint_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new searchCommentPoint_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new searchCommentPoint_resultTupleSchemeFactory());
		}

		public TCommentPointSearchResult success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			@Override
			public short getThriftFieldId() {
				return _thriftId;
			}

			@Override
			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(
									org.apache.thrift.protocol.TType.STRUCT,
									TCommentPointSearchResult.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					searchCommentPoint_result.class, metaDataMap);
		}

		public searchCommentPoint_result() {
		}

		public searchCommentPoint_result(TCommentPointSearchResult success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public searchCommentPoint_result(searchCommentPoint_result other) {
			if (other.isSetSuccess()) {
				this.success = new TCommentPointSearchResult(other.success);
			}
		}

		@Override
		public searchCommentPoint_result deepCopy() {
			return new searchCommentPoint_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public TCommentPointSearchResult getSuccess() {
			return this.success;
		}

		public searchCommentPoint_result setSuccess(
				TCommentPointSearchResult success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@Override
		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((TCommentPointSearchResult) value);
				}
				break;

			}
		}

		@Override
		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		@Override
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof searchCommentPoint_result)
				return this.equals((searchCommentPoint_result) that);
			return false;
		}

		public boolean equals(searchCommentPoint_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			return 0;
		}

		@Override
		public int compareTo(searchCommentPoint_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;
			searchCommentPoint_result typedOther = other;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
					typedOther.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.success, typedOther.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@Override
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		@Override
		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("searchCommentPoint_result(");

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}

			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class searchCommentPoint_resultStandardSchemeFactory
				implements SchemeFactory {
			@Override
			public searchCommentPoint_resultStandardScheme getScheme() {
				return new searchCommentPoint_resultStandardScheme();
			}
		}

		private static class searchCommentPoint_resultStandardScheme extends
				StandardScheme<searchCommentPoint_result> {

			@Override
			public void read(org.apache.thrift.protocol.TProtocol iprot,
					searchCommentPoint_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new TCommentPointSearchResult();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			@Override
			public void write(org.apache.thrift.protocol.TProtocol oprot,
					searchCommentPoint_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class searchCommentPoint_resultTupleSchemeFactory
				implements SchemeFactory {
			@Override
			public searchCommentPoint_resultTupleScheme getScheme() {
				return new searchCommentPoint_resultTupleScheme();
			}
		}

		private static class searchCommentPoint_resultTupleScheme extends
				TupleScheme<searchCommentPoint_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					searchCommentPoint_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot,
					searchCommentPoint_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new TCommentPointSearchResult();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class getHome_args implements
			org.apache.thrift.TBase<getHome_args, getHome_args._Fields>,
			java.io.Serializable, Cloneable {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getHome_args");

		private static final org.apache.thrift.protocol.TField POINT_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"point", org.apache.thrift.protocol.TType.STRING, (short) 1);
		private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"pageSize", org.apache.thrift.protocol.TType.I32, (short) 2);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new getHome_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new getHome_argsTupleSchemeFactory());
		}

		public String point; // required
		public int pageSize; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			POINT((short) 1, "point"), PAGE_SIZE((short) 2, "pageSize");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // POINT
					return POINT;
				case 2: // PAGE_SIZE
					return PAGE_SIZE;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			@Override
			public short getThriftFieldId() {
				return _thriftId;
			}

			@Override
			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __PAGESIZE_ISSET_ID = 0;
		private BitSet __isset_bit_vector = new BitSet(1);
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.POINT,
					new org.apache.thrift.meta_data.FieldMetaData("point",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.PAGE_SIZE,
					new org.apache.thrift.meta_data.FieldMetaData("pageSize",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.I32)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					getHome_args.class, metaDataMap);
		}

		public getHome_args() {
		}

		public getHome_args(String point, int pageSize) {
			this();
			this.point = point;
			this.pageSize = pageSize;
			setPageSizeIsSet(true);
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getHome_args(getHome_args other) {
			__isset_bit_vector.clear();
			__isset_bit_vector.or(other.__isset_bit_vector);
			if (other.isSetPoint()) {
				this.point = other.point;
			}
			this.pageSize = other.pageSize;
		}

		@Override
		public getHome_args deepCopy() {
			return new getHome_args(this);
		}

		@Override
		public void clear() {
			this.point = null;
			setPageSizeIsSet(false);
			this.pageSize = 0;
		}

		public String getPoint() {
			return this.point;
		}

		public getHome_args setPoint(String point) {
			this.point = point;
			return this;
		}

		public void unsetPoint() {
			this.point = null;
		}

		/**
		 * Returns true if field point is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetPoint() {
			return this.point != null;
		}

		public void setPointIsSet(boolean value) {
			if (!value) {
				this.point = null;
			}
		}

		public int getPageSize() {
			return this.pageSize;
		}

		public getHome_args setPageSize(int pageSize) {
			this.pageSize = pageSize;
			setPageSizeIsSet(true);
			return this;
		}

		public void unsetPageSize() {
			__isset_bit_vector.clear(__PAGESIZE_ISSET_ID);
		}

		/**
		 * Returns true if field pageSize is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetPageSize() {
			return __isset_bit_vector.get(__PAGESIZE_ISSET_ID);
		}

		public void setPageSizeIsSet(boolean value) {
			__isset_bit_vector.set(__PAGESIZE_ISSET_ID, value);
		}

		@Override
		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case POINT:
				if (value == null) {
					unsetPoint();
				} else {
					setPoint((String) value);
				}
				break;

			case PAGE_SIZE:
				if (value == null) {
					unsetPageSize();
				} else {
					setPageSize((Integer) value);
				}
				break;

			}
		}

		@Override
		public Object getFieldValue(_Fields field) {
			switch (field) {
			case POINT:
				return getPoint();

			case PAGE_SIZE:
				return Integer.valueOf(getPageSize());

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		@Override
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case POINT:
				return isSetPoint();
			case PAGE_SIZE:
				return isSetPageSize();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof getHome_args)
				return this.equals((getHome_args) that);
			return false;
		}

		public boolean equals(getHome_args that) {
			if (that == null)
				return false;

			boolean this_present_point = true && this.isSetPoint();
			boolean that_present_point = true && that.isSetPoint();
			if (this_present_point || that_present_point) {
				if (!(this_present_point && that_present_point))
					return false;
				if (!this.point.equals(that.point))
					return false;
			}

			boolean this_present_pageSize = true;
			boolean that_present_pageSize = true;
			if (this_present_pageSize || that_present_pageSize) {
				if (!(this_present_pageSize && that_present_pageSize))
					return false;
				if (this.pageSize != that.pageSize)
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			return 0;
		}

		@Override
		public int compareTo(getHome_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;
			getHome_args typedOther = other;

			lastComparison = Boolean.valueOf(isSetPoint()).compareTo(
					typedOther.isSetPoint());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetPoint()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.point, typedOther.point);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(
					typedOther.isSetPageSize());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetPageSize()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.pageSize, typedOther.pageSize);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@Override
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		@Override
		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("getHome_args(");
			boolean first = true;

			sb.append("point:");
			if (this.point == null) {
				sb.append("null");
			} else {
				sb.append(this.point);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("pageSize:");
			sb.append(this.pageSize);
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java
				// serialization is wacky, and doesn't call the default
				// constructor.
				__isset_bit_vector = new BitSet(1);
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getHome_argsStandardSchemeFactory implements
				SchemeFactory {
			@Override
			public getHome_argsStandardScheme getScheme() {
				return new getHome_argsStandardScheme();
			}
		}

		private static class getHome_argsStandardScheme extends
				StandardScheme<getHome_args> {

			@Override
			public void read(org.apache.thrift.protocol.TProtocol iprot,
					getHome_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // POINT
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.point = iprot.readString();
							struct.setPointIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 2: // PAGE_SIZE
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.pageSize = iprot.readI32();
							struct.setPageSizeIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			@Override
			public void write(org.apache.thrift.protocol.TProtocol oprot,
					getHome_args struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.point != null) {
					oprot.writeFieldBegin(POINT_FIELD_DESC);
					oprot.writeString(struct.point);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
				oprot.writeI32(struct.pageSize);
				oprot.writeFieldEnd();
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getHome_argsTupleSchemeFactory implements
				SchemeFactory {
			@Override
			public getHome_argsTupleScheme getScheme() {
				return new getHome_argsTupleScheme();
			}
		}

		private static class getHome_argsTupleScheme extends
				TupleScheme<getHome_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					getHome_args struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetPoint()) {
					optionals.set(0);
				}
				if (struct.isSetPageSize()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetPoint()) {
					oprot.writeString(struct.point);
				}
				if (struct.isSetPageSize()) {
					oprot.writeI32(struct.pageSize);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot,
					getHome_args struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.point = iprot.readString();
					struct.setPointIsSet(true);
				}
				if (incoming.get(1)) {
					struct.pageSize = iprot.readI32();
					struct.setPageSizeIsSet(true);
				}
			}
		}

	}

	public static class getHome_result implements
			org.apache.thrift.TBase<getHome_result, getHome_result._Fields>,
			java.io.Serializable, Cloneable {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getHome_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new getHome_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new getHome_resultTupleSchemeFactory());
		}

		public TCommentHome success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			@Override
			public short getThriftFieldId() {
				return _thriftId;
			}

			@Override
			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(
									org.apache.thrift.protocol.TType.STRUCT,
									TCommentHome.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					getHome_result.class, metaDataMap);
		}

		public getHome_result() {
		}

		public getHome_result(TCommentHome success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getHome_result(getHome_result other) {
			if (other.isSetSuccess()) {
				this.success = new TCommentHome(other.success);
			}
		}

		@Override
		public getHome_result deepCopy() {
			return new getHome_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public TCommentHome getSuccess() {
			return this.success;
		}

		public getHome_result setSuccess(TCommentHome success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@Override
		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((TCommentHome) value);
				}
				break;

			}
		}

		@Override
		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		@Override
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof getHome_result)
				return this.equals((getHome_result) that);
			return false;
		}

		public boolean equals(getHome_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			return 0;
		}

		@Override
		public int compareTo(getHome_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;
			getHome_result typedOther = other;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
					typedOther.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.success, typedOther.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@Override
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		@Override
		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("getHome_result(");

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}

			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getHome_resultStandardSchemeFactory implements
				SchemeFactory {
			@Override
			public getHome_resultStandardScheme getScheme() {
				return new getHome_resultStandardScheme();
			}
		}

		private static class getHome_resultStandardScheme extends
				StandardScheme<getHome_result> {

			@Override
			public void read(org.apache.thrift.protocol.TProtocol iprot,
					getHome_result struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new TCommentHome();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			@Override
			public void write(org.apache.thrift.protocol.TProtocol oprot,
					getHome_result struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getHome_resultTupleSchemeFactory implements
				SchemeFactory {
			@Override
			public getHome_resultTupleScheme getScheme() {
				return new getHome_resultTupleScheme();
			}
		}

		private static class getHome_resultTupleScheme extends
				TupleScheme<getHome_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					getHome_result struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot,
					getHome_result struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new TCommentHome();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

}
