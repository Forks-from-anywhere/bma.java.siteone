/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package bma.siteone.comments.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TCacheForm implements org.apache.thrift.TBase<TCacheForm, TCacheForm._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TCacheForm");

  private static final org.apache.thrift.protocol.TField COMMENT_POINT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("commentPointId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField COMMENT_POINT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("commentPointName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CACHE_FIELD_DESC = new org.apache.thrift.protocol.TField("cache", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField COMMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("commentId", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TCacheFormStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TCacheFormTupleSchemeFactory());
  }

  public int commentPointId; // optional
  public String commentPointName; // optional
  public String cache; // optional
  public int commentId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COMMENT_POINT_ID((short)1, "commentPointId"),
    COMMENT_POINT_NAME((short)2, "commentPointName"),
    CACHE((short)3, "cache"),
    COMMENT_ID((short)4, "commentId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COMMENT_POINT_ID
          return COMMENT_POINT_ID;
        case 2: // COMMENT_POINT_NAME
          return COMMENT_POINT_NAME;
        case 3: // CACHE
          return CACHE;
        case 4: // COMMENT_ID
          return COMMENT_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COMMENTPOINTID_ISSET_ID = 0;
  private static final int __COMMENTID_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);
  private _Fields optionals[] = {_Fields.COMMENT_POINT_ID,_Fields.COMMENT_POINT_NAME,_Fields.CACHE,_Fields.COMMENT_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COMMENT_POINT_ID, new org.apache.thrift.meta_data.FieldMetaData("commentPointId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMMENT_POINT_NAME, new org.apache.thrift.meta_data.FieldMetaData("commentPointName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CACHE, new org.apache.thrift.meta_data.FieldMetaData("cache", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("commentId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TCacheForm.class, metaDataMap);
  }

  public TCacheForm() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TCacheForm(TCacheForm other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.commentPointId = other.commentPointId;
    if (other.isSetCommentPointName()) {
      this.commentPointName = other.commentPointName;
    }
    if (other.isSetCache()) {
      this.cache = other.cache;
    }
    this.commentId = other.commentId;
  }

  public TCacheForm deepCopy() {
    return new TCacheForm(this);
  }

  @Override
  public void clear() {
    setCommentPointIdIsSet(false);
    this.commentPointId = 0;
    this.commentPointName = null;
    this.cache = null;
    setCommentIdIsSet(false);
    this.commentId = 0;
  }

  public int getCommentPointId() {
    return this.commentPointId;
  }

  public TCacheForm setCommentPointId(int commentPointId) {
    this.commentPointId = commentPointId;
    setCommentPointIdIsSet(true);
    return this;
  }

  public void unsetCommentPointId() {
    __isset_bit_vector.clear(__COMMENTPOINTID_ISSET_ID);
  }

  /** Returns true if field commentPointId is set (has been assigned a value) and false otherwise */
  public boolean isSetCommentPointId() {
    return __isset_bit_vector.get(__COMMENTPOINTID_ISSET_ID);
  }

  public void setCommentPointIdIsSet(boolean value) {
    __isset_bit_vector.set(__COMMENTPOINTID_ISSET_ID, value);
  }

  public String getCommentPointName() {
    return this.commentPointName;
  }

  public TCacheForm setCommentPointName(String commentPointName) {
    this.commentPointName = commentPointName;
    return this;
  }

  public void unsetCommentPointName() {
    this.commentPointName = null;
  }

  /** Returns true if field commentPointName is set (has been assigned a value) and false otherwise */
  public boolean isSetCommentPointName() {
    return this.commentPointName != null;
  }

  public void setCommentPointNameIsSet(boolean value) {
    if (!value) {
      this.commentPointName = null;
    }
  }

  public String getCache() {
    return this.cache;
  }

  public TCacheForm setCache(String cache) {
    this.cache = cache;
    return this;
  }

  public void unsetCache() {
    this.cache = null;
  }

  /** Returns true if field cache is set (has been assigned a value) and false otherwise */
  public boolean isSetCache() {
    return this.cache != null;
  }

  public void setCacheIsSet(boolean value) {
    if (!value) {
      this.cache = null;
    }
  }

  public int getCommentId() {
    return this.commentId;
  }

  public TCacheForm setCommentId(int commentId) {
    this.commentId = commentId;
    setCommentIdIsSet(true);
    return this;
  }

  public void unsetCommentId() {
    __isset_bit_vector.clear(__COMMENTID_ISSET_ID);
  }

  /** Returns true if field commentId is set (has been assigned a value) and false otherwise */
  public boolean isSetCommentId() {
    return __isset_bit_vector.get(__COMMENTID_ISSET_ID);
  }

  public void setCommentIdIsSet(boolean value) {
    __isset_bit_vector.set(__COMMENTID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COMMENT_POINT_ID:
      if (value == null) {
        unsetCommentPointId();
      } else {
        setCommentPointId((Integer)value);
      }
      break;

    case COMMENT_POINT_NAME:
      if (value == null) {
        unsetCommentPointName();
      } else {
        setCommentPointName((String)value);
      }
      break;

    case CACHE:
      if (value == null) {
        unsetCache();
      } else {
        setCache((String)value);
      }
      break;

    case COMMENT_ID:
      if (value == null) {
        unsetCommentId();
      } else {
        setCommentId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COMMENT_POINT_ID:
      return Integer.valueOf(getCommentPointId());

    case COMMENT_POINT_NAME:
      return getCommentPointName();

    case CACHE:
      return getCache();

    case COMMENT_ID:
      return Integer.valueOf(getCommentId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COMMENT_POINT_ID:
      return isSetCommentPointId();
    case COMMENT_POINT_NAME:
      return isSetCommentPointName();
    case CACHE:
      return isSetCache();
    case COMMENT_ID:
      return isSetCommentId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TCacheForm)
      return this.equals((TCacheForm)that);
    return false;
  }

  public boolean equals(TCacheForm that) {
    if (that == null)
      return false;

    boolean this_present_commentPointId = true && this.isSetCommentPointId();
    boolean that_present_commentPointId = true && that.isSetCommentPointId();
    if (this_present_commentPointId || that_present_commentPointId) {
      if (!(this_present_commentPointId && that_present_commentPointId))
        return false;
      if (this.commentPointId != that.commentPointId)
        return false;
    }

    boolean this_present_commentPointName = true && this.isSetCommentPointName();
    boolean that_present_commentPointName = true && that.isSetCommentPointName();
    if (this_present_commentPointName || that_present_commentPointName) {
      if (!(this_present_commentPointName && that_present_commentPointName))
        return false;
      if (!this.commentPointName.equals(that.commentPointName))
        return false;
    }

    boolean this_present_cache = true && this.isSetCache();
    boolean that_present_cache = true && that.isSetCache();
    if (this_present_cache || that_present_cache) {
      if (!(this_present_cache && that_present_cache))
        return false;
      if (!this.cache.equals(that.cache))
        return false;
    }

    boolean this_present_commentId = true && this.isSetCommentId();
    boolean that_present_commentId = true && that.isSetCommentId();
    if (this_present_commentId || that_present_commentId) {
      if (!(this_present_commentId && that_present_commentId))
        return false;
      if (this.commentId != that.commentId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TCacheForm other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TCacheForm typedOther = (TCacheForm)other;

    lastComparison = Boolean.valueOf(isSetCommentPointId()).compareTo(typedOther.isSetCommentPointId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommentPointId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentPointId, typedOther.commentPointId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommentPointName()).compareTo(typedOther.isSetCommentPointName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommentPointName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentPointName, typedOther.commentPointName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCache()).compareTo(typedOther.isSetCache());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCache()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cache, typedOther.cache);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommentId()).compareTo(typedOther.isSetCommentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentId, typedOther.commentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TCacheForm(");
    boolean first = true;

    if (isSetCommentPointId()) {
      sb.append("commentPointId:");
      sb.append(this.commentPointId);
      first = false;
    }
    if (isSetCommentPointName()) {
      if (!first) sb.append(", ");
      sb.append("commentPointName:");
      if (this.commentPointName == null) {
        sb.append("null");
      } else {
        sb.append(this.commentPointName);
      }
      first = false;
    }
    if (isSetCache()) {
      if (!first) sb.append(", ");
      sb.append("cache:");
      if (this.cache == null) {
        sb.append("null");
      } else {
        sb.append(this.cache);
      }
      first = false;
    }
    if (isSetCommentId()) {
      if (!first) sb.append(", ");
      sb.append("commentId:");
      sb.append(this.commentId);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TCacheFormStandardSchemeFactory implements SchemeFactory {
    public TCacheFormStandardScheme getScheme() {
      return new TCacheFormStandardScheme();
    }
  }

  private static class TCacheFormStandardScheme extends StandardScheme<TCacheForm> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TCacheForm struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COMMENT_POINT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.commentPointId = iprot.readI32();
              struct.setCommentPointIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COMMENT_POINT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.commentPointName = iprot.readString();
              struct.setCommentPointNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CACHE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cache = iprot.readString();
              struct.setCacheIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COMMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.commentId = iprot.readI32();
              struct.setCommentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TCacheForm struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetCommentPointId()) {
        oprot.writeFieldBegin(COMMENT_POINT_ID_FIELD_DESC);
        oprot.writeI32(struct.commentPointId);
        oprot.writeFieldEnd();
      }
      if (struct.commentPointName != null) {
        if (struct.isSetCommentPointName()) {
          oprot.writeFieldBegin(COMMENT_POINT_NAME_FIELD_DESC);
          oprot.writeString(struct.commentPointName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cache != null) {
        if (struct.isSetCache()) {
          oprot.writeFieldBegin(CACHE_FIELD_DESC);
          oprot.writeString(struct.cache);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCommentId()) {
        oprot.writeFieldBegin(COMMENT_ID_FIELD_DESC);
        oprot.writeI32(struct.commentId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TCacheFormTupleSchemeFactory implements SchemeFactory {
    public TCacheFormTupleScheme getScheme() {
      return new TCacheFormTupleScheme();
    }
  }

  private static class TCacheFormTupleScheme extends TupleScheme<TCacheForm> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TCacheForm struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCommentPointId()) {
        optionals.set(0);
      }
      if (struct.isSetCommentPointName()) {
        optionals.set(1);
      }
      if (struct.isSetCache()) {
        optionals.set(2);
      }
      if (struct.isSetCommentId()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetCommentPointId()) {
        oprot.writeI32(struct.commentPointId);
      }
      if (struct.isSetCommentPointName()) {
        oprot.writeString(struct.commentPointName);
      }
      if (struct.isSetCache()) {
        oprot.writeString(struct.cache);
      }
      if (struct.isSetCommentId()) {
        oprot.writeI32(struct.commentId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TCacheForm struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.commentPointId = iprot.readI32();
        struct.setCommentPointIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.commentPointName = iprot.readString();
        struct.setCommentPointNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.cache = iprot.readString();
        struct.setCacheIsSet(true);
      }
      if (incoming.get(3)) {
        struct.commentId = iprot.readI32();
        struct.setCommentIdIsSet(true);
      }
    }
  }

}

