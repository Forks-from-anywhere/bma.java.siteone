/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package bma.siteone.comments.thrift;

import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;

import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

public class TCommentPointForm implements
		org.apache.thrift.TBase<TCommentPointForm, TCommentPointForm._Fields>,
		java.io.Serializable, Cloneable {
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"TCommentPointForm");

	private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"name", org.apache.thrift.protocol.TType.STRING, (short) 1);
	private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"url", org.apache.thrift.protocol.TType.STRING, (short) 2);
	private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"title", org.apache.thrift.protocol.TType.STRING, (short) 3);
	private static final org.apache.thrift.protocol.TField RESERVE1_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"reserve1", org.apache.thrift.protocol.TType.I32, (short) 4);
	private static final org.apache.thrift.protocol.TField RESERVE2_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"reserve2", org.apache.thrift.protocol.TType.I32, (short) 5);
	private static final org.apache.thrift.protocol.TField RESERVE3_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"reserve3", org.apache.thrift.protocol.TType.STRING, (short) 6);
	private static final org.apache.thrift.protocol.TField RESERVE4_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"reserve4", org.apache.thrift.protocol.TType.STRING, (short) 7);

	private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
	static {
		schemes.put(StandardScheme.class,
				new TCommentPointFormStandardSchemeFactory());
		schemes.put(TupleScheme.class,
				new TCommentPointFormTupleSchemeFactory());
	}

	public String name; // required
	public String url; // required
	public String title; // required
	public int reserve1; // optional
	public int reserve2; // optional
	public String reserve3; // optional
	public String reserve4; // optional

	/**
	 * The set of fields this struct contains, along with convenience methods
	 * for finding and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		NAME((short) 1, "name"), URL((short) 2, "url"), TITLE((short) 3,
				"title"), RESERVE1((short) 4, "reserve1"), RESERVE2((short) 5,
				"reserve2"), RESERVE3((short) 6, "reserve3"), RESERVE4(
				(short) 7, "reserve4");

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not
		 * found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // NAME
				return NAME;
			case 2: // URL
				return URL;
			case 3: // TITLE
				return TITLE;
			case 4: // RESERVE1
				return RESERVE1;
			case 5: // RESERVE2
				return RESERVE2;
			case 6: // RESERVE3
				return RESERVE3;
			case 7: // RESERVE4
				return RESERVE4;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new IllegalArgumentException("Field " + fieldId
						+ " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not
		 * found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		@Override
		public short getThriftFieldId() {
			return _thriftId;
		}

		@Override
		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	private static final int __RESERVE1_ISSET_ID = 0;
	private static final int __RESERVE2_ISSET_ID = 1;
	private BitSet __isset_bit_vector = new BitSet(2);

	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData(
				"name", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(
						org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData(
				"url", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(
						org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.TITLE,
				new org.apache.thrift.meta_data.FieldMetaData("title",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(
								org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.RESERVE1,
				new org.apache.thrift.meta_data.FieldMetaData("reserve1",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(
								org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.RESERVE2,
				new org.apache.thrift.meta_data.FieldMetaData("reserve2",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(
								org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.RESERVE3,
				new org.apache.thrift.meta_data.FieldMetaData("reserve3",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(
								org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.RESERVE4,
				new org.apache.thrift.meta_data.FieldMetaData("reserve4",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(
								org.apache.thrift.protocol.TType.STRING)));
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
				TCommentPointForm.class, metaDataMap);
	}

	public TCommentPointForm() {
		this.reserve1 = 0;

		this.reserve2 = 0;

	}

	public TCommentPointForm(String name, String url, String title) {
		this();
		this.name = name;
		this.url = url;
		this.title = title;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public TCommentPointForm(TCommentPointForm other) {
		__isset_bit_vector.clear();
		__isset_bit_vector.or(other.__isset_bit_vector);
		if (other.isSetName()) {
			this.name = other.name;
		}
		if (other.isSetUrl()) {
			this.url = other.url;
		}
		if (other.isSetTitle()) {
			this.title = other.title;
		}
		this.reserve1 = other.reserve1;
		this.reserve2 = other.reserve2;
		if (other.isSetReserve3()) {
			this.reserve3 = other.reserve3;
		}
		if (other.isSetReserve4()) {
			this.reserve4 = other.reserve4;
		}
	}

	@Override
	public TCommentPointForm deepCopy() {
		return new TCommentPointForm(this);
	}

	@Override
	public void clear() {
		this.name = null;
		this.url = null;
		this.title = null;
		this.reserve1 = 0;

		this.reserve2 = 0;

		this.reserve3 = null;
		this.reserve4 = null;
	}

	public String getName() {
		return this.name;
	}

	public TCommentPointForm setName(String name) {
		this.name = name;
		return this;
	}

	public void unsetName() {
		this.name = null;
	}

	/**
	 * Returns true if field name is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetName() {
		return this.name != null;
	}

	public void setNameIsSet(boolean value) {
		if (!value) {
			this.name = null;
		}
	}

	public String getUrl() {
		return this.url;
	}

	public TCommentPointForm setUrl(String url) {
		this.url = url;
		return this;
	}

	public void unsetUrl() {
		this.url = null;
	}

	/**
	 * Returns true if field url is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetUrl() {
		return this.url != null;
	}

	public void setUrlIsSet(boolean value) {
		if (!value) {
			this.url = null;
		}
	}

	public String getTitle() {
		return this.title;
	}

	public TCommentPointForm setTitle(String title) {
		this.title = title;
		return this;
	}

	public void unsetTitle() {
		this.title = null;
	}

	/**
	 * Returns true if field title is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetTitle() {
		return this.title != null;
	}

	public void setTitleIsSet(boolean value) {
		if (!value) {
			this.title = null;
		}
	}

	public int getReserve1() {
		return this.reserve1;
	}

	public TCommentPointForm setReserve1(int reserve1) {
		this.reserve1 = reserve1;
		setReserve1IsSet(true);
		return this;
	}

	public void unsetReserve1() {
		__isset_bit_vector.clear(__RESERVE1_ISSET_ID);
	}

	/**
	 * Returns true if field reserve1 is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetReserve1() {
		return __isset_bit_vector.get(__RESERVE1_ISSET_ID);
	}

	public void setReserve1IsSet(boolean value) {
		__isset_bit_vector.set(__RESERVE1_ISSET_ID, value);
	}

	public int getReserve2() {
		return this.reserve2;
	}

	public TCommentPointForm setReserve2(int reserve2) {
		this.reserve2 = reserve2;
		setReserve2IsSet(true);
		return this;
	}

	public void unsetReserve2() {
		__isset_bit_vector.clear(__RESERVE2_ISSET_ID);
	}

	/**
	 * Returns true if field reserve2 is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetReserve2() {
		return __isset_bit_vector.get(__RESERVE2_ISSET_ID);
	}

	public void setReserve2IsSet(boolean value) {
		__isset_bit_vector.set(__RESERVE2_ISSET_ID, value);
	}

	public String getReserve3() {
		return this.reserve3;
	}

	public TCommentPointForm setReserve3(String reserve3) {
		this.reserve3 = reserve3;
		return this;
	}

	public void unsetReserve3() {
		this.reserve3 = null;
	}

	/**
	 * Returns true if field reserve3 is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetReserve3() {
		return this.reserve3 != null;
	}

	public void setReserve3IsSet(boolean value) {
		if (!value) {
			this.reserve3 = null;
		}
	}

	public String getReserve4() {
		return this.reserve4;
	}

	public TCommentPointForm setReserve4(String reserve4) {
		this.reserve4 = reserve4;
		return this;
	}

	public void unsetReserve4() {
		this.reserve4 = null;
	}

	/**
	 * Returns true if field reserve4 is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetReserve4() {
		return this.reserve4 != null;
	}

	public void setReserve4IsSet(boolean value) {
		if (!value) {
			this.reserve4 = null;
		}
	}

	@Override
	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case NAME:
			if (value == null) {
				unsetName();
			} else {
				setName((String) value);
			}
			break;

		case URL:
			if (value == null) {
				unsetUrl();
			} else {
				setUrl((String) value);
			}
			break;

		case TITLE:
			if (value == null) {
				unsetTitle();
			} else {
				setTitle((String) value);
			}
			break;

		case RESERVE1:
			if (value == null) {
				unsetReserve1();
			} else {
				setReserve1((Integer) value);
			}
			break;

		case RESERVE2:
			if (value == null) {
				unsetReserve2();
			} else {
				setReserve2((Integer) value);
			}
			break;

		case RESERVE3:
			if (value == null) {
				unsetReserve3();
			} else {
				setReserve3((String) value);
			}
			break;

		case RESERVE4:
			if (value == null) {
				unsetReserve4();
			} else {
				setReserve4((String) value);
			}
			break;

		}
	}

	@Override
	public Object getFieldValue(_Fields field) {
		switch (field) {
		case NAME:
			return getName();

		case URL:
			return getUrl();

		case TITLE:
			return getTitle();

		case RESERVE1:
			return Integer.valueOf(getReserve1());

		case RESERVE2:
			return Integer.valueOf(getReserve2());

		case RESERVE3:
			return getReserve3();

		case RESERVE4:
			return getReserve4();

		}
		throw new IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned
	 * a value) and false otherwise
	 */
	@Override
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case NAME:
			return isSetName();
		case URL:
			return isSetUrl();
		case TITLE:
			return isSetTitle();
		case RESERVE1:
			return isSetReserve1();
		case RESERVE2:
			return isSetReserve2();
		case RESERVE3:
			return isSetReserve3();
		case RESERVE4:
			return isSetReserve4();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof TCommentPointForm)
			return this.equals((TCommentPointForm) that);
		return false;
	}

	public boolean equals(TCommentPointForm that) {
		if (that == null)
			return false;

		boolean this_present_name = true && this.isSetName();
		boolean that_present_name = true && that.isSetName();
		if (this_present_name || that_present_name) {
			if (!(this_present_name && that_present_name))
				return false;
			if (!this.name.equals(that.name))
				return false;
		}

		boolean this_present_url = true && this.isSetUrl();
		boolean that_present_url = true && that.isSetUrl();
		if (this_present_url || that_present_url) {
			if (!(this_present_url && that_present_url))
				return false;
			if (!this.url.equals(that.url))
				return false;
		}

		boolean this_present_title = true && this.isSetTitle();
		boolean that_present_title = true && that.isSetTitle();
		if (this_present_title || that_present_title) {
			if (!(this_present_title && that_present_title))
				return false;
			if (!this.title.equals(that.title))
				return false;
		}

		boolean this_present_reserve1 = true && this.isSetReserve1();
		boolean that_present_reserve1 = true && that.isSetReserve1();
		if (this_present_reserve1 || that_present_reserve1) {
			if (!(this_present_reserve1 && that_present_reserve1))
				return false;
			if (this.reserve1 != that.reserve1)
				return false;
		}

		boolean this_present_reserve2 = true && this.isSetReserve2();
		boolean that_present_reserve2 = true && that.isSetReserve2();
		if (this_present_reserve2 || that_present_reserve2) {
			if (!(this_present_reserve2 && that_present_reserve2))
				return false;
			if (this.reserve2 != that.reserve2)
				return false;
		}

		boolean this_present_reserve3 = true && this.isSetReserve3();
		boolean that_present_reserve3 = true && that.isSetReserve3();
		if (this_present_reserve3 || that_present_reserve3) {
			if (!(this_present_reserve3 && that_present_reserve3))
				return false;
			if (!this.reserve3.equals(that.reserve3))
				return false;
		}

		boolean this_present_reserve4 = true && this.isSetReserve4();
		boolean that_present_reserve4 = true && that.isSetReserve4();
		if (this_present_reserve4 || that_present_reserve4) {
			if (!(this_present_reserve4 && that_present_reserve4))
				return false;
			if (!this.reserve4.equals(that.reserve4))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		return 0;
	}

	@Override
	public int compareTo(TCommentPointForm other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;
		TCommentPointForm typedOther = other;

		lastComparison = Boolean.valueOf(isSetName()).compareTo(
				typedOther.isSetName());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetName()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name,
					typedOther.name);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetUrl()).compareTo(
				typedOther.isSetUrl());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUrl()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url,
					typedOther.url);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetTitle()).compareTo(
				typedOther.isSetTitle());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetTitle()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(
					this.title, typedOther.title);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetReserve1()).compareTo(
				typedOther.isSetReserve1());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetReserve1()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(
					this.reserve1, typedOther.reserve1);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetReserve2()).compareTo(
				typedOther.isSetReserve2());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetReserve2()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(
					this.reserve2, typedOther.reserve2);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetReserve3()).compareTo(
				typedOther.isSetReserve3());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetReserve3()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(
					this.reserve3, typedOther.reserve3);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetReserve4()).compareTo(
				typedOther.isSetReserve4());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetReserve4()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(
					this.reserve4, typedOther.reserve4);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	@Override
	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	@Override
	public void read(org.apache.thrift.protocol.TProtocol iprot)
			throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	@Override
	public void write(org.apache.thrift.protocol.TProtocol oprot)
			throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("TCommentPointForm(");
		boolean first = true;

		sb.append("name:");
		if (this.name == null) {
			sb.append("null");
		} else {
			sb.append(this.name);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("url:");
		if (this.url == null) {
			sb.append("null");
		} else {
			sb.append(this.url);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("title:");
		if (this.title == null) {
			sb.append("null");
		} else {
			sb.append(this.title);
		}
		first = false;
		if (isSetReserve1()) {
			if (!first)
				sb.append(", ");
			sb.append("reserve1:");
			sb.append(this.reserve1);
			first = false;
		}
		if (isSetReserve2()) {
			if (!first)
				sb.append(", ");
			sb.append("reserve2:");
			sb.append(this.reserve2);
			first = false;
		}
		if (isSetReserve3()) {
			if (!first)
				sb.append(", ");
			sb.append("reserve3:");
			if (this.reserve3 == null) {
				sb.append("null");
			} else {
				sb.append(this.reserve3);
			}
			first = false;
		}
		if (isSetReserve4()) {
			if (!first)
				sb.append(", ");
			sb.append("reserve4:");
			if (this.reserve4 == null) {
				sb.append("null");
			} else {
				sb.append(this.reserve4);
			}
			first = false;
		}
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
	}

	private void writeObject(java.io.ObjectOutputStream out)
			throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in)
			throws java.io.IOException, ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java
			// serialization is wacky, and doesn't call the default constructor.
			__isset_bit_vector = new BitSet(1);
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class TCommentPointFormStandardSchemeFactory implements
			SchemeFactory {
		@Override
		public TCommentPointFormStandardScheme getScheme() {
			return new TCommentPointFormStandardScheme();
		}
	}

	private static class TCommentPointFormStandardScheme extends
			StandardScheme<TCommentPointForm> {

		@Override
		public void read(org.apache.thrift.protocol.TProtocol iprot,
				TCommentPointForm struct) throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // NAME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.name = iprot.readString();
						struct.setNameIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					break;
				case 2: // URL
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.url = iprot.readString();
						struct.setUrlIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					break;
				case 3: // TITLE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.title = iprot.readString();
						struct.setTitleIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					break;
				case 4: // RESERVE1
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.reserve1 = iprot.readI32();
						struct.setReserve1IsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					break;
				case 5: // RESERVE2
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.reserve2 = iprot.readI32();
						struct.setReserve2IsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					break;
				case 6: // RESERVE3
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.reserve3 = iprot.readString();
						struct.setReserve3IsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					break;
				case 7: // RESERVE4
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.reserve4 = iprot.readString();
						struct.setReserve4IsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
							schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be
			// checked in the validate method
			struct.validate();
		}

		@Override
		public void write(org.apache.thrift.protocol.TProtocol oprot,
				TCommentPointForm struct) throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.name != null) {
				oprot.writeFieldBegin(NAME_FIELD_DESC);
				oprot.writeString(struct.name);
				oprot.writeFieldEnd();
			}
			if (struct.url != null) {
				oprot.writeFieldBegin(URL_FIELD_DESC);
				oprot.writeString(struct.url);
				oprot.writeFieldEnd();
			}
			if (struct.title != null) {
				oprot.writeFieldBegin(TITLE_FIELD_DESC);
				oprot.writeString(struct.title);
				oprot.writeFieldEnd();
			}
			if (struct.isSetReserve1()) {
				oprot.writeFieldBegin(RESERVE1_FIELD_DESC);
				oprot.writeI32(struct.reserve1);
				oprot.writeFieldEnd();
			}
			if (struct.isSetReserve2()) {
				oprot.writeFieldBegin(RESERVE2_FIELD_DESC);
				oprot.writeI32(struct.reserve2);
				oprot.writeFieldEnd();
			}
			if (struct.reserve3 != null) {
				if (struct.isSetReserve3()) {
					oprot.writeFieldBegin(RESERVE3_FIELD_DESC);
					oprot.writeString(struct.reserve3);
					oprot.writeFieldEnd();
				}
			}
			if (struct.reserve4 != null) {
				if (struct.isSetReserve4()) {
					oprot.writeFieldBegin(RESERVE4_FIELD_DESC);
					oprot.writeString(struct.reserve4);
					oprot.writeFieldEnd();
				}
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class TCommentPointFormTupleSchemeFactory implements
			SchemeFactory {
		@Override
		public TCommentPointFormTupleScheme getScheme() {
			return new TCommentPointFormTupleScheme();
		}
	}

	private static class TCommentPointFormTupleScheme extends
			TupleScheme<TCommentPointForm> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot,
				TCommentPointForm struct) throws org.apache.thrift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			BitSet optionals = new BitSet();
			if (struct.isSetName()) {
				optionals.set(0);
			}
			if (struct.isSetUrl()) {
				optionals.set(1);
			}
			if (struct.isSetTitle()) {
				optionals.set(2);
			}
			if (struct.isSetReserve1()) {
				optionals.set(3);
			}
			if (struct.isSetReserve2()) {
				optionals.set(4);
			}
			if (struct.isSetReserve3()) {
				optionals.set(5);
			}
			if (struct.isSetReserve4()) {
				optionals.set(6);
			}
			oprot.writeBitSet(optionals, 7);
			if (struct.isSetName()) {
				oprot.writeString(struct.name);
			}
			if (struct.isSetUrl()) {
				oprot.writeString(struct.url);
			}
			if (struct.isSetTitle()) {
				oprot.writeString(struct.title);
			}
			if (struct.isSetReserve1()) {
				oprot.writeI32(struct.reserve1);
			}
			if (struct.isSetReserve2()) {
				oprot.writeI32(struct.reserve2);
			}
			if (struct.isSetReserve3()) {
				oprot.writeString(struct.reserve3);
			}
			if (struct.isSetReserve4()) {
				oprot.writeString(struct.reserve4);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot,
				TCommentPointForm struct) throws org.apache.thrift.TException {
			TTupleProtocol iprot = (TTupleProtocol) prot;
			BitSet incoming = iprot.readBitSet(7);
			if (incoming.get(0)) {
				struct.name = iprot.readString();
				struct.setNameIsSet(true);
			}
			if (incoming.get(1)) {
				struct.url = iprot.readString();
				struct.setUrlIsSet(true);
			}
			if (incoming.get(2)) {
				struct.title = iprot.readString();
				struct.setTitleIsSet(true);
			}
			if (incoming.get(3)) {
				struct.reserve1 = iprot.readI32();
				struct.setReserve1IsSet(true);
			}
			if (incoming.get(4)) {
				struct.reserve2 = iprot.readI32();
				struct.setReserve2IsSet(true);
			}
			if (incoming.get(5)) {
				struct.reserve3 = iprot.readString();
				struct.setReserve3IsSet(true);
			}
			if (incoming.get(6)) {
				struct.reserve4 = iprot.readString();
				struct.setReserve4IsSet(true);
			}
		}
	}

}
