/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package bma.siteone.comments.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TCommentPoint implements org.apache.thrift.TBase<TCommentPoint, TCommentPoint._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TCommentPoint");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField RESERVE1_FIELD_DESC = new org.apache.thrift.protocol.TField("reserve1", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField RESERVE2_FIELD_DESC = new org.apache.thrift.protocol.TField("reserve2", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField RESERVE3_FIELD_DESC = new org.apache.thrift.protocol.TField("reserve3", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField RESERVE4_FIELD_DESC = new org.apache.thrift.protocol.TField("reserve4", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField COMMENT_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("commentAmount", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField LAST_COMMENT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastCommentTime", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField LAST_UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastUpdateTime", org.apache.thrift.protocol.TType.STRING, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TCommentPointStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TCommentPointTupleSchemeFactory());
  }

  public int id; // required
  public String name; // required
  public String url; // required
  public String title; // required
  public int reserve1; // required
  public int reserve2; // required
  public String reserve3; // required
  public String reserve4; // required
  public int status; // required
  public int commentAmount; // required
  public String lastCommentTime; // required
  public String createTime; // required
  public String lastUpdateTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    URL((short)3, "url"),
    TITLE((short)4, "title"),
    RESERVE1((short)5, "reserve1"),
    RESERVE2((short)6, "reserve2"),
    RESERVE3((short)7, "reserve3"),
    RESERVE4((short)8, "reserve4"),
    STATUS((short)9, "status"),
    COMMENT_AMOUNT((short)10, "commentAmount"),
    LAST_COMMENT_TIME((short)11, "lastCommentTime"),
    CREATE_TIME((short)12, "createTime"),
    LAST_UPDATE_TIME((short)13, "lastUpdateTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // URL
          return URL;
        case 4: // TITLE
          return TITLE;
        case 5: // RESERVE1
          return RESERVE1;
        case 6: // RESERVE2
          return RESERVE2;
        case 7: // RESERVE3
          return RESERVE3;
        case 8: // RESERVE4
          return RESERVE4;
        case 9: // STATUS
          return STATUS;
        case 10: // COMMENT_AMOUNT
          return COMMENT_AMOUNT;
        case 11: // LAST_COMMENT_TIME
          return LAST_COMMENT_TIME;
        case 12: // CREATE_TIME
          return CREATE_TIME;
        case 13: // LAST_UPDATE_TIME
          return LAST_UPDATE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __RESERVE1_ISSET_ID = 1;
  private static final int __RESERVE2_ISSET_ID = 2;
  private static final int __STATUS_ISSET_ID = 3;
  private static final int __COMMENTAMOUNT_ISSET_ID = 4;
  private BitSet __isset_bit_vector = new BitSet(5);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESERVE1, new org.apache.thrift.meta_data.FieldMetaData("reserve1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RESERVE2, new org.apache.thrift.meta_data.FieldMetaData("reserve2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RESERVE3, new org.apache.thrift.meta_data.FieldMetaData("reserve3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESERVE4, new org.apache.thrift.meta_data.FieldMetaData("reserve4", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMMENT_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("commentAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LAST_COMMENT_TIME, new org.apache.thrift.meta_data.FieldMetaData("lastCommentTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("lastUpdateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TCommentPoint.class, metaDataMap);
  }

  public TCommentPoint() {
    this.id = 0;

  }

  public TCommentPoint(
    int id,
    String name,
    String url,
    String title,
    int reserve1,
    int reserve2,
    String reserve3,
    String reserve4,
    int status,
    int commentAmount,
    String lastCommentTime,
    String createTime,
    String lastUpdateTime)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.name = name;
    this.url = url;
    this.title = title;
    this.reserve1 = reserve1;
    setReserve1IsSet(true);
    this.reserve2 = reserve2;
    setReserve2IsSet(true);
    this.reserve3 = reserve3;
    this.reserve4 = reserve4;
    this.status = status;
    setStatusIsSet(true);
    this.commentAmount = commentAmount;
    setCommentAmountIsSet(true);
    this.lastCommentTime = lastCommentTime;
    this.createTime = createTime;
    this.lastUpdateTime = lastUpdateTime;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TCommentPoint(TCommentPoint other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.id = other.id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetUrl()) {
      this.url = other.url;
    }
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    this.reserve1 = other.reserve1;
    this.reserve2 = other.reserve2;
    if (other.isSetReserve3()) {
      this.reserve3 = other.reserve3;
    }
    if (other.isSetReserve4()) {
      this.reserve4 = other.reserve4;
    }
    this.status = other.status;
    this.commentAmount = other.commentAmount;
    if (other.isSetLastCommentTime()) {
      this.lastCommentTime = other.lastCommentTime;
    }
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetLastUpdateTime()) {
      this.lastUpdateTime = other.lastUpdateTime;
    }
  }

  public TCommentPoint deepCopy() {
    return new TCommentPoint(this);
  }

  @Override
  public void clear() {
    this.id = 0;

    this.name = null;
    this.url = null;
    this.title = null;
    setReserve1IsSet(false);
    this.reserve1 = 0;
    setReserve2IsSet(false);
    this.reserve2 = 0;
    this.reserve3 = null;
    this.reserve4 = null;
    setStatusIsSet(false);
    this.status = 0;
    setCommentAmountIsSet(false);
    this.commentAmount = 0;
    this.lastCommentTime = null;
    this.createTime = null;
    this.lastUpdateTime = null;
  }

  public int getId() {
    return this.id;
  }

  public TCommentPoint setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bit_vector.clear(__ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return __isset_bit_vector.get(__ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bit_vector.set(__ID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public TCommentPoint setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getUrl() {
    return this.url;
  }

  public TCommentPoint setUrl(String url) {
    this.url = url;
    return this;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public String getTitle() {
    return this.title;
  }

  public TCommentPoint setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public int getReserve1() {
    return this.reserve1;
  }

  public TCommentPoint setReserve1(int reserve1) {
    this.reserve1 = reserve1;
    setReserve1IsSet(true);
    return this;
  }

  public void unsetReserve1() {
    __isset_bit_vector.clear(__RESERVE1_ISSET_ID);
  }

  /** Returns true if field reserve1 is set (has been assigned a value) and false otherwise */
  public boolean isSetReserve1() {
    return __isset_bit_vector.get(__RESERVE1_ISSET_ID);
  }

  public void setReserve1IsSet(boolean value) {
    __isset_bit_vector.set(__RESERVE1_ISSET_ID, value);
  }

  public int getReserve2() {
    return this.reserve2;
  }

  public TCommentPoint setReserve2(int reserve2) {
    this.reserve2 = reserve2;
    setReserve2IsSet(true);
    return this;
  }

  public void unsetReserve2() {
    __isset_bit_vector.clear(__RESERVE2_ISSET_ID);
  }

  /** Returns true if field reserve2 is set (has been assigned a value) and false otherwise */
  public boolean isSetReserve2() {
    return __isset_bit_vector.get(__RESERVE2_ISSET_ID);
  }

  public void setReserve2IsSet(boolean value) {
    __isset_bit_vector.set(__RESERVE2_ISSET_ID, value);
  }

  public String getReserve3() {
    return this.reserve3;
  }

  public TCommentPoint setReserve3(String reserve3) {
    this.reserve3 = reserve3;
    return this;
  }

  public void unsetReserve3() {
    this.reserve3 = null;
  }

  /** Returns true if field reserve3 is set (has been assigned a value) and false otherwise */
  public boolean isSetReserve3() {
    return this.reserve3 != null;
  }

  public void setReserve3IsSet(boolean value) {
    if (!value) {
      this.reserve3 = null;
    }
  }

  public String getReserve4() {
    return this.reserve4;
  }

  public TCommentPoint setReserve4(String reserve4) {
    this.reserve4 = reserve4;
    return this;
  }

  public void unsetReserve4() {
    this.reserve4 = null;
  }

  /** Returns true if field reserve4 is set (has been assigned a value) and false otherwise */
  public boolean isSetReserve4() {
    return this.reserve4 != null;
  }

  public void setReserve4IsSet(boolean value) {
    if (!value) {
      this.reserve4 = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public TCommentPoint setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bit_vector.clear(__STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return __isset_bit_vector.get(__STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bit_vector.set(__STATUS_ISSET_ID, value);
  }

  public int getCommentAmount() {
    return this.commentAmount;
  }

  public TCommentPoint setCommentAmount(int commentAmount) {
    this.commentAmount = commentAmount;
    setCommentAmountIsSet(true);
    return this;
  }

  public void unsetCommentAmount() {
    __isset_bit_vector.clear(__COMMENTAMOUNT_ISSET_ID);
  }

  /** Returns true if field commentAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetCommentAmount() {
    return __isset_bit_vector.get(__COMMENTAMOUNT_ISSET_ID);
  }

  public void setCommentAmountIsSet(boolean value) {
    __isset_bit_vector.set(__COMMENTAMOUNT_ISSET_ID, value);
  }

  public String getLastCommentTime() {
    return this.lastCommentTime;
  }

  public TCommentPoint setLastCommentTime(String lastCommentTime) {
    this.lastCommentTime = lastCommentTime;
    return this;
  }

  public void unsetLastCommentTime() {
    this.lastCommentTime = null;
  }

  /** Returns true if field lastCommentTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLastCommentTime() {
    return this.lastCommentTime != null;
  }

  public void setLastCommentTimeIsSet(boolean value) {
    if (!value) {
      this.lastCommentTime = null;
    }
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public TCommentPoint setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public String getLastUpdateTime() {
    return this.lastUpdateTime;
  }

  public TCommentPoint setLastUpdateTime(String lastUpdateTime) {
    this.lastUpdateTime = lastUpdateTime;
    return this;
  }

  public void unsetLastUpdateTime() {
    this.lastUpdateTime = null;
  }

  /** Returns true if field lastUpdateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLastUpdateTime() {
    return this.lastUpdateTime != null;
  }

  public void setLastUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.lastUpdateTime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((String)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case RESERVE1:
      if (value == null) {
        unsetReserve1();
      } else {
        setReserve1((Integer)value);
      }
      break;

    case RESERVE2:
      if (value == null) {
        unsetReserve2();
      } else {
        setReserve2((Integer)value);
      }
      break;

    case RESERVE3:
      if (value == null) {
        unsetReserve3();
      } else {
        setReserve3((String)value);
      }
      break;

    case RESERVE4:
      if (value == null) {
        unsetReserve4();
      } else {
        setReserve4((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case COMMENT_AMOUNT:
      if (value == null) {
        unsetCommentAmount();
      } else {
        setCommentAmount((Integer)value);
      }
      break;

    case LAST_COMMENT_TIME:
      if (value == null) {
        unsetLastCommentTime();
      } else {
        setLastCommentTime((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    case LAST_UPDATE_TIME:
      if (value == null) {
        unsetLastUpdateTime();
      } else {
        setLastUpdateTime((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case NAME:
      return getName();

    case URL:
      return getUrl();

    case TITLE:
      return getTitle();

    case RESERVE1:
      return Integer.valueOf(getReserve1());

    case RESERVE2:
      return Integer.valueOf(getReserve2());

    case RESERVE3:
      return getReserve3();

    case RESERVE4:
      return getReserve4();

    case STATUS:
      return Integer.valueOf(getStatus());

    case COMMENT_AMOUNT:
      return Integer.valueOf(getCommentAmount());

    case LAST_COMMENT_TIME:
      return getLastCommentTime();

    case CREATE_TIME:
      return getCreateTime();

    case LAST_UPDATE_TIME:
      return getLastUpdateTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case URL:
      return isSetUrl();
    case TITLE:
      return isSetTitle();
    case RESERVE1:
      return isSetReserve1();
    case RESERVE2:
      return isSetReserve2();
    case RESERVE3:
      return isSetReserve3();
    case RESERVE4:
      return isSetReserve4();
    case STATUS:
      return isSetStatus();
    case COMMENT_AMOUNT:
      return isSetCommentAmount();
    case LAST_COMMENT_TIME:
      return isSetLastCommentTime();
    case CREATE_TIME:
      return isSetCreateTime();
    case LAST_UPDATE_TIME:
      return isSetLastUpdateTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TCommentPoint)
      return this.equals((TCommentPoint)that);
    return false;
  }

  public boolean equals(TCommentPoint that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_reserve1 = true;
    boolean that_present_reserve1 = true;
    if (this_present_reserve1 || that_present_reserve1) {
      if (!(this_present_reserve1 && that_present_reserve1))
        return false;
      if (this.reserve1 != that.reserve1)
        return false;
    }

    boolean this_present_reserve2 = true;
    boolean that_present_reserve2 = true;
    if (this_present_reserve2 || that_present_reserve2) {
      if (!(this_present_reserve2 && that_present_reserve2))
        return false;
      if (this.reserve2 != that.reserve2)
        return false;
    }

    boolean this_present_reserve3 = true && this.isSetReserve3();
    boolean that_present_reserve3 = true && that.isSetReserve3();
    if (this_present_reserve3 || that_present_reserve3) {
      if (!(this_present_reserve3 && that_present_reserve3))
        return false;
      if (!this.reserve3.equals(that.reserve3))
        return false;
    }

    boolean this_present_reserve4 = true && this.isSetReserve4();
    boolean that_present_reserve4 = true && that.isSetReserve4();
    if (this_present_reserve4 || that_present_reserve4) {
      if (!(this_present_reserve4 && that_present_reserve4))
        return false;
      if (!this.reserve4.equals(that.reserve4))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_commentAmount = true;
    boolean that_present_commentAmount = true;
    if (this_present_commentAmount || that_present_commentAmount) {
      if (!(this_present_commentAmount && that_present_commentAmount))
        return false;
      if (this.commentAmount != that.commentAmount)
        return false;
    }

    boolean this_present_lastCommentTime = true && this.isSetLastCommentTime();
    boolean that_present_lastCommentTime = true && that.isSetLastCommentTime();
    if (this_present_lastCommentTime || that_present_lastCommentTime) {
      if (!(this_present_lastCommentTime && that_present_lastCommentTime))
        return false;
      if (!this.lastCommentTime.equals(that.lastCommentTime))
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_lastUpdateTime = true && this.isSetLastUpdateTime();
    boolean that_present_lastUpdateTime = true && that.isSetLastUpdateTime();
    if (this_present_lastUpdateTime || that_present_lastUpdateTime) {
      if (!(this_present_lastUpdateTime && that_present_lastUpdateTime))
        return false;
      if (!this.lastUpdateTime.equals(that.lastUpdateTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TCommentPoint other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TCommentPoint typedOther = (TCommentPoint)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUrl()).compareTo(typedOther.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, typedOther.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(typedOther.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, typedOther.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReserve1()).compareTo(typedOther.isSetReserve1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReserve1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reserve1, typedOther.reserve1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReserve2()).compareTo(typedOther.isSetReserve2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReserve2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reserve2, typedOther.reserve2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReserve3()).compareTo(typedOther.isSetReserve3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReserve3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reserve3, typedOther.reserve3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReserve4()).compareTo(typedOther.isSetReserve4());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReserve4()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reserve4, typedOther.reserve4);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommentAmount()).compareTo(typedOther.isSetCommentAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommentAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentAmount, typedOther.commentAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastCommentTime()).compareTo(typedOther.isSetLastCommentTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastCommentTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastCommentTime, typedOther.lastCommentTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(typedOther.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, typedOther.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastUpdateTime()).compareTo(typedOther.isSetLastUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastUpdateTime, typedOther.lastUpdateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TCommentPoint(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("url:");
    if (this.url == null) {
      sb.append("null");
    } else {
      sb.append(this.url);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reserve1:");
    sb.append(this.reserve1);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reserve2:");
    sb.append(this.reserve2);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reserve3:");
    if (this.reserve3 == null) {
      sb.append("null");
    } else {
      sb.append(this.reserve3);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reserve4:");
    if (this.reserve4 == null) {
      sb.append("null");
    } else {
      sb.append(this.reserve4);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("commentAmount:");
    sb.append(this.commentAmount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastCommentTime:");
    if (this.lastCommentTime == null) {
      sb.append("null");
    } else {
      sb.append(this.lastCommentTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    if (this.createTime == null) {
      sb.append("null");
    } else {
      sb.append(this.createTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastUpdateTime:");
    if (this.lastUpdateTime == null) {
      sb.append("null");
    } else {
      sb.append(this.lastUpdateTime);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TCommentPointStandardSchemeFactory implements SchemeFactory {
    public TCommentPointStandardScheme getScheme() {
      return new TCommentPointStandardScheme();
    }
  }

  private static class TCommentPointStandardScheme extends StandardScheme<TCommentPoint> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TCommentPoint struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.url = iprot.readString();
              struct.setUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RESERVE1
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.reserve1 = iprot.readI32();
              struct.setReserve1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RESERVE2
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.reserve2 = iprot.readI32();
              struct.setReserve2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // RESERVE3
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reserve3 = iprot.readString();
              struct.setReserve3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // RESERVE4
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reserve4 = iprot.readString();
              struct.setReserve4IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // COMMENT_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.commentAmount = iprot.readI32();
              struct.setCommentAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // LAST_COMMENT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastCommentTime = iprot.readString();
              struct.setLastCommentTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // LAST_UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastUpdateTime = iprot.readString();
              struct.setLastUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TCommentPoint struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.url != null) {
        oprot.writeFieldBegin(URL_FIELD_DESC);
        oprot.writeString(struct.url);
        oprot.writeFieldEnd();
      }
      if (struct.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(struct.title);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RESERVE1_FIELD_DESC);
      oprot.writeI32(struct.reserve1);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RESERVE2_FIELD_DESC);
      oprot.writeI32(struct.reserve2);
      oprot.writeFieldEnd();
      if (struct.reserve3 != null) {
        oprot.writeFieldBegin(RESERVE3_FIELD_DESC);
        oprot.writeString(struct.reserve3);
        oprot.writeFieldEnd();
      }
      if (struct.reserve4 != null) {
        oprot.writeFieldBegin(RESERVE4_FIELD_DESC);
        oprot.writeString(struct.reserve4);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COMMENT_AMOUNT_FIELD_DESC);
      oprot.writeI32(struct.commentAmount);
      oprot.writeFieldEnd();
      if (struct.lastCommentTime != null) {
        oprot.writeFieldBegin(LAST_COMMENT_TIME_FIELD_DESC);
        oprot.writeString(struct.lastCommentTime);
        oprot.writeFieldEnd();
      }
      if (struct.createTime != null) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeString(struct.createTime);
        oprot.writeFieldEnd();
      }
      if (struct.lastUpdateTime != null) {
        oprot.writeFieldBegin(LAST_UPDATE_TIME_FIELD_DESC);
        oprot.writeString(struct.lastUpdateTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TCommentPointTupleSchemeFactory implements SchemeFactory {
    public TCommentPointTupleScheme getScheme() {
      return new TCommentPointTupleScheme();
    }
  }

  private static class TCommentPointTupleScheme extends TupleScheme<TCommentPoint> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TCommentPoint struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetUrl()) {
        optionals.set(2);
      }
      if (struct.isSetTitle()) {
        optionals.set(3);
      }
      if (struct.isSetReserve1()) {
        optionals.set(4);
      }
      if (struct.isSetReserve2()) {
        optionals.set(5);
      }
      if (struct.isSetReserve3()) {
        optionals.set(6);
      }
      if (struct.isSetReserve4()) {
        optionals.set(7);
      }
      if (struct.isSetStatus()) {
        optionals.set(8);
      }
      if (struct.isSetCommentAmount()) {
        optionals.set(9);
      }
      if (struct.isSetLastCommentTime()) {
        optionals.set(10);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(11);
      }
      if (struct.isSetLastUpdateTime()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetUrl()) {
        oprot.writeString(struct.url);
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetReserve1()) {
        oprot.writeI32(struct.reserve1);
      }
      if (struct.isSetReserve2()) {
        oprot.writeI32(struct.reserve2);
      }
      if (struct.isSetReserve3()) {
        oprot.writeString(struct.reserve3);
      }
      if (struct.isSetReserve4()) {
        oprot.writeString(struct.reserve4);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetCommentAmount()) {
        oprot.writeI32(struct.commentAmount);
      }
      if (struct.isSetLastCommentTime()) {
        oprot.writeString(struct.lastCommentTime);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetLastUpdateTime()) {
        oprot.writeString(struct.lastUpdateTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TCommentPoint struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.url = iprot.readString();
        struct.setUrlIsSet(true);
      }
      if (incoming.get(3)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(4)) {
        struct.reserve1 = iprot.readI32();
        struct.setReserve1IsSet(true);
      }
      if (incoming.get(5)) {
        struct.reserve2 = iprot.readI32();
        struct.setReserve2IsSet(true);
      }
      if (incoming.get(6)) {
        struct.reserve3 = iprot.readString();
        struct.setReserve3IsSet(true);
      }
      if (incoming.get(7)) {
        struct.reserve4 = iprot.readString();
        struct.setReserve4IsSet(true);
      }
      if (incoming.get(8)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(9)) {
        struct.commentAmount = iprot.readI32();
        struct.setCommentAmountIsSet(true);
      }
      if (incoming.get(10)) {
        struct.lastCommentTime = iprot.readString();
        struct.setLastCommentTimeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.lastUpdateTime = iprot.readString();
        struct.setLastUpdateTimeIsSet(true);
      }
    }
  }

}

