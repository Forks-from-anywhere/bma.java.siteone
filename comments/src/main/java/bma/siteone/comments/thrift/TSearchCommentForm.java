/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package bma.siteone.comments.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TSearchCommentForm implements org.apache.thrift.TBase<TSearchCommentForm, TSearchCommentForm._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TSearchCommentForm");

  private static final org.apache.thrift.protocol.TField POINT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pointId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField POINT_FIELD_DESC = new org.apache.thrift.protocol.TField("point", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField REPLY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("replyId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField SUBJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("subject", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField IP_FIELD_DESC = new org.apache.thrift.protocol.TField("ip", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField NEED_AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("needAuth", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField HIDE_FIELD_DESC = new org.apache.thrift.protocol.TField("hide", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField SORT_FIELD_DESC = new org.apache.thrift.protocol.TField("sort", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField SORT_DIR_FIELD_DESC = new org.apache.thrift.protocol.TField("sortDir", org.apache.thrift.protocol.TType.STRING, (short)19);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TSearchCommentFormStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TSearchCommentFormTupleSchemeFactory());
  }

  public int pointId; // optional
  public String point; // optional
  public int replyId; // optional
  public String subject; // optional
  public String url; // optional
  public String userName; // optional
  public int userId; // optional
  public String content; // optional
  public String ip; // optional
  public String startTime; // optional
  public String endTime; // optional
  public int needAuth; // optional
  public int status; // optional
  public int hide; // optional
  public int page; // required
  public int pageSize; // required
  public String sort; // optional
  public String sortDir; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    POINT_ID((short)1, "pointId"),
    POINT((short)2, "point"),
    REPLY_ID((short)3, "replyId"),
    SUBJECT((short)4, "subject"),
    URL((short)5, "url"),
    USER_NAME((short)6, "userName"),
    USER_ID((short)7, "userId"),
    CONTENT((short)8, "content"),
    IP((short)9, "ip"),
    START_TIME((short)10, "startTime"),
    END_TIME((short)11, "endTime"),
    NEED_AUTH((short)12, "needAuth"),
    STATUS((short)13, "status"),
    HIDE((short)14, "hide"),
    PAGE((short)16, "page"),
    PAGE_SIZE((short)17, "pageSize"),
    SORT((short)18, "sort"),
    SORT_DIR((short)19, "sortDir");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // POINT_ID
          return POINT_ID;
        case 2: // POINT
          return POINT;
        case 3: // REPLY_ID
          return REPLY_ID;
        case 4: // SUBJECT
          return SUBJECT;
        case 5: // URL
          return URL;
        case 6: // USER_NAME
          return USER_NAME;
        case 7: // USER_ID
          return USER_ID;
        case 8: // CONTENT
          return CONTENT;
        case 9: // IP
          return IP;
        case 10: // START_TIME
          return START_TIME;
        case 11: // END_TIME
          return END_TIME;
        case 12: // NEED_AUTH
          return NEED_AUTH;
        case 13: // STATUS
          return STATUS;
        case 14: // HIDE
          return HIDE;
        case 16: // PAGE
          return PAGE;
        case 17: // PAGE_SIZE
          return PAGE_SIZE;
        case 18: // SORT
          return SORT;
        case 19: // SORT_DIR
          return SORT_DIR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __POINTID_ISSET_ID = 0;
  private static final int __REPLYID_ISSET_ID = 1;
  private static final int __USERID_ISSET_ID = 2;
  private static final int __NEEDAUTH_ISSET_ID = 3;
  private static final int __STATUS_ISSET_ID = 4;
  private static final int __HIDE_ISSET_ID = 5;
  private static final int __PAGE_ISSET_ID = 6;
  private static final int __PAGESIZE_ISSET_ID = 7;
  private BitSet __isset_bit_vector = new BitSet(8);
  private _Fields optionals[] = {_Fields.POINT_ID,_Fields.POINT,_Fields.REPLY_ID,_Fields.SUBJECT,_Fields.URL,_Fields.USER_NAME,_Fields.USER_ID,_Fields.CONTENT,_Fields.IP,_Fields.START_TIME,_Fields.END_TIME,_Fields.NEED_AUTH,_Fields.STATUS,_Fields.HIDE,_Fields.SORT,_Fields.SORT_DIR};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.POINT_ID, new org.apache.thrift.meta_data.FieldMetaData("pointId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POINT, new org.apache.thrift.meta_data.FieldMetaData("point", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPLY_ID, new org.apache.thrift.meta_data.FieldMetaData("replyId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SUBJECT, new org.apache.thrift.meta_data.FieldMetaData("subject", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IP, new org.apache.thrift.meta_data.FieldMetaData("ip", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NEED_AUTH, new org.apache.thrift.meta_data.FieldMetaData("needAuth", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HIDE, new org.apache.thrift.meta_data.FieldMetaData("hide", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SORT, new org.apache.thrift.meta_data.FieldMetaData("sort", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SORT_DIR, new org.apache.thrift.meta_data.FieldMetaData("sortDir", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TSearchCommentForm.class, metaDataMap);
  }

  public TSearchCommentForm() {
    this.needAuth = -1;

    this.status = -1;

    this.hide = -1;

  }

  public TSearchCommentForm(
    int page,
    int pageSize)
  {
    this();
    this.page = page;
    setPageIsSet(true);
    this.pageSize = pageSize;
    setPageSizeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TSearchCommentForm(TSearchCommentForm other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.pointId = other.pointId;
    if (other.isSetPoint()) {
      this.point = other.point;
    }
    this.replyId = other.replyId;
    if (other.isSetSubject()) {
      this.subject = other.subject;
    }
    if (other.isSetUrl()) {
      this.url = other.url;
    }
    if (other.isSetUserName()) {
      this.userName = other.userName;
    }
    this.userId = other.userId;
    if (other.isSetContent()) {
      this.content = other.content;
    }
    if (other.isSetIp()) {
      this.ip = other.ip;
    }
    if (other.isSetStartTime()) {
      this.startTime = other.startTime;
    }
    if (other.isSetEndTime()) {
      this.endTime = other.endTime;
    }
    this.needAuth = other.needAuth;
    this.status = other.status;
    this.hide = other.hide;
    this.page = other.page;
    this.pageSize = other.pageSize;
    if (other.isSetSort()) {
      this.sort = other.sort;
    }
    if (other.isSetSortDir()) {
      this.sortDir = other.sortDir;
    }
  }

  public TSearchCommentForm deepCopy() {
    return new TSearchCommentForm(this);
  }

  @Override
  public void clear() {
    setPointIdIsSet(false);
    this.pointId = 0;
    this.point = null;
    setReplyIdIsSet(false);
    this.replyId = 0;
    this.subject = null;
    this.url = null;
    this.userName = null;
    setUserIdIsSet(false);
    this.userId = 0;
    this.content = null;
    this.ip = null;
    this.startTime = null;
    this.endTime = null;
    this.needAuth = -1;

    this.status = -1;

    this.hide = -1;

    setPageIsSet(false);
    this.page = 0;
    setPageSizeIsSet(false);
    this.pageSize = 0;
    this.sort = null;
    this.sortDir = null;
  }

  public int getPointId() {
    return this.pointId;
  }

  public TSearchCommentForm setPointId(int pointId) {
    this.pointId = pointId;
    setPointIdIsSet(true);
    return this;
  }

  public void unsetPointId() {
    __isset_bit_vector.clear(__POINTID_ISSET_ID);
  }

  /** Returns true if field pointId is set (has been assigned a value) and false otherwise */
  public boolean isSetPointId() {
    return __isset_bit_vector.get(__POINTID_ISSET_ID);
  }

  public void setPointIdIsSet(boolean value) {
    __isset_bit_vector.set(__POINTID_ISSET_ID, value);
  }

  public String getPoint() {
    return this.point;
  }

  public TSearchCommentForm setPoint(String point) {
    this.point = point;
    return this;
  }

  public void unsetPoint() {
    this.point = null;
  }

  /** Returns true if field point is set (has been assigned a value) and false otherwise */
  public boolean isSetPoint() {
    return this.point != null;
  }

  public void setPointIsSet(boolean value) {
    if (!value) {
      this.point = null;
    }
  }

  public int getReplyId() {
    return this.replyId;
  }

  public TSearchCommentForm setReplyId(int replyId) {
    this.replyId = replyId;
    setReplyIdIsSet(true);
    return this;
  }

  public void unsetReplyId() {
    __isset_bit_vector.clear(__REPLYID_ISSET_ID);
  }

  /** Returns true if field replyId is set (has been assigned a value) and false otherwise */
  public boolean isSetReplyId() {
    return __isset_bit_vector.get(__REPLYID_ISSET_ID);
  }

  public void setReplyIdIsSet(boolean value) {
    __isset_bit_vector.set(__REPLYID_ISSET_ID, value);
  }

  public String getSubject() {
    return this.subject;
  }

  public TSearchCommentForm setSubject(String subject) {
    this.subject = subject;
    return this;
  }

  public void unsetSubject() {
    this.subject = null;
  }

  /** Returns true if field subject is set (has been assigned a value) and false otherwise */
  public boolean isSetSubject() {
    return this.subject != null;
  }

  public void setSubjectIsSet(boolean value) {
    if (!value) {
      this.subject = null;
    }
  }

  public String getUrl() {
    return this.url;
  }

  public TSearchCommentForm setUrl(String url) {
    this.url = url;
    return this;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public String getUserName() {
    return this.userName;
  }

  public TSearchCommentForm setUserName(String userName) {
    this.userName = userName;
    return this;
  }

  public void unsetUserName() {
    this.userName = null;
  }

  /** Returns true if field userName is set (has been assigned a value) and false otherwise */
  public boolean isSetUserName() {
    return this.userName != null;
  }

  public void setUserNameIsSet(boolean value) {
    if (!value) {
      this.userName = null;
    }
  }

  public int getUserId() {
    return this.userId;
  }

  public TSearchCommentForm setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bit_vector.clear(__USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return __isset_bit_vector.get(__USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bit_vector.set(__USERID_ISSET_ID, value);
  }

  public String getContent() {
    return this.content;
  }

  public TSearchCommentForm setContent(String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public String getIp() {
    return this.ip;
  }

  public TSearchCommentForm setIp(String ip) {
    this.ip = ip;
    return this;
  }

  public void unsetIp() {
    this.ip = null;
  }

  /** Returns true if field ip is set (has been assigned a value) and false otherwise */
  public boolean isSetIp() {
    return this.ip != null;
  }

  public void setIpIsSet(boolean value) {
    if (!value) {
      this.ip = null;
    }
  }

  public String getStartTime() {
    return this.startTime;
  }

  public TSearchCommentForm setStartTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  public void unsetStartTime() {
    this.startTime = null;
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return this.startTime != null;
  }

  public void setStartTimeIsSet(boolean value) {
    if (!value) {
      this.startTime = null;
    }
  }

  public String getEndTime() {
    return this.endTime;
  }

  public TSearchCommentForm setEndTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

  public void unsetEndTime() {
    this.endTime = null;
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return this.endTime != null;
  }

  public void setEndTimeIsSet(boolean value) {
    if (!value) {
      this.endTime = null;
    }
  }

  public int getNeedAuth() {
    return this.needAuth;
  }

  public TSearchCommentForm setNeedAuth(int needAuth) {
    this.needAuth = needAuth;
    setNeedAuthIsSet(true);
    return this;
  }

  public void unsetNeedAuth() {
    __isset_bit_vector.clear(__NEEDAUTH_ISSET_ID);
  }

  /** Returns true if field needAuth is set (has been assigned a value) and false otherwise */
  public boolean isSetNeedAuth() {
    return __isset_bit_vector.get(__NEEDAUTH_ISSET_ID);
  }

  public void setNeedAuthIsSet(boolean value) {
    __isset_bit_vector.set(__NEEDAUTH_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public TSearchCommentForm setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bit_vector.clear(__STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return __isset_bit_vector.get(__STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bit_vector.set(__STATUS_ISSET_ID, value);
  }

  public int getHide() {
    return this.hide;
  }

  public TSearchCommentForm setHide(int hide) {
    this.hide = hide;
    setHideIsSet(true);
    return this;
  }

  public void unsetHide() {
    __isset_bit_vector.clear(__HIDE_ISSET_ID);
  }

  /** Returns true if field hide is set (has been assigned a value) and false otherwise */
  public boolean isSetHide() {
    return __isset_bit_vector.get(__HIDE_ISSET_ID);
  }

  public void setHideIsSet(boolean value) {
    __isset_bit_vector.set(__HIDE_ISSET_ID, value);
  }

  public int getPage() {
    return this.page;
  }

  public TSearchCommentForm setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bit_vector.clear(__PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return __isset_bit_vector.get(__PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bit_vector.set(__PAGE_ISSET_ID, value);
  }

  public int getPageSize() {
    return this.pageSize;
  }

  public TSearchCommentForm setPageSize(int pageSize) {
    this.pageSize = pageSize;
    setPageSizeIsSet(true);
    return this;
  }

  public void unsetPageSize() {
    __isset_bit_vector.clear(__PAGESIZE_ISSET_ID);
  }

  /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
  public boolean isSetPageSize() {
    return __isset_bit_vector.get(__PAGESIZE_ISSET_ID);
  }

  public void setPageSizeIsSet(boolean value) {
    __isset_bit_vector.set(__PAGESIZE_ISSET_ID, value);
  }

  public String getSort() {
    return this.sort;
  }

  public TSearchCommentForm setSort(String sort) {
    this.sort = sort;
    return this;
  }

  public void unsetSort() {
    this.sort = null;
  }

  /** Returns true if field sort is set (has been assigned a value) and false otherwise */
  public boolean isSetSort() {
    return this.sort != null;
  }

  public void setSortIsSet(boolean value) {
    if (!value) {
      this.sort = null;
    }
  }

  public String getSortDir() {
    return this.sortDir;
  }

  public TSearchCommentForm setSortDir(String sortDir) {
    this.sortDir = sortDir;
    return this;
  }

  public void unsetSortDir() {
    this.sortDir = null;
  }

  /** Returns true if field sortDir is set (has been assigned a value) and false otherwise */
  public boolean isSetSortDir() {
    return this.sortDir != null;
  }

  public void setSortDirIsSet(boolean value) {
    if (!value) {
      this.sortDir = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case POINT_ID:
      if (value == null) {
        unsetPointId();
      } else {
        setPointId((Integer)value);
      }
      break;

    case POINT:
      if (value == null) {
        unsetPoint();
      } else {
        setPoint((String)value);
      }
      break;

    case REPLY_ID:
      if (value == null) {
        unsetReplyId();
      } else {
        setReplyId((Integer)value);
      }
      break;

    case SUBJECT:
      if (value == null) {
        unsetSubject();
      } else {
        setSubject((String)value);
      }
      break;

    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((String)value);
      }
      break;

    case USER_NAME:
      if (value == null) {
        unsetUserName();
      } else {
        setUserName((String)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Integer)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case IP:
      if (value == null) {
        unsetIp();
      } else {
        setIp((String)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((String)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((String)value);
      }
      break;

    case NEED_AUTH:
      if (value == null) {
        unsetNeedAuth();
      } else {
        setNeedAuth((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case HIDE:
      if (value == null) {
        unsetHide();
      } else {
        setHide((Integer)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case PAGE_SIZE:
      if (value == null) {
        unsetPageSize();
      } else {
        setPageSize((Integer)value);
      }
      break;

    case SORT:
      if (value == null) {
        unsetSort();
      } else {
        setSort((String)value);
      }
      break;

    case SORT_DIR:
      if (value == null) {
        unsetSortDir();
      } else {
        setSortDir((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case POINT_ID:
      return Integer.valueOf(getPointId());

    case POINT:
      return getPoint();

    case REPLY_ID:
      return Integer.valueOf(getReplyId());

    case SUBJECT:
      return getSubject();

    case URL:
      return getUrl();

    case USER_NAME:
      return getUserName();

    case USER_ID:
      return Integer.valueOf(getUserId());

    case CONTENT:
      return getContent();

    case IP:
      return getIp();

    case START_TIME:
      return getStartTime();

    case END_TIME:
      return getEndTime();

    case NEED_AUTH:
      return Integer.valueOf(getNeedAuth());

    case STATUS:
      return Integer.valueOf(getStatus());

    case HIDE:
      return Integer.valueOf(getHide());

    case PAGE:
      return Integer.valueOf(getPage());

    case PAGE_SIZE:
      return Integer.valueOf(getPageSize());

    case SORT:
      return getSort();

    case SORT_DIR:
      return getSortDir();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case POINT_ID:
      return isSetPointId();
    case POINT:
      return isSetPoint();
    case REPLY_ID:
      return isSetReplyId();
    case SUBJECT:
      return isSetSubject();
    case URL:
      return isSetUrl();
    case USER_NAME:
      return isSetUserName();
    case USER_ID:
      return isSetUserId();
    case CONTENT:
      return isSetContent();
    case IP:
      return isSetIp();
    case START_TIME:
      return isSetStartTime();
    case END_TIME:
      return isSetEndTime();
    case NEED_AUTH:
      return isSetNeedAuth();
    case STATUS:
      return isSetStatus();
    case HIDE:
      return isSetHide();
    case PAGE:
      return isSetPage();
    case PAGE_SIZE:
      return isSetPageSize();
    case SORT:
      return isSetSort();
    case SORT_DIR:
      return isSetSortDir();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TSearchCommentForm)
      return this.equals((TSearchCommentForm)that);
    return false;
  }

  public boolean equals(TSearchCommentForm that) {
    if (that == null)
      return false;

    boolean this_present_pointId = true && this.isSetPointId();
    boolean that_present_pointId = true && that.isSetPointId();
    if (this_present_pointId || that_present_pointId) {
      if (!(this_present_pointId && that_present_pointId))
        return false;
      if (this.pointId != that.pointId)
        return false;
    }

    boolean this_present_point = true && this.isSetPoint();
    boolean that_present_point = true && that.isSetPoint();
    if (this_present_point || that_present_point) {
      if (!(this_present_point && that_present_point))
        return false;
      if (!this.point.equals(that.point))
        return false;
    }

    boolean this_present_replyId = true && this.isSetReplyId();
    boolean that_present_replyId = true && that.isSetReplyId();
    if (this_present_replyId || that_present_replyId) {
      if (!(this_present_replyId && that_present_replyId))
        return false;
      if (this.replyId != that.replyId)
        return false;
    }

    boolean this_present_subject = true && this.isSetSubject();
    boolean that_present_subject = true && that.isSetSubject();
    if (this_present_subject || that_present_subject) {
      if (!(this_present_subject && that_present_subject))
        return false;
      if (!this.subject.equals(that.subject))
        return false;
    }

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    boolean this_present_userName = true && this.isSetUserName();
    boolean that_present_userName = true && that.isSetUserName();
    if (this_present_userName || that_present_userName) {
      if (!(this_present_userName && that_present_userName))
        return false;
      if (!this.userName.equals(that.userName))
        return false;
    }

    boolean this_present_userId = true && this.isSetUserId();
    boolean that_present_userId = true && that.isSetUserId();
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_ip = true && this.isSetIp();
    boolean that_present_ip = true && that.isSetIp();
    if (this_present_ip || that_present_ip) {
      if (!(this_present_ip && that_present_ip))
        return false;
      if (!this.ip.equals(that.ip))
        return false;
    }

    boolean this_present_startTime = true && this.isSetStartTime();
    boolean that_present_startTime = true && that.isSetStartTime();
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (!this.startTime.equals(that.startTime))
        return false;
    }

    boolean this_present_endTime = true && this.isSetEndTime();
    boolean that_present_endTime = true && that.isSetEndTime();
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (!this.endTime.equals(that.endTime))
        return false;
    }

    boolean this_present_needAuth = true && this.isSetNeedAuth();
    boolean that_present_needAuth = true && that.isSetNeedAuth();
    if (this_present_needAuth || that_present_needAuth) {
      if (!(this_present_needAuth && that_present_needAuth))
        return false;
      if (this.needAuth != that.needAuth)
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_hide = true && this.isSetHide();
    boolean that_present_hide = true && that.isSetHide();
    if (this_present_hide || that_present_hide) {
      if (!(this_present_hide && that_present_hide))
        return false;
      if (this.hide != that.hide)
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_pageSize = true;
    boolean that_present_pageSize = true;
    if (this_present_pageSize || that_present_pageSize) {
      if (!(this_present_pageSize && that_present_pageSize))
        return false;
      if (this.pageSize != that.pageSize)
        return false;
    }

    boolean this_present_sort = true && this.isSetSort();
    boolean that_present_sort = true && that.isSetSort();
    if (this_present_sort || that_present_sort) {
      if (!(this_present_sort && that_present_sort))
        return false;
      if (!this.sort.equals(that.sort))
        return false;
    }

    boolean this_present_sortDir = true && this.isSetSortDir();
    boolean that_present_sortDir = true && that.isSetSortDir();
    if (this_present_sortDir || that_present_sortDir) {
      if (!(this_present_sortDir && that_present_sortDir))
        return false;
      if (!this.sortDir.equals(that.sortDir))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TSearchCommentForm other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TSearchCommentForm typedOther = (TSearchCommentForm)other;

    lastComparison = Boolean.valueOf(isSetPointId()).compareTo(typedOther.isSetPointId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPointId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pointId, typedOther.pointId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoint()).compareTo(typedOther.isSetPoint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.point, typedOther.point);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReplyId()).compareTo(typedOther.isSetReplyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReplyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replyId, typedOther.replyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubject()).compareTo(typedOther.isSetSubject());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubject()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subject, typedOther.subject);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUrl()).compareTo(typedOther.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, typedOther.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserName()).compareTo(typedOther.isSetUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, typedOther.userName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, typedOther.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(typedOther.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, typedOther.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIp()).compareTo(typedOther.isSetIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip, typedOther.ip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(typedOther.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, typedOther.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(typedOther.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, typedOther.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNeedAuth()).compareTo(typedOther.isSetNeedAuth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNeedAuth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.needAuth, typedOther.needAuth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHide()).compareTo(typedOther.isSetHide());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHide()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hide, typedOther.hide);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(typedOther.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, typedOther.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(typedOther.isSetPageSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, typedOther.pageSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSort()).compareTo(typedOther.isSetSort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sort, typedOther.sort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSortDir()).compareTo(typedOther.isSetSortDir());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSortDir()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortDir, typedOther.sortDir);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TSearchCommentForm(");
    boolean first = true;

    if (isSetPointId()) {
      sb.append("pointId:");
      sb.append(this.pointId);
      first = false;
    }
    if (isSetPoint()) {
      if (!first) sb.append(", ");
      sb.append("point:");
      if (this.point == null) {
        sb.append("null");
      } else {
        sb.append(this.point);
      }
      first = false;
    }
    if (isSetReplyId()) {
      if (!first) sb.append(", ");
      sb.append("replyId:");
      sb.append(this.replyId);
      first = false;
    }
    if (isSetSubject()) {
      if (!first) sb.append(", ");
      sb.append("subject:");
      if (this.subject == null) {
        sb.append("null");
      } else {
        sb.append(this.subject);
      }
      first = false;
    }
    if (isSetUrl()) {
      if (!first) sb.append(", ");
      sb.append("url:");
      if (this.url == null) {
        sb.append("null");
      } else {
        sb.append(this.url);
      }
      first = false;
    }
    if (isSetUserName()) {
      if (!first) sb.append(", ");
      sb.append("userName:");
      if (this.userName == null) {
        sb.append("null");
      } else {
        sb.append(this.userName);
      }
      first = false;
    }
    if (isSetUserId()) {
      if (!first) sb.append(", ");
      sb.append("userId:");
      sb.append(this.userId);
      first = false;
    }
    if (isSetContent()) {
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        sb.append(this.content);
      }
      first = false;
    }
    if (isSetIp()) {
      if (!first) sb.append(", ");
      sb.append("ip:");
      if (this.ip == null) {
        sb.append("null");
      } else {
        sb.append(this.ip);
      }
      first = false;
    }
    if (isSetStartTime()) {
      if (!first) sb.append(", ");
      sb.append("startTime:");
      if (this.startTime == null) {
        sb.append("null");
      } else {
        sb.append(this.startTime);
      }
      first = false;
    }
    if (isSetEndTime()) {
      if (!first) sb.append(", ");
      sb.append("endTime:");
      if (this.endTime == null) {
        sb.append("null");
      } else {
        sb.append(this.endTime);
      }
      first = false;
    }
    if (isSetNeedAuth()) {
      if (!first) sb.append(", ");
      sb.append("needAuth:");
      sb.append(this.needAuth);
      first = false;
    }
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      sb.append(this.status);
      first = false;
    }
    if (isSetHide()) {
      if (!first) sb.append(", ");
      sb.append("hide:");
      sb.append(this.hide);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pageSize:");
    sb.append(this.pageSize);
    first = false;
    if (isSetSort()) {
      if (!first) sb.append(", ");
      sb.append("sort:");
      if (this.sort == null) {
        sb.append("null");
      } else {
        sb.append(this.sort);
      }
      first = false;
    }
    if (isSetSortDir()) {
      if (!first) sb.append(", ");
      sb.append("sortDir:");
      if (this.sortDir == null) {
        sb.append("null");
      } else {
        sb.append(this.sortDir);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TSearchCommentFormStandardSchemeFactory implements SchemeFactory {
    public TSearchCommentFormStandardScheme getScheme() {
      return new TSearchCommentFormStandardScheme();
    }
  }

  private static class TSearchCommentFormStandardScheme extends StandardScheme<TSearchCommentForm> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TSearchCommentForm struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // POINT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pointId = iprot.readI32();
              struct.setPointIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // POINT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.point = iprot.readString();
              struct.setPointIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REPLY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.replyId = iprot.readI32();
              struct.setReplyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SUBJECT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.subject = iprot.readString();
              struct.setSubjectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.url = iprot.readString();
              struct.setUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userName = iprot.readString();
              struct.setUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userId = iprot.readI32();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ip = iprot.readString();
              struct.setIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.startTime = iprot.readString();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endTime = iprot.readString();
              struct.setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // NEED_AUTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.needAuth = iprot.readI32();
              struct.setNeedAuthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // HIDE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hide = iprot.readI32();
              struct.setHideIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // PAGE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pageSize = iprot.readI32();
              struct.setPageSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // SORT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sort = iprot.readString();
              struct.setSortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // SORT_DIR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sortDir = iprot.readString();
              struct.setSortDirIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TSearchCommentForm struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetPointId()) {
        oprot.writeFieldBegin(POINT_ID_FIELD_DESC);
        oprot.writeI32(struct.pointId);
        oprot.writeFieldEnd();
      }
      if (struct.point != null) {
        if (struct.isSetPoint()) {
          oprot.writeFieldBegin(POINT_FIELD_DESC);
          oprot.writeString(struct.point);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetReplyId()) {
        oprot.writeFieldBegin(REPLY_ID_FIELD_DESC);
        oprot.writeI32(struct.replyId);
        oprot.writeFieldEnd();
      }
      if (struct.subject != null) {
        if (struct.isSetSubject()) {
          oprot.writeFieldBegin(SUBJECT_FIELD_DESC);
          oprot.writeString(struct.subject);
          oprot.writeFieldEnd();
        }
      }
      if (struct.url != null) {
        if (struct.isSetUrl()) {
          oprot.writeFieldBegin(URL_FIELD_DESC);
          oprot.writeString(struct.url);
          oprot.writeFieldEnd();
        }
      }
      if (struct.userName != null) {
        if (struct.isSetUserName()) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.userName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetUserId()) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
      }
      if (struct.content != null) {
        if (struct.isSetContent()) {
          oprot.writeFieldBegin(CONTENT_FIELD_DESC);
          oprot.writeString(struct.content);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ip != null) {
        if (struct.isSetIp()) {
          oprot.writeFieldBegin(IP_FIELD_DESC);
          oprot.writeString(struct.ip);
          oprot.writeFieldEnd();
        }
      }
      if (struct.startTime != null) {
        if (struct.isSetStartTime()) {
          oprot.writeFieldBegin(START_TIME_FIELD_DESC);
          oprot.writeString(struct.startTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.endTime != null) {
        if (struct.isSetEndTime()) {
          oprot.writeFieldBegin(END_TIME_FIELD_DESC);
          oprot.writeString(struct.endTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetNeedAuth()) {
        oprot.writeFieldBegin(NEED_AUTH_FIELD_DESC);
        oprot.writeI32(struct.needAuth);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStatus()) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHide()) {
        oprot.writeFieldBegin(HIDE_FIELD_DESC);
        oprot.writeI32(struct.hide);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
      oprot.writeI32(struct.pageSize);
      oprot.writeFieldEnd();
      if (struct.sort != null) {
        if (struct.isSetSort()) {
          oprot.writeFieldBegin(SORT_FIELD_DESC);
          oprot.writeString(struct.sort);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sortDir != null) {
        if (struct.isSetSortDir()) {
          oprot.writeFieldBegin(SORT_DIR_FIELD_DESC);
          oprot.writeString(struct.sortDir);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TSearchCommentFormTupleSchemeFactory implements SchemeFactory {
    public TSearchCommentFormTupleScheme getScheme() {
      return new TSearchCommentFormTupleScheme();
    }
  }

  private static class TSearchCommentFormTupleScheme extends TupleScheme<TSearchCommentForm> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TSearchCommentForm struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPointId()) {
        optionals.set(0);
      }
      if (struct.isSetPoint()) {
        optionals.set(1);
      }
      if (struct.isSetReplyId()) {
        optionals.set(2);
      }
      if (struct.isSetSubject()) {
        optionals.set(3);
      }
      if (struct.isSetUrl()) {
        optionals.set(4);
      }
      if (struct.isSetUserName()) {
        optionals.set(5);
      }
      if (struct.isSetUserId()) {
        optionals.set(6);
      }
      if (struct.isSetContent()) {
        optionals.set(7);
      }
      if (struct.isSetIp()) {
        optionals.set(8);
      }
      if (struct.isSetStartTime()) {
        optionals.set(9);
      }
      if (struct.isSetEndTime()) {
        optionals.set(10);
      }
      if (struct.isSetNeedAuth()) {
        optionals.set(11);
      }
      if (struct.isSetStatus()) {
        optionals.set(12);
      }
      if (struct.isSetHide()) {
        optionals.set(13);
      }
      if (struct.isSetPage()) {
        optionals.set(14);
      }
      if (struct.isSetPageSize()) {
        optionals.set(15);
      }
      if (struct.isSetSort()) {
        optionals.set(16);
      }
      if (struct.isSetSortDir()) {
        optionals.set(17);
      }
      oprot.writeBitSet(optionals, 18);
      if (struct.isSetPointId()) {
        oprot.writeI32(struct.pointId);
      }
      if (struct.isSetPoint()) {
        oprot.writeString(struct.point);
      }
      if (struct.isSetReplyId()) {
        oprot.writeI32(struct.replyId);
      }
      if (struct.isSetSubject()) {
        oprot.writeString(struct.subject);
      }
      if (struct.isSetUrl()) {
        oprot.writeString(struct.url);
      }
      if (struct.isSetUserName()) {
        oprot.writeString(struct.userName);
      }
      if (struct.isSetUserId()) {
        oprot.writeI32(struct.userId);
      }
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
      if (struct.isSetIp()) {
        oprot.writeString(struct.ip);
      }
      if (struct.isSetStartTime()) {
        oprot.writeString(struct.startTime);
      }
      if (struct.isSetEndTime()) {
        oprot.writeString(struct.endTime);
      }
      if (struct.isSetNeedAuth()) {
        oprot.writeI32(struct.needAuth);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetHide()) {
        oprot.writeI32(struct.hide);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetPageSize()) {
        oprot.writeI32(struct.pageSize);
      }
      if (struct.isSetSort()) {
        oprot.writeString(struct.sort);
      }
      if (struct.isSetSortDir()) {
        oprot.writeString(struct.sortDir);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TSearchCommentForm struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(18);
      if (incoming.get(0)) {
        struct.pointId = iprot.readI32();
        struct.setPointIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.point = iprot.readString();
        struct.setPointIsSet(true);
      }
      if (incoming.get(2)) {
        struct.replyId = iprot.readI32();
        struct.setReplyIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.subject = iprot.readString();
        struct.setSubjectIsSet(true);
      }
      if (incoming.get(4)) {
        struct.url = iprot.readString();
        struct.setUrlIsSet(true);
      }
      if (incoming.get(5)) {
        struct.userName = iprot.readString();
        struct.setUserNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.userId = iprot.readI32();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
      if (incoming.get(8)) {
        struct.ip = iprot.readString();
        struct.setIpIsSet(true);
      }
      if (incoming.get(9)) {
        struct.startTime = iprot.readString();
        struct.setStartTimeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.endTime = iprot.readString();
        struct.setEndTimeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.needAuth = iprot.readI32();
        struct.setNeedAuthIsSet(true);
      }
      if (incoming.get(12)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(13)) {
        struct.hide = iprot.readI32();
        struct.setHideIsSet(true);
      }
      if (incoming.get(14)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(15)) {
        struct.pageSize = iprot.readI32();
        struct.setPageSizeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.sort = iprot.readString();
        struct.setSortIsSet(true);
      }
      if (incoming.get(17)) {
        struct.sortDir = iprot.readString();
        struct.setSortDirIsSet(true);
      }
    }
  }

}

