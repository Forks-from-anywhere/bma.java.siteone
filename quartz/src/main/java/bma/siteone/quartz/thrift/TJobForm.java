/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package bma.siteone.quartz.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;

public class TJobForm implements org.apache.thrift.TBase<TJobForm, TJobForm._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TJobForm");

  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("group", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DURABILITY_FIELD_DESC = new org.apache.thrift.protocol.TField("durability", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField RECOVER_FIELD_DESC = new org.apache.thrift.protocol.TField("recover", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField DISALLOW_CONCURRENT_FIELD_DESC = new org.apache.thrift.protocol.TField("disallowConcurrent", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField PERSIST_AFTER_EXECUTION_FIELD_DESC = new org.apache.thrift.protocol.TField("persistAfterExecution", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField JOB_DATAS_FIELD_DESC = new org.apache.thrift.protocol.TField("jobDatas", org.apache.thrift.protocol.TType.MAP, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TJobFormStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TJobFormTupleSchemeFactory());
  }

  public String type; // required
  public String name; // required
  public String group; // required
  public boolean durability; // required
  public boolean recover; // required
  public boolean disallowConcurrent; // required
  public boolean persistAfterExecution; // required
  public Map<String,String> jobDatas; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TYPE((short)1, "type"),
    NAME((short)2, "name"),
    GROUP((short)3, "group"),
    DURABILITY((short)4, "durability"),
    RECOVER((short)5, "recover"),
    DISALLOW_CONCURRENT((short)6, "disallowConcurrent"),
    PERSIST_AFTER_EXECUTION((short)7, "persistAfterExecution"),
    JOB_DATAS((short)8, "jobDatas");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TYPE
          return TYPE;
        case 2: // NAME
          return NAME;
        case 3: // GROUP
          return GROUP;
        case 4: // DURABILITY
          return DURABILITY;
        case 5: // RECOVER
          return RECOVER;
        case 6: // DISALLOW_CONCURRENT
          return DISALLOW_CONCURRENT;
        case 7: // PERSIST_AFTER_EXECUTION
          return PERSIST_AFTER_EXECUTION;
        case 8: // JOB_DATAS
          return JOB_DATAS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
	public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
	public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DURABILITY_ISSET_ID = 0;
  private static final int __RECOVER_ISSET_ID = 1;
  private static final int __DISALLOWCONCURRENT_ISSET_ID = 2;
  private static final int __PERSISTAFTEREXECUTION_ISSET_ID = 3;
  private BitSet __isset_bit_vector = new BitSet(4);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GROUP, new org.apache.thrift.meta_data.FieldMetaData("group", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DURABILITY, new org.apache.thrift.meta_data.FieldMetaData("durability", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.RECOVER, new org.apache.thrift.meta_data.FieldMetaData("recover", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DISALLOW_CONCURRENT, new org.apache.thrift.meta_data.FieldMetaData("disallowConcurrent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PERSIST_AFTER_EXECUTION, new org.apache.thrift.meta_data.FieldMetaData("persistAfterExecution", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.JOB_DATAS, new org.apache.thrift.meta_data.FieldMetaData("jobDatas", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TJobForm.class, metaDataMap);
  }

  public TJobForm() {
  }

  public TJobForm(
    String type,
    String name,
    String group,
    boolean durability,
    boolean recover,
    boolean disallowConcurrent,
    boolean persistAfterExecution,
    Map<String,String> jobDatas)
  {
    this();
    this.type = type;
    this.name = name;
    this.group = group;
    this.durability = durability;
    setDurabilityIsSet(true);
    this.recover = recover;
    setRecoverIsSet(true);
    this.disallowConcurrent = disallowConcurrent;
    setDisallowConcurrentIsSet(true);
    this.persistAfterExecution = persistAfterExecution;
    setPersistAfterExecutionIsSet(true);
    this.jobDatas = jobDatas;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TJobForm(TJobForm other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetGroup()) {
      this.group = other.group;
    }
    this.durability = other.durability;
    this.recover = other.recover;
    this.disallowConcurrent = other.disallowConcurrent;
    this.persistAfterExecution = other.persistAfterExecution;
    if (other.isSetJobDatas()) {
      Map<String,String> __this__jobDatas = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.jobDatas.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__jobDatas_copy_key = other_element_key;

        String __this__jobDatas_copy_value = other_element_value;

        __this__jobDatas.put(__this__jobDatas_copy_key, __this__jobDatas_copy_value);
      }
      this.jobDatas = __this__jobDatas;
    }
  }

  @Override
public TJobForm deepCopy() {
    return new TJobForm(this);
  }

  @Override
  public void clear() {
    this.type = null;
    this.name = null;
    this.group = null;
    setDurabilityIsSet(false);
    this.durability = false;
    setRecoverIsSet(false);
    this.recover = false;
    setDisallowConcurrentIsSet(false);
    this.disallowConcurrent = false;
    setPersistAfterExecutionIsSet(false);
    this.persistAfterExecution = false;
    this.jobDatas = null;
  }

  public String getType() {
    return this.type;
  }

  public TJobForm setType(String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public TJobForm setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getGroup() {
    return this.group;
  }

  public TJobForm setGroup(String group) {
    this.group = group;
    return this;
  }

  public void unsetGroup() {
    this.group = null;
  }

  /** Returns true if field group is set (has been assigned a value) and false otherwise */
  public boolean isSetGroup() {
    return this.group != null;
  }

  public void setGroupIsSet(boolean value) {
    if (!value) {
      this.group = null;
    }
  }

  public boolean isDurability() {
    return this.durability;
  }

  public TJobForm setDurability(boolean durability) {
    this.durability = durability;
    setDurabilityIsSet(true);
    return this;
  }

  public void unsetDurability() {
    __isset_bit_vector.clear(__DURABILITY_ISSET_ID);
  }

  /** Returns true if field durability is set (has been assigned a value) and false otherwise */
  public boolean isSetDurability() {
    return __isset_bit_vector.get(__DURABILITY_ISSET_ID);
  }

  public void setDurabilityIsSet(boolean value) {
    __isset_bit_vector.set(__DURABILITY_ISSET_ID, value);
  }

  public boolean isRecover() {
    return this.recover;
  }

  public TJobForm setRecover(boolean recover) {
    this.recover = recover;
    setRecoverIsSet(true);
    return this;
  }

  public void unsetRecover() {
    __isset_bit_vector.clear(__RECOVER_ISSET_ID);
  }

  /** Returns true if field recover is set (has been assigned a value) and false otherwise */
  public boolean isSetRecover() {
    return __isset_bit_vector.get(__RECOVER_ISSET_ID);
  }

  public void setRecoverIsSet(boolean value) {
    __isset_bit_vector.set(__RECOVER_ISSET_ID, value);
  }

  public boolean isDisallowConcurrent() {
    return this.disallowConcurrent;
  }

  public TJobForm setDisallowConcurrent(boolean disallowConcurrent) {
    this.disallowConcurrent = disallowConcurrent;
    setDisallowConcurrentIsSet(true);
    return this;
  }

  public void unsetDisallowConcurrent() {
    __isset_bit_vector.clear(__DISALLOWCONCURRENT_ISSET_ID);
  }

  /** Returns true if field disallowConcurrent is set (has been assigned a value) and false otherwise */
  public boolean isSetDisallowConcurrent() {
    return __isset_bit_vector.get(__DISALLOWCONCURRENT_ISSET_ID);
  }

  public void setDisallowConcurrentIsSet(boolean value) {
    __isset_bit_vector.set(__DISALLOWCONCURRENT_ISSET_ID, value);
  }

  public boolean isPersistAfterExecution() {
    return this.persistAfterExecution;
  }

  public TJobForm setPersistAfterExecution(boolean persistAfterExecution) {
    this.persistAfterExecution = persistAfterExecution;
    setPersistAfterExecutionIsSet(true);
    return this;
  }

  public void unsetPersistAfterExecution() {
    __isset_bit_vector.clear(__PERSISTAFTEREXECUTION_ISSET_ID);
  }

  /** Returns true if field persistAfterExecution is set (has been assigned a value) and false otherwise */
  public boolean isSetPersistAfterExecution() {
    return __isset_bit_vector.get(__PERSISTAFTEREXECUTION_ISSET_ID);
  }

  public void setPersistAfterExecutionIsSet(boolean value) {
    __isset_bit_vector.set(__PERSISTAFTEREXECUTION_ISSET_ID, value);
  }

  public int getJobDatasSize() {
    return (this.jobDatas == null) ? 0 : this.jobDatas.size();
  }

  public void putToJobDatas(String key, String val) {
    if (this.jobDatas == null) {
      this.jobDatas = new HashMap<String,String>();
    }
    this.jobDatas.put(key, val);
  }

  public Map<String,String> getJobDatas() {
    return this.jobDatas;
  }

  public TJobForm setJobDatas(Map<String,String> jobDatas) {
    this.jobDatas = jobDatas;
    return this;
  }

  public void unsetJobDatas() {
    this.jobDatas = null;
  }

  /** Returns true if field jobDatas is set (has been assigned a value) and false otherwise */
  public boolean isSetJobDatas() {
    return this.jobDatas != null;
  }

  public void setJobDatasIsSet(boolean value) {
    if (!value) {
      this.jobDatas = null;
    }
  }

  @Override
public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case GROUP:
      if (value == null) {
        unsetGroup();
      } else {
        setGroup((String)value);
      }
      break;

    case DURABILITY:
      if (value == null) {
        unsetDurability();
      } else {
        setDurability((Boolean)value);
      }
      break;

    case RECOVER:
      if (value == null) {
        unsetRecover();
      } else {
        setRecover((Boolean)value);
      }
      break;

    case DISALLOW_CONCURRENT:
      if (value == null) {
        unsetDisallowConcurrent();
      } else {
        setDisallowConcurrent((Boolean)value);
      }
      break;

    case PERSIST_AFTER_EXECUTION:
      if (value == null) {
        unsetPersistAfterExecution();
      } else {
        setPersistAfterExecution((Boolean)value);
      }
      break;

    case JOB_DATAS:
      if (value == null) {
        unsetJobDatas();
      } else {
        setJobDatas((Map<String,String>)value);
      }
      break;

    }
  }

  @Override
public Object getFieldValue(_Fields field) {
    switch (field) {
    case TYPE:
      return getType();

    case NAME:
      return getName();

    case GROUP:
      return getGroup();

    case DURABILITY:
      return Boolean.valueOf(isDurability());

    case RECOVER:
      return Boolean.valueOf(isRecover());

    case DISALLOW_CONCURRENT:
      return Boolean.valueOf(isDisallowConcurrent());

    case PERSIST_AFTER_EXECUTION:
      return Boolean.valueOf(isPersistAfterExecution());

    case JOB_DATAS:
      return getJobDatas();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TYPE:
      return isSetType();
    case NAME:
      return isSetName();
    case GROUP:
      return isSetGroup();
    case DURABILITY:
      return isSetDurability();
    case RECOVER:
      return isSetRecover();
    case DISALLOW_CONCURRENT:
      return isSetDisallowConcurrent();
    case PERSIST_AFTER_EXECUTION:
      return isSetPersistAfterExecution();
    case JOB_DATAS:
      return isSetJobDatas();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TJobForm)
      return this.equals((TJobForm)that);
    return false;
  }

  public boolean equals(TJobForm that) {
    if (that == null)
      return false;

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_group = true && this.isSetGroup();
    boolean that_present_group = true && that.isSetGroup();
    if (this_present_group || that_present_group) {
      if (!(this_present_group && that_present_group))
        return false;
      if (!this.group.equals(that.group))
        return false;
    }

    boolean this_present_durability = true;
    boolean that_present_durability = true;
    if (this_present_durability || that_present_durability) {
      if (!(this_present_durability && that_present_durability))
        return false;
      if (this.durability != that.durability)
        return false;
    }

    boolean this_present_recover = true;
    boolean that_present_recover = true;
    if (this_present_recover || that_present_recover) {
      if (!(this_present_recover && that_present_recover))
        return false;
      if (this.recover != that.recover)
        return false;
    }

    boolean this_present_disallowConcurrent = true;
    boolean that_present_disallowConcurrent = true;
    if (this_present_disallowConcurrent || that_present_disallowConcurrent) {
      if (!(this_present_disallowConcurrent && that_present_disallowConcurrent))
        return false;
      if (this.disallowConcurrent != that.disallowConcurrent)
        return false;
    }

    boolean this_present_persistAfterExecution = true;
    boolean that_present_persistAfterExecution = true;
    if (this_present_persistAfterExecution || that_present_persistAfterExecution) {
      if (!(this_present_persistAfterExecution && that_present_persistAfterExecution))
        return false;
      if (this.persistAfterExecution != that.persistAfterExecution)
        return false;
    }

    boolean this_present_jobDatas = true && this.isSetJobDatas();
    boolean that_present_jobDatas = true && that.isSetJobDatas();
    if (this_present_jobDatas || that_present_jobDatas) {
      if (!(this_present_jobDatas && that_present_jobDatas))
        return false;
      if (!this.jobDatas.equals(that.jobDatas))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
public int compareTo(TJobForm other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TJobForm typedOther = other;

    lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, typedOther.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroup()).compareTo(typedOther.isSetGroup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroup()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group, typedOther.group);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDurability()).compareTo(typedOther.isSetDurability());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDurability()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.durability, typedOther.durability);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecover()).compareTo(typedOther.isSetRecover());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecover()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recover, typedOther.recover);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisallowConcurrent()).compareTo(typedOther.isSetDisallowConcurrent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisallowConcurrent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disallowConcurrent, typedOther.disallowConcurrent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPersistAfterExecution()).compareTo(typedOther.isSetPersistAfterExecution());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPersistAfterExecution()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.persistAfterExecution, typedOther.persistAfterExecution);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJobDatas()).compareTo(typedOther.isSetJobDatas());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobDatas()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobDatas, typedOther.jobDatas);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @Override
public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  @Override
public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TJobForm(");
    boolean first = true;

    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("group:");
    if (this.group == null) {
      sb.append("null");
    } else {
      sb.append(this.group);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("durability:");
    sb.append(this.durability);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recover:");
    sb.append(this.recover);
    first = false;
    if (!first) sb.append(", ");
    sb.append("disallowConcurrent:");
    sb.append(this.disallowConcurrent);
    first = false;
    if (!first) sb.append(", ");
    sb.append("persistAfterExecution:");
    sb.append(this.persistAfterExecution);
    first = false;
    if (!first) sb.append(", ");
    sb.append("jobDatas:");
    if (this.jobDatas == null) {
      sb.append("null");
    } else {
      sb.append(this.jobDatas);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TJobFormStandardSchemeFactory implements SchemeFactory {
    @Override
	public TJobFormStandardScheme getScheme() {
      return new TJobFormStandardScheme();
    }
  }

  private static class TJobFormStandardScheme extends StandardScheme<TJobForm> {

    @Override
	public void read(org.apache.thrift.protocol.TProtocol iprot, TJobForm struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // GROUP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.group = iprot.readString();
              struct.setGroupIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DURABILITY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.durability = iprot.readBool();
              struct.setDurabilityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RECOVER
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.recover = iprot.readBool();
              struct.setRecoverIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DISALLOW_CONCURRENT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.disallowConcurrent = iprot.readBool();
              struct.setDisallowConcurrentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PERSIST_AFTER_EXECUTION
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.persistAfterExecution = iprot.readBool();
              struct.setPersistAfterExecutionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // JOB_DATAS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.jobDatas = new HashMap<String,String>(2*_map0.size);
                for (int _i1 = 0; _i1 < _map0.size; ++_i1)
                {
                  String _key2; // required
                  String _val3; // required
                  _key2 = iprot.readString();
                  _val3 = iprot.readString();
                  struct.jobDatas.put(_key2, _val3);
                }
                iprot.readMapEnd();
              }
              struct.setJobDatasIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
	public void write(org.apache.thrift.protocol.TProtocol oprot, TJobForm struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeString(struct.type);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.group != null) {
        oprot.writeFieldBegin(GROUP_FIELD_DESC);
        oprot.writeString(struct.group);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DURABILITY_FIELD_DESC);
      oprot.writeBool(struct.durability);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECOVER_FIELD_DESC);
      oprot.writeBool(struct.recover);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DISALLOW_CONCURRENT_FIELD_DESC);
      oprot.writeBool(struct.disallowConcurrent);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PERSIST_AFTER_EXECUTION_FIELD_DESC);
      oprot.writeBool(struct.persistAfterExecution);
      oprot.writeFieldEnd();
      if (struct.jobDatas != null) {
        oprot.writeFieldBegin(JOB_DATAS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.jobDatas.size()));
          for (Map.Entry<String, String> _iter4 : struct.jobDatas.entrySet())
          {
            oprot.writeString(_iter4.getKey());
            oprot.writeString(_iter4.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TJobFormTupleSchemeFactory implements SchemeFactory {
    @Override
	public TJobFormTupleScheme getScheme() {
      return new TJobFormTupleScheme();
    }
  }

  private static class TJobFormTupleScheme extends TupleScheme<TJobForm> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TJobForm struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetType()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetGroup()) {
        optionals.set(2);
      }
      if (struct.isSetDurability()) {
        optionals.set(3);
      }
      if (struct.isSetRecover()) {
        optionals.set(4);
      }
      if (struct.isSetDisallowConcurrent()) {
        optionals.set(5);
      }
      if (struct.isSetPersistAfterExecution()) {
        optionals.set(6);
      }
      if (struct.isSetJobDatas()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetGroup()) {
        oprot.writeString(struct.group);
      }
      if (struct.isSetDurability()) {
        oprot.writeBool(struct.durability);
      }
      if (struct.isSetRecover()) {
        oprot.writeBool(struct.recover);
      }
      if (struct.isSetDisallowConcurrent()) {
        oprot.writeBool(struct.disallowConcurrent);
      }
      if (struct.isSetPersistAfterExecution()) {
        oprot.writeBool(struct.persistAfterExecution);
      }
      if (struct.isSetJobDatas()) {
        {
          oprot.writeI32(struct.jobDatas.size());
          for (Map.Entry<String, String> _iter5 : struct.jobDatas.entrySet())
          {
            oprot.writeString(_iter5.getKey());
            oprot.writeString(_iter5.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TJobForm struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.group = iprot.readString();
        struct.setGroupIsSet(true);
      }
      if (incoming.get(3)) {
        struct.durability = iprot.readBool();
        struct.setDurabilityIsSet(true);
      }
      if (incoming.get(4)) {
        struct.recover = iprot.readBool();
        struct.setRecoverIsSet(true);
      }
      if (incoming.get(5)) {
        struct.disallowConcurrent = iprot.readBool();
        struct.setDisallowConcurrentIsSet(true);
      }
      if (incoming.get(6)) {
        struct.persistAfterExecution = iprot.readBool();
        struct.setPersistAfterExecutionIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.jobDatas = new HashMap<String,String>(2*_map6.size);
          for (int _i7 = 0; _i7 < _map6.size; ++_i7)
          {
            String _key8; // required
            String _val9; // required
            _key8 = iprot.readString();
            _val9 = iprot.readString();
            struct.jobDatas.put(_key8, _val9);
          }
        }
        struct.setJobDatasIsSet(true);
      }
    }
  }

}

