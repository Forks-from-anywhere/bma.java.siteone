/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package bma.siteone.quartz.thrift;

import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;

import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

public class TQuartzService {

  public interface Iface {

    public boolean pause(String serviceName, boolean pause) throws org.apache.thrift.TException;

    public String newJob(String serviceName, TJobForm job, TTriggerForm trigger) throws org.apache.thrift.TException;

    public String newTrigger(String serviceName, String jobName, String groupName, TTriggerForm trigger) throws org.apache.thrift.TException;

    public boolean removeJob(String serviceName, String jobName, String jobGroup) throws org.apache.thrift.TException;

    public boolean removeTrigger(String serviceName, String triggerName, String triggerGroup) throws org.apache.thrift.TException;

    public TJobInfo queryJob(String serviceName, String jobName, String jobGroup) throws org.apache.thrift.TException;

    public TTriggerInfo queryTrigger(String serviceName, String triggerName, String triggerGroup) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void pause(String serviceName, boolean pause, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.pause_call> resultHandler) throws org.apache.thrift.TException;

    public void newJob(String serviceName, TJobForm job, TTriggerForm trigger, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.newJob_call> resultHandler) throws org.apache.thrift.TException;

    public void newTrigger(String serviceName, String jobName, String groupName, TTriggerForm trigger, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.newTrigger_call> resultHandler) throws org.apache.thrift.TException;

    public void removeJob(String serviceName, String jobName, String jobGroup, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.removeJob_call> resultHandler) throws org.apache.thrift.TException;

    public void removeTrigger(String serviceName, String triggerName, String triggerGroup, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.removeTrigger_call> resultHandler) throws org.apache.thrift.TException;

    public void queryJob(String serviceName, String jobName, String jobGroup, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.queryJob_call> resultHandler) throws org.apache.thrift.TException;

    public void queryTrigger(String serviceName, String triggerName, String triggerGroup, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.queryTrigger_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      @Override
	public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      @Override
	public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    @Override
	public boolean pause(String serviceName, boolean pause) throws org.apache.thrift.TException
    {
      send_pause(serviceName, pause);
      return recv_pause();
    }

    public void send_pause(String serviceName, boolean pause) throws org.apache.thrift.TException
    {
      pause_args args = new pause_args();
      args.setServiceName(serviceName);
      args.setPause(pause);
      sendBase("pause", args);
    }

    public boolean recv_pause() throws org.apache.thrift.TException
    {
      pause_result result = new pause_result();
      receiveBase(result, "pause");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "pause failed: unknown result");
    }

    @Override
	public String newJob(String serviceName, TJobForm job, TTriggerForm trigger) throws org.apache.thrift.TException
    {
      send_newJob(serviceName, job, trigger);
      return recv_newJob();
    }

    public void send_newJob(String serviceName, TJobForm job, TTriggerForm trigger) throws org.apache.thrift.TException
    {
      newJob_args args = new newJob_args();
      args.setServiceName(serviceName);
      args.setJob(job);
      args.setTrigger(trigger);
      sendBase("newJob", args);
    }

    public String recv_newJob() throws org.apache.thrift.TException
    {
      newJob_result result = new newJob_result();
      receiveBase(result, "newJob");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "newJob failed: unknown result");
    }

    @Override
	public String newTrigger(String serviceName, String jobName, String groupName, TTriggerForm trigger) throws org.apache.thrift.TException
    {
      send_newTrigger(serviceName, jobName, groupName, trigger);
      return recv_newTrigger();
    }

    public void send_newTrigger(String serviceName, String jobName, String groupName, TTriggerForm trigger) throws org.apache.thrift.TException
    {
      newTrigger_args args = new newTrigger_args();
      args.setServiceName(serviceName);
      args.setJobName(jobName);
      args.setGroupName(groupName);
      args.setTrigger(trigger);
      sendBase("newTrigger", args);
    }

    public String recv_newTrigger() throws org.apache.thrift.TException
    {
      newTrigger_result result = new newTrigger_result();
      receiveBase(result, "newTrigger");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "newTrigger failed: unknown result");
    }

    @Override
	public boolean removeJob(String serviceName, String jobName, String jobGroup) throws org.apache.thrift.TException
    {
      send_removeJob(serviceName, jobName, jobGroup);
      return recv_removeJob();
    }

    public void send_removeJob(String serviceName, String jobName, String jobGroup) throws org.apache.thrift.TException
    {
      removeJob_args args = new removeJob_args();
      args.setServiceName(serviceName);
      args.setJobName(jobName);
      args.setJobGroup(jobGroup);
      sendBase("removeJob", args);
    }

    public boolean recv_removeJob() throws org.apache.thrift.TException
    {
      removeJob_result result = new removeJob_result();
      receiveBase(result, "removeJob");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "removeJob failed: unknown result");
    }

    @Override
	public boolean removeTrigger(String serviceName, String triggerName, String triggerGroup) throws org.apache.thrift.TException
    {
      send_removeTrigger(serviceName, triggerName, triggerGroup);
      return recv_removeTrigger();
    }

    public void send_removeTrigger(String serviceName, String triggerName, String triggerGroup) throws org.apache.thrift.TException
    {
      removeTrigger_args args = new removeTrigger_args();
      args.setServiceName(serviceName);
      args.setTriggerName(triggerName);
      args.setTriggerGroup(triggerGroup);
      sendBase("removeTrigger", args);
    }

    public boolean recv_removeTrigger() throws org.apache.thrift.TException
    {
      removeTrigger_result result = new removeTrigger_result();
      receiveBase(result, "removeTrigger");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "removeTrigger failed: unknown result");
    }

    @Override
	public TJobInfo queryJob(String serviceName, String jobName, String jobGroup) throws org.apache.thrift.TException
    {
      send_queryJob(serviceName, jobName, jobGroup);
      return recv_queryJob();
    }

    public void send_queryJob(String serviceName, String jobName, String jobGroup) throws org.apache.thrift.TException
    {
      queryJob_args args = new queryJob_args();
      args.setServiceName(serviceName);
      args.setJobName(jobName);
      args.setJobGroup(jobGroup);
      sendBase("queryJob", args);
    }

    public TJobInfo recv_queryJob() throws org.apache.thrift.TException
    {
      queryJob_result result = new queryJob_result();
      receiveBase(result, "queryJob");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryJob failed: unknown result");
    }

    @Override
	public TTriggerInfo queryTrigger(String serviceName, String triggerName, String triggerGroup) throws org.apache.thrift.TException
    {
      send_queryTrigger(serviceName, triggerName, triggerGroup);
      return recv_queryTrigger();
    }

    public void send_queryTrigger(String serviceName, String triggerName, String triggerGroup) throws org.apache.thrift.TException
    {
      queryTrigger_args args = new queryTrigger_args();
      args.setServiceName(serviceName);
      args.setTriggerName(triggerName);
      args.setTriggerGroup(triggerGroup);
      sendBase("queryTrigger", args);
    }

    public TTriggerInfo recv_queryTrigger() throws org.apache.thrift.TException
    {
      queryTrigger_result result = new queryTrigger_result();
      receiveBase(result, "queryTrigger");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryTrigger failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      @Override
	public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    @Override
	public void pause(String serviceName, boolean pause, org.apache.thrift.async.AsyncMethodCallback<pause_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      pause_call method_call = new pause_call(serviceName, pause, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class pause_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String serviceName;
      private boolean pause;
      public pause_call(String serviceName, boolean pause, org.apache.thrift.async.AsyncMethodCallback<pause_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.serviceName = serviceName;
        this.pause = pause;
      }

      @Override
	public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("pause", org.apache.thrift.protocol.TMessageType.CALL, 0));
        pause_args args = new pause_args();
        args.setServiceName(serviceName);
        args.setPause(pause);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_pause();
      }
    }

    @Override
	public void newJob(String serviceName, TJobForm job, TTriggerForm trigger, org.apache.thrift.async.AsyncMethodCallback<newJob_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      newJob_call method_call = new newJob_call(serviceName, job, trigger, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class newJob_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String serviceName;
      private TJobForm job;
      private TTriggerForm trigger;
      public newJob_call(String serviceName, TJobForm job, TTriggerForm trigger, org.apache.thrift.async.AsyncMethodCallback<newJob_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.serviceName = serviceName;
        this.job = job;
        this.trigger = trigger;
      }

      @Override
	public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("newJob", org.apache.thrift.protocol.TMessageType.CALL, 0));
        newJob_args args = new newJob_args();
        args.setServiceName(serviceName);
        args.setJob(job);
        args.setTrigger(trigger);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_newJob();
      }
    }

    @Override
	public void newTrigger(String serviceName, String jobName, String groupName, TTriggerForm trigger, org.apache.thrift.async.AsyncMethodCallback<newTrigger_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      newTrigger_call method_call = new newTrigger_call(serviceName, jobName, groupName, trigger, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class newTrigger_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String serviceName;
      private String jobName;
      private String groupName;
      private TTriggerForm trigger;
      public newTrigger_call(String serviceName, String jobName, String groupName, TTriggerForm trigger, org.apache.thrift.async.AsyncMethodCallback<newTrigger_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.serviceName = serviceName;
        this.jobName = jobName;
        this.groupName = groupName;
        this.trigger = trigger;
      }

      @Override
	public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("newTrigger", org.apache.thrift.protocol.TMessageType.CALL, 0));
        newTrigger_args args = new newTrigger_args();
        args.setServiceName(serviceName);
        args.setJobName(jobName);
        args.setGroupName(groupName);
        args.setTrigger(trigger);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_newTrigger();
      }
    }

    @Override
	public void removeJob(String serviceName, String jobName, String jobGroup, org.apache.thrift.async.AsyncMethodCallback<removeJob_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeJob_call method_call = new removeJob_call(serviceName, jobName, jobGroup, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeJob_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String serviceName;
      private String jobName;
      private String jobGroup;
      public removeJob_call(String serviceName, String jobName, String jobGroup, org.apache.thrift.async.AsyncMethodCallback<removeJob_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.serviceName = serviceName;
        this.jobName = jobName;
        this.jobGroup = jobGroup;
      }

      @Override
	public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeJob", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeJob_args args = new removeJob_args();
        args.setServiceName(serviceName);
        args.setJobName(jobName);
        args.setJobGroup(jobGroup);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_removeJob();
      }
    }

    @Override
	public void removeTrigger(String serviceName, String triggerName, String triggerGroup, org.apache.thrift.async.AsyncMethodCallback<removeTrigger_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeTrigger_call method_call = new removeTrigger_call(serviceName, triggerName, triggerGroup, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeTrigger_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String serviceName;
      private String triggerName;
      private String triggerGroup;
      public removeTrigger_call(String serviceName, String triggerName, String triggerGroup, org.apache.thrift.async.AsyncMethodCallback<removeTrigger_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.serviceName = serviceName;
        this.triggerName = triggerName;
        this.triggerGroup = triggerGroup;
      }

      @Override
	public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeTrigger", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeTrigger_args args = new removeTrigger_args();
        args.setServiceName(serviceName);
        args.setTriggerName(triggerName);
        args.setTriggerGroup(triggerGroup);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_removeTrigger();
      }
    }

    @Override
	public void queryJob(String serviceName, String jobName, String jobGroup, org.apache.thrift.async.AsyncMethodCallback<queryJob_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryJob_call method_call = new queryJob_call(serviceName, jobName, jobGroup, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryJob_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String serviceName;
      private String jobName;
      private String jobGroup;
      public queryJob_call(String serviceName, String jobName, String jobGroup, org.apache.thrift.async.AsyncMethodCallback<queryJob_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.serviceName = serviceName;
        this.jobName = jobName;
        this.jobGroup = jobGroup;
      }

      @Override
	public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryJob", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryJob_args args = new queryJob_args();
        args.setServiceName(serviceName);
        args.setJobName(jobName);
        args.setJobGroup(jobGroup);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TJobInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryJob();
      }
    }

    @Override
	public void queryTrigger(String serviceName, String triggerName, String triggerGroup, org.apache.thrift.async.AsyncMethodCallback<queryTrigger_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryTrigger_call method_call = new queryTrigger_call(serviceName, triggerName, triggerGroup, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryTrigger_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String serviceName;
      private String triggerName;
      private String triggerGroup;
      public queryTrigger_call(String serviceName, String triggerName, String triggerGroup, org.apache.thrift.async.AsyncMethodCallback<queryTrigger_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.serviceName = serviceName;
        this.triggerName = triggerName;
        this.triggerGroup = triggerGroup;
      }

      @Override
	public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryTrigger", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryTrigger_args args = new queryTrigger_args();
        args.setServiceName(serviceName);
        args.setTriggerName(triggerName);
        args.setTriggerGroup(triggerGroup);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TTriggerInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryTrigger();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {

    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("pause", new pause());
      processMap.put("newJob", new newJob());
      processMap.put("newTrigger", new newTrigger());
      processMap.put("removeJob", new removeJob());
      processMap.put("removeTrigger", new removeTrigger());
      processMap.put("queryJob", new queryJob());
      processMap.put("queryTrigger", new queryTrigger());
      return processMap;
    }

    private static class pause<I extends Iface> extends org.apache.thrift.ProcessFunction<I, pause_args> {
      public pause() {
        super("pause");
      }

      @Override
	protected pause_args getEmptyArgsInstance() {
        return new pause_args();
      }

      @Override
	protected pause_result getResult(I iface, pause_args args) throws org.apache.thrift.TException {
        pause_result result = new pause_result();
        result.success = iface.pause(args.serviceName, args.pause);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class newJob<I extends Iface> extends org.apache.thrift.ProcessFunction<I, newJob_args> {
      public newJob() {
        super("newJob");
      }

      @Override
	protected newJob_args getEmptyArgsInstance() {
        return new newJob_args();
      }

      @Override
	protected newJob_result getResult(I iface, newJob_args args) throws org.apache.thrift.TException {
        newJob_result result = new newJob_result();
        result.success = iface.newJob(args.serviceName, args.job, args.trigger);
        return result;
      }
    }

    private static class newTrigger<I extends Iface> extends org.apache.thrift.ProcessFunction<I, newTrigger_args> {
      public newTrigger() {
        super("newTrigger");
      }

      @Override
	protected newTrigger_args getEmptyArgsInstance() {
        return new newTrigger_args();
      }

      @Override
	protected newTrigger_result getResult(I iface, newTrigger_args args) throws org.apache.thrift.TException {
        newTrigger_result result = new newTrigger_result();
        result.success = iface.newTrigger(args.serviceName, args.jobName, args.groupName, args.trigger);
        return result;
      }
    }

    private static class removeJob<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeJob_args> {
      public removeJob() {
        super("removeJob");
      }

      @Override
	protected removeJob_args getEmptyArgsInstance() {
        return new removeJob_args();
      }

      @Override
	protected removeJob_result getResult(I iface, removeJob_args args) throws org.apache.thrift.TException {
        removeJob_result result = new removeJob_result();
        result.success = iface.removeJob(args.serviceName, args.jobName, args.jobGroup);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class removeTrigger<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeTrigger_args> {
      public removeTrigger() {
        super("removeTrigger");
      }

      @Override
	protected removeTrigger_args getEmptyArgsInstance() {
        return new removeTrigger_args();
      }

      @Override
	protected removeTrigger_result getResult(I iface, removeTrigger_args args) throws org.apache.thrift.TException {
        removeTrigger_result result = new removeTrigger_result();
        result.success = iface.removeTrigger(args.serviceName, args.triggerName, args.triggerGroup);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class queryJob<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryJob_args> {
      public queryJob() {
        super("queryJob");
      }

      @Override
	protected queryJob_args getEmptyArgsInstance() {
        return new queryJob_args();
      }

      @Override
	protected queryJob_result getResult(I iface, queryJob_args args) throws org.apache.thrift.TException {
        queryJob_result result = new queryJob_result();
        result.success = iface.queryJob(args.serviceName, args.jobName, args.jobGroup);
        return result;
      }
    }

    private static class queryTrigger<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryTrigger_args> {
      public queryTrigger() {
        super("queryTrigger");
      }

      @Override
	protected queryTrigger_args getEmptyArgsInstance() {
        return new queryTrigger_args();
      }

      @Override
	protected queryTrigger_result getResult(I iface, queryTrigger_args args) throws org.apache.thrift.TException {
        queryTrigger_result result = new queryTrigger_result();
        result.success = iface.queryTrigger(args.serviceName, args.triggerName, args.triggerGroup);
        return result;
      }
    }

  }

  public static class pause_args implements org.apache.thrift.TBase<pause_args, pause_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pause_args");

    private static final org.apache.thrift.protocol.TField SERVICE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PAUSE_FIELD_DESC = new org.apache.thrift.protocol.TField("pause", org.apache.thrift.protocol.TType.BOOL, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new pause_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new pause_argsTupleSchemeFactory());
    }

    public String serviceName; // required
    public boolean pause; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVICE_NAME((short)1, "serviceName"),
      PAUSE((short)2, "pause");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVICE_NAME
            return SERVICE_NAME;
          case 2: // PAUSE
            return PAUSE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
	public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
	public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAUSE_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVICE_NAME, new org.apache.thrift.meta_data.FieldMetaData("serviceName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAUSE, new org.apache.thrift.meta_data.FieldMetaData("pause", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pause_args.class, metaDataMap);
    }

    public pause_args() {
    }

    public pause_args(
      String serviceName,
      boolean pause)
    {
      this();
      this.serviceName = serviceName;
      this.pause = pause;
      setPauseIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pause_args(pause_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetServiceName()) {
        this.serviceName = other.serviceName;
      }
      this.pause = other.pause;
    }

    @Override
	public pause_args deepCopy() {
      return new pause_args(this);
    }

    @Override
    public void clear() {
      this.serviceName = null;
      setPauseIsSet(false);
      this.pause = false;
    }

    public String getServiceName() {
      return this.serviceName;
    }

    public pause_args setServiceName(String serviceName) {
      this.serviceName = serviceName;
      return this;
    }

    public void unsetServiceName() {
      this.serviceName = null;
    }

    /** Returns true if field serviceName is set (has been assigned a value) and false otherwise */
    public boolean isSetServiceName() {
      return this.serviceName != null;
    }

    public void setServiceNameIsSet(boolean value) {
      if (!value) {
        this.serviceName = null;
      }
    }

    public boolean isPause() {
      return this.pause;
    }

    public pause_args setPause(boolean pause) {
      this.pause = pause;
      setPauseIsSet(true);
      return this;
    }

    public void unsetPause() {
      __isset_bit_vector.clear(__PAUSE_ISSET_ID);
    }

    /** Returns true if field pause is set (has been assigned a value) and false otherwise */
    public boolean isSetPause() {
      return __isset_bit_vector.get(__PAUSE_ISSET_ID);
    }

    public void setPauseIsSet(boolean value) {
      __isset_bit_vector.set(__PAUSE_ISSET_ID, value);
    }

    @Override
	public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SERVICE_NAME:
        if (value == null) {
          unsetServiceName();
        } else {
          setServiceName((String)value);
        }
        break;

      case PAUSE:
        if (value == null) {
          unsetPause();
        } else {
          setPause((Boolean)value);
        }
        break;

      }
    }

    @Override
	public Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVICE_NAME:
        return getServiceName();

      case PAUSE:
        return Boolean.valueOf(isPause());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
	public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SERVICE_NAME:
        return isSetServiceName();
      case PAUSE:
        return isSetPause();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pause_args)
        return this.equals((pause_args)that);
      return false;
    }

    public boolean equals(pause_args that) {
      if (that == null)
        return false;

      boolean this_present_serviceName = true && this.isSetServiceName();
      boolean that_present_serviceName = true && that.isSetServiceName();
      if (this_present_serviceName || that_present_serviceName) {
        if (!(this_present_serviceName && that_present_serviceName))
          return false;
        if (!this.serviceName.equals(that.serviceName))
          return false;
      }

      boolean this_present_pause = true;
      boolean that_present_pause = true;
      if (this_present_pause || that_present_pause) {
        if (!(this_present_pause && that_present_pause))
          return false;
        if (this.pause != that.pause)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
	public int compareTo(pause_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      pause_args typedOther = other;

      lastComparison = Boolean.valueOf(isSetServiceName()).compareTo(typedOther.isSetServiceName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServiceName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceName, typedOther.serviceName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPause()).compareTo(typedOther.isSetPause());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPause()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pause, typedOther.pause);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @Override
	public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    @Override
	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pause_args(");
      boolean first = true;

      sb.append("serviceName:");
      if (this.serviceName == null) {
        sb.append("null");
      } else {
        sb.append(this.serviceName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pause:");
      sb.append(this.pause);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pause_argsStandardSchemeFactory implements SchemeFactory {
      @Override
	public pause_argsStandardScheme getScheme() {
        return new pause_argsStandardScheme();
      }
    }

    private static class pause_argsStandardScheme extends StandardScheme<pause_args> {

      @Override
	public void read(org.apache.thrift.protocol.TProtocol iprot, pause_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERVICE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.serviceName = iprot.readString();
                struct.setServiceNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAUSE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.pause = iprot.readBool();
                struct.setPauseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
	public void write(org.apache.thrift.protocol.TProtocol oprot, pause_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.serviceName != null) {
          oprot.writeFieldBegin(SERVICE_NAME_FIELD_DESC);
          oprot.writeString(struct.serviceName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PAUSE_FIELD_DESC);
        oprot.writeBool(struct.pause);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pause_argsTupleSchemeFactory implements SchemeFactory {
      @Override
	public pause_argsTupleScheme getScheme() {
        return new pause_argsTupleScheme();
      }
    }

    private static class pause_argsTupleScheme extends TupleScheme<pause_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pause_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetServiceName()) {
          optionals.set(0);
        }
        if (struct.isSetPause()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetServiceName()) {
          oprot.writeString(struct.serviceName);
        }
        if (struct.isSetPause()) {
          oprot.writeBool(struct.pause);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pause_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.serviceName = iprot.readString();
          struct.setServiceNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pause = iprot.readBool();
          struct.setPauseIsSet(true);
        }
      }
    }

  }

  public static class pause_result implements org.apache.thrift.TBase<pause_result, pause_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pause_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new pause_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new pause_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
	public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
	public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pause_result.class, metaDataMap);
    }

    public pause_result() {
    }

    public pause_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pause_result(pause_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    @Override
	public pause_result deepCopy() {
      return new pause_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public pause_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    @Override
	public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    @Override
	public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
	public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pause_result)
        return this.equals((pause_result)that);
      return false;
    }

    public boolean equals(pause_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
	public int compareTo(pause_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      pause_result typedOther = other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @Override
	public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    @Override
	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pause_result(");

      sb.append("success:");
      sb.append(this.success);

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pause_resultStandardSchemeFactory implements SchemeFactory {
      @Override
	public pause_resultStandardScheme getScheme() {
        return new pause_resultStandardScheme();
      }
    }

    private static class pause_resultStandardScheme extends StandardScheme<pause_result> {

      @Override
	public void read(org.apache.thrift.protocol.TProtocol iprot, pause_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
	public void write(org.apache.thrift.protocol.TProtocol oprot, pause_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pause_resultTupleSchemeFactory implements SchemeFactory {
      @Override
	public pause_resultTupleScheme getScheme() {
        return new pause_resultTupleScheme();
      }
    }

    private static class pause_resultTupleScheme extends TupleScheme<pause_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pause_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pause_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class newJob_args implements org.apache.thrift.TBase<newJob_args, newJob_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("newJob_args");

    private static final org.apache.thrift.protocol.TField SERVICE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField JOB_FIELD_DESC = new org.apache.thrift.protocol.TField("job", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField TRIGGER_FIELD_DESC = new org.apache.thrift.protocol.TField("trigger", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new newJob_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new newJob_argsTupleSchemeFactory());
    }

    public String serviceName; // required
    public TJobForm job; // required
    public TTriggerForm trigger; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVICE_NAME((short)1, "serviceName"),
      JOB((short)2, "job"),
      TRIGGER((short)3, "trigger");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVICE_NAME
            return SERVICE_NAME;
          case 2: // JOB
            return JOB;
          case 3: // TRIGGER
            return TRIGGER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
	public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
	public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVICE_NAME, new org.apache.thrift.meta_data.FieldMetaData("serviceName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.JOB, new org.apache.thrift.meta_data.FieldMetaData("job", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TJobForm.class)));
      tmpMap.put(_Fields.TRIGGER, new org.apache.thrift.meta_data.FieldMetaData("trigger", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTriggerForm.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(newJob_args.class, metaDataMap);
    }

    public newJob_args() {
    }

    public newJob_args(
      String serviceName,
      TJobForm job,
      TTriggerForm trigger)
    {
      this();
      this.serviceName = serviceName;
      this.job = job;
      this.trigger = trigger;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public newJob_args(newJob_args other) {
      if (other.isSetServiceName()) {
        this.serviceName = other.serviceName;
      }
      if (other.isSetJob()) {
        this.job = new TJobForm(other.job);
      }
      if (other.isSetTrigger()) {
        this.trigger = new TTriggerForm(other.trigger);
      }
    }

    @Override
	public newJob_args deepCopy() {
      return new newJob_args(this);
    }

    @Override
    public void clear() {
      this.serviceName = null;
      this.job = null;
      this.trigger = null;
    }

    public String getServiceName() {
      return this.serviceName;
    }

    public newJob_args setServiceName(String serviceName) {
      this.serviceName = serviceName;
      return this;
    }

    public void unsetServiceName() {
      this.serviceName = null;
    }

    /** Returns true if field serviceName is set (has been assigned a value) and false otherwise */
    public boolean isSetServiceName() {
      return this.serviceName != null;
    }

    public void setServiceNameIsSet(boolean value) {
      if (!value) {
        this.serviceName = null;
      }
    }

    public TJobForm getJob() {
      return this.job;
    }

    public newJob_args setJob(TJobForm job) {
      this.job = job;
      return this;
    }

    public void unsetJob() {
      this.job = null;
    }

    /** Returns true if field job is set (has been assigned a value) and false otherwise */
    public boolean isSetJob() {
      return this.job != null;
    }

    public void setJobIsSet(boolean value) {
      if (!value) {
        this.job = null;
      }
    }

    public TTriggerForm getTrigger() {
      return this.trigger;
    }

    public newJob_args setTrigger(TTriggerForm trigger) {
      this.trigger = trigger;
      return this;
    }

    public void unsetTrigger() {
      this.trigger = null;
    }

    /** Returns true if field trigger is set (has been assigned a value) and false otherwise */
    public boolean isSetTrigger() {
      return this.trigger != null;
    }

    public void setTriggerIsSet(boolean value) {
      if (!value) {
        this.trigger = null;
      }
    }

    @Override
	public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SERVICE_NAME:
        if (value == null) {
          unsetServiceName();
        } else {
          setServiceName((String)value);
        }
        break;

      case JOB:
        if (value == null) {
          unsetJob();
        } else {
          setJob((TJobForm)value);
        }
        break;

      case TRIGGER:
        if (value == null) {
          unsetTrigger();
        } else {
          setTrigger((TTriggerForm)value);
        }
        break;

      }
    }

    @Override
	public Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVICE_NAME:
        return getServiceName();

      case JOB:
        return getJob();

      case TRIGGER:
        return getTrigger();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
	public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SERVICE_NAME:
        return isSetServiceName();
      case JOB:
        return isSetJob();
      case TRIGGER:
        return isSetTrigger();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof newJob_args)
        return this.equals((newJob_args)that);
      return false;
    }

    public boolean equals(newJob_args that) {
      if (that == null)
        return false;

      boolean this_present_serviceName = true && this.isSetServiceName();
      boolean that_present_serviceName = true && that.isSetServiceName();
      if (this_present_serviceName || that_present_serviceName) {
        if (!(this_present_serviceName && that_present_serviceName))
          return false;
        if (!this.serviceName.equals(that.serviceName))
          return false;
      }

      boolean this_present_job = true && this.isSetJob();
      boolean that_present_job = true && that.isSetJob();
      if (this_present_job || that_present_job) {
        if (!(this_present_job && that_present_job))
          return false;
        if (!this.job.equals(that.job))
          return false;
      }

      boolean this_present_trigger = true && this.isSetTrigger();
      boolean that_present_trigger = true && that.isSetTrigger();
      if (this_present_trigger || that_present_trigger) {
        if (!(this_present_trigger && that_present_trigger))
          return false;
        if (!this.trigger.equals(that.trigger))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
	public int compareTo(newJob_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      newJob_args typedOther = other;

      lastComparison = Boolean.valueOf(isSetServiceName()).compareTo(typedOther.isSetServiceName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServiceName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceName, typedOther.serviceName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetJob()).compareTo(typedOther.isSetJob());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJob()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.job, typedOther.job);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTrigger()).compareTo(typedOther.isSetTrigger());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTrigger()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trigger, typedOther.trigger);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @Override
	public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    @Override
	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("newJob_args(");
      boolean first = true;

      sb.append("serviceName:");
      if (this.serviceName == null) {
        sb.append("null");
      } else {
        sb.append(this.serviceName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("job:");
      if (this.job == null) {
        sb.append("null");
      } else {
        sb.append(this.job);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("trigger:");
      if (this.trigger == null) {
        sb.append("null");
      } else {
        sb.append(this.trigger);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class newJob_argsStandardSchemeFactory implements SchemeFactory {
      @Override
	public newJob_argsStandardScheme getScheme() {
        return new newJob_argsStandardScheme();
      }
    }

    private static class newJob_argsStandardScheme extends StandardScheme<newJob_args> {

      @Override
	public void read(org.apache.thrift.protocol.TProtocol iprot, newJob_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERVICE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.serviceName = iprot.readString();
                struct.setServiceNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // JOB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.job = new TJobForm();
                struct.job.read(iprot);
                struct.setJobIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TRIGGER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.trigger = new TTriggerForm();
                struct.trigger.read(iprot);
                struct.setTriggerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
	public void write(org.apache.thrift.protocol.TProtocol oprot, newJob_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.serviceName != null) {
          oprot.writeFieldBegin(SERVICE_NAME_FIELD_DESC);
          oprot.writeString(struct.serviceName);
          oprot.writeFieldEnd();
        }
        if (struct.job != null) {
          oprot.writeFieldBegin(JOB_FIELD_DESC);
          struct.job.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.trigger != null) {
          oprot.writeFieldBegin(TRIGGER_FIELD_DESC);
          struct.trigger.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class newJob_argsTupleSchemeFactory implements SchemeFactory {
      @Override
	public newJob_argsTupleScheme getScheme() {
        return new newJob_argsTupleScheme();
      }
    }

    private static class newJob_argsTupleScheme extends TupleScheme<newJob_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, newJob_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetServiceName()) {
          optionals.set(0);
        }
        if (struct.isSetJob()) {
          optionals.set(1);
        }
        if (struct.isSetTrigger()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetServiceName()) {
          oprot.writeString(struct.serviceName);
        }
        if (struct.isSetJob()) {
          struct.job.write(oprot);
        }
        if (struct.isSetTrigger()) {
          struct.trigger.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, newJob_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.serviceName = iprot.readString();
          struct.setServiceNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.job = new TJobForm();
          struct.job.read(iprot);
          struct.setJobIsSet(true);
        }
        if (incoming.get(2)) {
          struct.trigger = new TTriggerForm();
          struct.trigger.read(iprot);
          struct.setTriggerIsSet(true);
        }
      }
    }

  }

  public static class newJob_result implements org.apache.thrift.TBase<newJob_result, newJob_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("newJob_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new newJob_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new newJob_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
	public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
	public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(newJob_result.class, metaDataMap);
    }

    public newJob_result() {
    }

    public newJob_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public newJob_result(newJob_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    @Override
	public newJob_result deepCopy() {
      return new newJob_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public newJob_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
	public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    @Override
	public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
	public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof newJob_result)
        return this.equals((newJob_result)that);
      return false;
    }

    public boolean equals(newJob_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
	public int compareTo(newJob_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      newJob_result typedOther = other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @Override
	public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    @Override
	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("newJob_result(");

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class newJob_resultStandardSchemeFactory implements SchemeFactory {
      @Override
	public newJob_resultStandardScheme getScheme() {
        return new newJob_resultStandardScheme();
      }
    }

    private static class newJob_resultStandardScheme extends StandardScheme<newJob_result> {

      @Override
	public void read(org.apache.thrift.protocol.TProtocol iprot, newJob_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
	public void write(org.apache.thrift.protocol.TProtocol oprot, newJob_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class newJob_resultTupleSchemeFactory implements SchemeFactory {
      @Override
	public newJob_resultTupleScheme getScheme() {
        return new newJob_resultTupleScheme();
      }
    }

    private static class newJob_resultTupleScheme extends TupleScheme<newJob_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, newJob_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, newJob_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class newTrigger_args implements org.apache.thrift.TBase<newTrigger_args, newTrigger_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("newTrigger_args");

    private static final org.apache.thrift.protocol.TField SERVICE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField JOB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("jobName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField GROUP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("groupName", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField TRIGGER_FIELD_DESC = new org.apache.thrift.protocol.TField("trigger", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new newTrigger_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new newTrigger_argsTupleSchemeFactory());
    }

    public String serviceName; // required
    public String jobName; // required
    public String groupName; // required
    public TTriggerForm trigger; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVICE_NAME((short)1, "serviceName"),
      JOB_NAME((short)2, "jobName"),
      GROUP_NAME((short)3, "groupName"),
      TRIGGER((short)4, "trigger");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVICE_NAME
            return SERVICE_NAME;
          case 2: // JOB_NAME
            return JOB_NAME;
          case 3: // GROUP_NAME
            return GROUP_NAME;
          case 4: // TRIGGER
            return TRIGGER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
	public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
	public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVICE_NAME, new org.apache.thrift.meta_data.FieldMetaData("serviceName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.JOB_NAME, new org.apache.thrift.meta_data.FieldMetaData("jobName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.GROUP_NAME, new org.apache.thrift.meta_data.FieldMetaData("groupName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TRIGGER, new org.apache.thrift.meta_data.FieldMetaData("trigger", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTriggerForm.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(newTrigger_args.class, metaDataMap);
    }

    public newTrigger_args() {
    }

    public newTrigger_args(
      String serviceName,
      String jobName,
      String groupName,
      TTriggerForm trigger)
    {
      this();
      this.serviceName = serviceName;
      this.jobName = jobName;
      this.groupName = groupName;
      this.trigger = trigger;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public newTrigger_args(newTrigger_args other) {
      if (other.isSetServiceName()) {
        this.serviceName = other.serviceName;
      }
      if (other.isSetJobName()) {
        this.jobName = other.jobName;
      }
      if (other.isSetGroupName()) {
        this.groupName = other.groupName;
      }
      if (other.isSetTrigger()) {
        this.trigger = new TTriggerForm(other.trigger);
      }
    }

    @Override
	public newTrigger_args deepCopy() {
      return new newTrigger_args(this);
    }

    @Override
    public void clear() {
      this.serviceName = null;
      this.jobName = null;
      this.groupName = null;
      this.trigger = null;
    }

    public String getServiceName() {
      return this.serviceName;
    }

    public newTrigger_args setServiceName(String serviceName) {
      this.serviceName = serviceName;
      return this;
    }

    public void unsetServiceName() {
      this.serviceName = null;
    }

    /** Returns true if field serviceName is set (has been assigned a value) and false otherwise */
    public boolean isSetServiceName() {
      return this.serviceName != null;
    }

    public void setServiceNameIsSet(boolean value) {
      if (!value) {
        this.serviceName = null;
      }
    }

    public String getJobName() {
      return this.jobName;
    }

    public newTrigger_args setJobName(String jobName) {
      this.jobName = jobName;
      return this;
    }

    public void unsetJobName() {
      this.jobName = null;
    }

    /** Returns true if field jobName is set (has been assigned a value) and false otherwise */
    public boolean isSetJobName() {
      return this.jobName != null;
    }

    public void setJobNameIsSet(boolean value) {
      if (!value) {
        this.jobName = null;
      }
    }

    public String getGroupName() {
      return this.groupName;
    }

    public newTrigger_args setGroupName(String groupName) {
      this.groupName = groupName;
      return this;
    }

    public void unsetGroupName() {
      this.groupName = null;
    }

    /** Returns true if field groupName is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupName() {
      return this.groupName != null;
    }

    public void setGroupNameIsSet(boolean value) {
      if (!value) {
        this.groupName = null;
      }
    }

    public TTriggerForm getTrigger() {
      return this.trigger;
    }

    public newTrigger_args setTrigger(TTriggerForm trigger) {
      this.trigger = trigger;
      return this;
    }

    public void unsetTrigger() {
      this.trigger = null;
    }

    /** Returns true if field trigger is set (has been assigned a value) and false otherwise */
    public boolean isSetTrigger() {
      return this.trigger != null;
    }

    public void setTriggerIsSet(boolean value) {
      if (!value) {
        this.trigger = null;
      }
    }

    @Override
	public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SERVICE_NAME:
        if (value == null) {
          unsetServiceName();
        } else {
          setServiceName((String)value);
        }
        break;

      case JOB_NAME:
        if (value == null) {
          unsetJobName();
        } else {
          setJobName((String)value);
        }
        break;

      case GROUP_NAME:
        if (value == null) {
          unsetGroupName();
        } else {
          setGroupName((String)value);
        }
        break;

      case TRIGGER:
        if (value == null) {
          unsetTrigger();
        } else {
          setTrigger((TTriggerForm)value);
        }
        break;

      }
    }

    @Override
	public Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVICE_NAME:
        return getServiceName();

      case JOB_NAME:
        return getJobName();

      case GROUP_NAME:
        return getGroupName();

      case TRIGGER:
        return getTrigger();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
	public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SERVICE_NAME:
        return isSetServiceName();
      case JOB_NAME:
        return isSetJobName();
      case GROUP_NAME:
        return isSetGroupName();
      case TRIGGER:
        return isSetTrigger();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof newTrigger_args)
        return this.equals((newTrigger_args)that);
      return false;
    }

    public boolean equals(newTrigger_args that) {
      if (that == null)
        return false;

      boolean this_present_serviceName = true && this.isSetServiceName();
      boolean that_present_serviceName = true && that.isSetServiceName();
      if (this_present_serviceName || that_present_serviceName) {
        if (!(this_present_serviceName && that_present_serviceName))
          return false;
        if (!this.serviceName.equals(that.serviceName))
          return false;
      }

      boolean this_present_jobName = true && this.isSetJobName();
      boolean that_present_jobName = true && that.isSetJobName();
      if (this_present_jobName || that_present_jobName) {
        if (!(this_present_jobName && that_present_jobName))
          return false;
        if (!this.jobName.equals(that.jobName))
          return false;
      }

      boolean this_present_groupName = true && this.isSetGroupName();
      boolean that_present_groupName = true && that.isSetGroupName();
      if (this_present_groupName || that_present_groupName) {
        if (!(this_present_groupName && that_present_groupName))
          return false;
        if (!this.groupName.equals(that.groupName))
          return false;
      }

      boolean this_present_trigger = true && this.isSetTrigger();
      boolean that_present_trigger = true && that.isSetTrigger();
      if (this_present_trigger || that_present_trigger) {
        if (!(this_present_trigger && that_present_trigger))
          return false;
        if (!this.trigger.equals(that.trigger))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
	public int compareTo(newTrigger_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      newTrigger_args typedOther = other;

      lastComparison = Boolean.valueOf(isSetServiceName()).compareTo(typedOther.isSetServiceName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServiceName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceName, typedOther.serviceName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetJobName()).compareTo(typedOther.isSetJobName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobName, typedOther.jobName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGroupName()).compareTo(typedOther.isSetGroupName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupName, typedOther.groupName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTrigger()).compareTo(typedOther.isSetTrigger());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTrigger()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trigger, typedOther.trigger);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @Override
	public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    @Override
	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("newTrigger_args(");
      boolean first = true;

      sb.append("serviceName:");
      if (this.serviceName == null) {
        sb.append("null");
      } else {
        sb.append(this.serviceName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jobName:");
      if (this.jobName == null) {
        sb.append("null");
      } else {
        sb.append(this.jobName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("groupName:");
      if (this.groupName == null) {
        sb.append("null");
      } else {
        sb.append(this.groupName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("trigger:");
      if (this.trigger == null) {
        sb.append("null");
      } else {
        sb.append(this.trigger);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class newTrigger_argsStandardSchemeFactory implements SchemeFactory {
      @Override
	public newTrigger_argsStandardScheme getScheme() {
        return new newTrigger_argsStandardScheme();
      }
    }

    private static class newTrigger_argsStandardScheme extends StandardScheme<newTrigger_args> {

      @Override
	public void read(org.apache.thrift.protocol.TProtocol iprot, newTrigger_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERVICE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.serviceName = iprot.readString();
                struct.setServiceNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // JOB_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jobName = iprot.readString();
                struct.setJobNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // GROUP_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.groupName = iprot.readString();
                struct.setGroupNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TRIGGER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.trigger = new TTriggerForm();
                struct.trigger.read(iprot);
                struct.setTriggerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
	public void write(org.apache.thrift.protocol.TProtocol oprot, newTrigger_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.serviceName != null) {
          oprot.writeFieldBegin(SERVICE_NAME_FIELD_DESC);
          oprot.writeString(struct.serviceName);
          oprot.writeFieldEnd();
        }
        if (struct.jobName != null) {
          oprot.writeFieldBegin(JOB_NAME_FIELD_DESC);
          oprot.writeString(struct.jobName);
          oprot.writeFieldEnd();
        }
        if (struct.groupName != null) {
          oprot.writeFieldBegin(GROUP_NAME_FIELD_DESC);
          oprot.writeString(struct.groupName);
          oprot.writeFieldEnd();
        }
        if (struct.trigger != null) {
          oprot.writeFieldBegin(TRIGGER_FIELD_DESC);
          struct.trigger.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class newTrigger_argsTupleSchemeFactory implements SchemeFactory {
      @Override
	public newTrigger_argsTupleScheme getScheme() {
        return new newTrigger_argsTupleScheme();
      }
    }

    private static class newTrigger_argsTupleScheme extends TupleScheme<newTrigger_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, newTrigger_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetServiceName()) {
          optionals.set(0);
        }
        if (struct.isSetJobName()) {
          optionals.set(1);
        }
        if (struct.isSetGroupName()) {
          optionals.set(2);
        }
        if (struct.isSetTrigger()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetServiceName()) {
          oprot.writeString(struct.serviceName);
        }
        if (struct.isSetJobName()) {
          oprot.writeString(struct.jobName);
        }
        if (struct.isSetGroupName()) {
          oprot.writeString(struct.groupName);
        }
        if (struct.isSetTrigger()) {
          struct.trigger.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, newTrigger_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.serviceName = iprot.readString();
          struct.setServiceNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.jobName = iprot.readString();
          struct.setJobNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.groupName = iprot.readString();
          struct.setGroupNameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.trigger = new TTriggerForm();
          struct.trigger.read(iprot);
          struct.setTriggerIsSet(true);
        }
      }
    }

  }

  public static class newTrigger_result implements org.apache.thrift.TBase<newTrigger_result, newTrigger_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("newTrigger_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new newTrigger_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new newTrigger_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
	public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
	public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(newTrigger_result.class, metaDataMap);
    }

    public newTrigger_result() {
    }

    public newTrigger_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public newTrigger_result(newTrigger_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    @Override
	public newTrigger_result deepCopy() {
      return new newTrigger_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public newTrigger_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
	public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    @Override
	public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
	public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof newTrigger_result)
        return this.equals((newTrigger_result)that);
      return false;
    }

    public boolean equals(newTrigger_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
	public int compareTo(newTrigger_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      newTrigger_result typedOther = other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @Override
	public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    @Override
	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("newTrigger_result(");

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class newTrigger_resultStandardSchemeFactory implements SchemeFactory {
      @Override
	public newTrigger_resultStandardScheme getScheme() {
        return new newTrigger_resultStandardScheme();
      }
    }

    private static class newTrigger_resultStandardScheme extends StandardScheme<newTrigger_result> {

      @Override
	public void read(org.apache.thrift.protocol.TProtocol iprot, newTrigger_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
	public void write(org.apache.thrift.protocol.TProtocol oprot, newTrigger_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class newTrigger_resultTupleSchemeFactory implements SchemeFactory {
      @Override
	public newTrigger_resultTupleScheme getScheme() {
        return new newTrigger_resultTupleScheme();
      }
    }

    private static class newTrigger_resultTupleScheme extends TupleScheme<newTrigger_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, newTrigger_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, newTrigger_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class removeJob_args implements org.apache.thrift.TBase<removeJob_args, removeJob_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeJob_args");

    private static final org.apache.thrift.protocol.TField SERVICE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField JOB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("jobName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField JOB_GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("jobGroup", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeJob_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeJob_argsTupleSchemeFactory());
    }

    public String serviceName; // required
    public String jobName; // required
    public String jobGroup; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVICE_NAME((short)1, "serviceName"),
      JOB_NAME((short)2, "jobName"),
      JOB_GROUP((short)3, "jobGroup");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVICE_NAME
            return SERVICE_NAME;
          case 2: // JOB_NAME
            return JOB_NAME;
          case 3: // JOB_GROUP
            return JOB_GROUP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
	public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
	public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVICE_NAME, new org.apache.thrift.meta_data.FieldMetaData("serviceName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.JOB_NAME, new org.apache.thrift.meta_data.FieldMetaData("jobName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.JOB_GROUP, new org.apache.thrift.meta_data.FieldMetaData("jobGroup", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeJob_args.class, metaDataMap);
    }

    public removeJob_args() {
    }

    public removeJob_args(
      String serviceName,
      String jobName,
      String jobGroup)
    {
      this();
      this.serviceName = serviceName;
      this.jobName = jobName;
      this.jobGroup = jobGroup;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeJob_args(removeJob_args other) {
      if (other.isSetServiceName()) {
        this.serviceName = other.serviceName;
      }
      if (other.isSetJobName()) {
        this.jobName = other.jobName;
      }
      if (other.isSetJobGroup()) {
        this.jobGroup = other.jobGroup;
      }
    }

    @Override
	public removeJob_args deepCopy() {
      return new removeJob_args(this);
    }

    @Override
    public void clear() {
      this.serviceName = null;
      this.jobName = null;
      this.jobGroup = null;
    }

    public String getServiceName() {
      return this.serviceName;
    }

    public removeJob_args setServiceName(String serviceName) {
      this.serviceName = serviceName;
      return this;
    }

    public void unsetServiceName() {
      this.serviceName = null;
    }

    /** Returns true if field serviceName is set (has been assigned a value) and false otherwise */
    public boolean isSetServiceName() {
      return this.serviceName != null;
    }

    public void setServiceNameIsSet(boolean value) {
      if (!value) {
        this.serviceName = null;
      }
    }

    public String getJobName() {
      return this.jobName;
    }

    public removeJob_args setJobName(String jobName) {
      this.jobName = jobName;
      return this;
    }

    public void unsetJobName() {
      this.jobName = null;
    }

    /** Returns true if field jobName is set (has been assigned a value) and false otherwise */
    public boolean isSetJobName() {
      return this.jobName != null;
    }

    public void setJobNameIsSet(boolean value) {
      if (!value) {
        this.jobName = null;
      }
    }

    public String getJobGroup() {
      return this.jobGroup;
    }

    public removeJob_args setJobGroup(String jobGroup) {
      this.jobGroup = jobGroup;
      return this;
    }

    public void unsetJobGroup() {
      this.jobGroup = null;
    }

    /** Returns true if field jobGroup is set (has been assigned a value) and false otherwise */
    public boolean isSetJobGroup() {
      return this.jobGroup != null;
    }

    public void setJobGroupIsSet(boolean value) {
      if (!value) {
        this.jobGroup = null;
      }
    }

    @Override
	public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SERVICE_NAME:
        if (value == null) {
          unsetServiceName();
        } else {
          setServiceName((String)value);
        }
        break;

      case JOB_NAME:
        if (value == null) {
          unsetJobName();
        } else {
          setJobName((String)value);
        }
        break;

      case JOB_GROUP:
        if (value == null) {
          unsetJobGroup();
        } else {
          setJobGroup((String)value);
        }
        break;

      }
    }

    @Override
	public Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVICE_NAME:
        return getServiceName();

      case JOB_NAME:
        return getJobName();

      case JOB_GROUP:
        return getJobGroup();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
	public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SERVICE_NAME:
        return isSetServiceName();
      case JOB_NAME:
        return isSetJobName();
      case JOB_GROUP:
        return isSetJobGroup();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeJob_args)
        return this.equals((removeJob_args)that);
      return false;
    }

    public boolean equals(removeJob_args that) {
      if (that == null)
        return false;

      boolean this_present_serviceName = true && this.isSetServiceName();
      boolean that_present_serviceName = true && that.isSetServiceName();
      if (this_present_serviceName || that_present_serviceName) {
        if (!(this_present_serviceName && that_present_serviceName))
          return false;
        if (!this.serviceName.equals(that.serviceName))
          return false;
      }

      boolean this_present_jobName = true && this.isSetJobName();
      boolean that_present_jobName = true && that.isSetJobName();
      if (this_present_jobName || that_present_jobName) {
        if (!(this_present_jobName && that_present_jobName))
          return false;
        if (!this.jobName.equals(that.jobName))
          return false;
      }

      boolean this_present_jobGroup = true && this.isSetJobGroup();
      boolean that_present_jobGroup = true && that.isSetJobGroup();
      if (this_present_jobGroup || that_present_jobGroup) {
        if (!(this_present_jobGroup && that_present_jobGroup))
          return false;
        if (!this.jobGroup.equals(that.jobGroup))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
	public int compareTo(removeJob_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      removeJob_args typedOther = other;

      lastComparison = Boolean.valueOf(isSetServiceName()).compareTo(typedOther.isSetServiceName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServiceName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceName, typedOther.serviceName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetJobName()).compareTo(typedOther.isSetJobName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobName, typedOther.jobName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetJobGroup()).compareTo(typedOther.isSetJobGroup());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobGroup()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobGroup, typedOther.jobGroup);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @Override
	public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    @Override
	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeJob_args(");
      boolean first = true;

      sb.append("serviceName:");
      if (this.serviceName == null) {
        sb.append("null");
      } else {
        sb.append(this.serviceName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jobName:");
      if (this.jobName == null) {
        sb.append("null");
      } else {
        sb.append(this.jobName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jobGroup:");
      if (this.jobGroup == null) {
        sb.append("null");
      } else {
        sb.append(this.jobGroup);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeJob_argsStandardSchemeFactory implements SchemeFactory {
      @Override
	public removeJob_argsStandardScheme getScheme() {
        return new removeJob_argsStandardScheme();
      }
    }

    private static class removeJob_argsStandardScheme extends StandardScheme<removeJob_args> {

      @Override
	public void read(org.apache.thrift.protocol.TProtocol iprot, removeJob_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERVICE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.serviceName = iprot.readString();
                struct.setServiceNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // JOB_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jobName = iprot.readString();
                struct.setJobNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // JOB_GROUP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jobGroup = iprot.readString();
                struct.setJobGroupIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
	public void write(org.apache.thrift.protocol.TProtocol oprot, removeJob_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.serviceName != null) {
          oprot.writeFieldBegin(SERVICE_NAME_FIELD_DESC);
          oprot.writeString(struct.serviceName);
          oprot.writeFieldEnd();
        }
        if (struct.jobName != null) {
          oprot.writeFieldBegin(JOB_NAME_FIELD_DESC);
          oprot.writeString(struct.jobName);
          oprot.writeFieldEnd();
        }
        if (struct.jobGroup != null) {
          oprot.writeFieldBegin(JOB_GROUP_FIELD_DESC);
          oprot.writeString(struct.jobGroup);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeJob_argsTupleSchemeFactory implements SchemeFactory {
      @Override
	public removeJob_argsTupleScheme getScheme() {
        return new removeJob_argsTupleScheme();
      }
    }

    private static class removeJob_argsTupleScheme extends TupleScheme<removeJob_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeJob_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetServiceName()) {
          optionals.set(0);
        }
        if (struct.isSetJobName()) {
          optionals.set(1);
        }
        if (struct.isSetJobGroup()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetServiceName()) {
          oprot.writeString(struct.serviceName);
        }
        if (struct.isSetJobName()) {
          oprot.writeString(struct.jobName);
        }
        if (struct.isSetJobGroup()) {
          oprot.writeString(struct.jobGroup);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeJob_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.serviceName = iprot.readString();
          struct.setServiceNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.jobName = iprot.readString();
          struct.setJobNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.jobGroup = iprot.readString();
          struct.setJobGroupIsSet(true);
        }
      }
    }

  }

  public static class removeJob_result implements org.apache.thrift.TBase<removeJob_result, removeJob_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeJob_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeJob_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeJob_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
	public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
	public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeJob_result.class, metaDataMap);
    }

    public removeJob_result() {
    }

    public removeJob_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeJob_result(removeJob_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    @Override
	public removeJob_result deepCopy() {
      return new removeJob_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public removeJob_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    @Override
	public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    @Override
	public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
	public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeJob_result)
        return this.equals((removeJob_result)that);
      return false;
    }

    public boolean equals(removeJob_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
	public int compareTo(removeJob_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      removeJob_result typedOther = other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @Override
	public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    @Override
	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeJob_result(");

      sb.append("success:");
      sb.append(this.success);

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeJob_resultStandardSchemeFactory implements SchemeFactory {
      @Override
	public removeJob_resultStandardScheme getScheme() {
        return new removeJob_resultStandardScheme();
      }
    }

    private static class removeJob_resultStandardScheme extends StandardScheme<removeJob_result> {

      @Override
	public void read(org.apache.thrift.protocol.TProtocol iprot, removeJob_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
	public void write(org.apache.thrift.protocol.TProtocol oprot, removeJob_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeJob_resultTupleSchemeFactory implements SchemeFactory {
      @Override
	public removeJob_resultTupleScheme getScheme() {
        return new removeJob_resultTupleScheme();
      }
    }

    private static class removeJob_resultTupleScheme extends TupleScheme<removeJob_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeJob_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeJob_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class removeTrigger_args implements org.apache.thrift.TBase<removeTrigger_args, removeTrigger_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeTrigger_args");

    private static final org.apache.thrift.protocol.TField SERVICE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TRIGGER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("triggerName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TRIGGER_GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("triggerGroup", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeTrigger_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeTrigger_argsTupleSchemeFactory());
    }

    public String serviceName; // required
    public String triggerName; // required
    public String triggerGroup; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVICE_NAME((short)1, "serviceName"),
      TRIGGER_NAME((short)2, "triggerName"),
      TRIGGER_GROUP((short)3, "triggerGroup");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVICE_NAME
            return SERVICE_NAME;
          case 2: // TRIGGER_NAME
            return TRIGGER_NAME;
          case 3: // TRIGGER_GROUP
            return TRIGGER_GROUP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
	public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
	public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVICE_NAME, new org.apache.thrift.meta_data.FieldMetaData("serviceName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TRIGGER_NAME, new org.apache.thrift.meta_data.FieldMetaData("triggerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TRIGGER_GROUP, new org.apache.thrift.meta_data.FieldMetaData("triggerGroup", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeTrigger_args.class, metaDataMap);
    }

    public removeTrigger_args() {
    }

    public removeTrigger_args(
      String serviceName,
      String triggerName,
      String triggerGroup)
    {
      this();
      this.serviceName = serviceName;
      this.triggerName = triggerName;
      this.triggerGroup = triggerGroup;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeTrigger_args(removeTrigger_args other) {
      if (other.isSetServiceName()) {
        this.serviceName = other.serviceName;
      }
      if (other.isSetTriggerName()) {
        this.triggerName = other.triggerName;
      }
      if (other.isSetTriggerGroup()) {
        this.triggerGroup = other.triggerGroup;
      }
    }

    @Override
	public removeTrigger_args deepCopy() {
      return new removeTrigger_args(this);
    }

    @Override
    public void clear() {
      this.serviceName = null;
      this.triggerName = null;
      this.triggerGroup = null;
    }

    public String getServiceName() {
      return this.serviceName;
    }

    public removeTrigger_args setServiceName(String serviceName) {
      this.serviceName = serviceName;
      return this;
    }

    public void unsetServiceName() {
      this.serviceName = null;
    }

    /** Returns true if field serviceName is set (has been assigned a value) and false otherwise */
    public boolean isSetServiceName() {
      return this.serviceName != null;
    }

    public void setServiceNameIsSet(boolean value) {
      if (!value) {
        this.serviceName = null;
      }
    }

    public String getTriggerName() {
      return this.triggerName;
    }

    public removeTrigger_args setTriggerName(String triggerName) {
      this.triggerName = triggerName;
      return this;
    }

    public void unsetTriggerName() {
      this.triggerName = null;
    }

    /** Returns true if field triggerName is set (has been assigned a value) and false otherwise */
    public boolean isSetTriggerName() {
      return this.triggerName != null;
    }

    public void setTriggerNameIsSet(boolean value) {
      if (!value) {
        this.triggerName = null;
      }
    }

    public String getTriggerGroup() {
      return this.triggerGroup;
    }

    public removeTrigger_args setTriggerGroup(String triggerGroup) {
      this.triggerGroup = triggerGroup;
      return this;
    }

    public void unsetTriggerGroup() {
      this.triggerGroup = null;
    }

    /** Returns true if field triggerGroup is set (has been assigned a value) and false otherwise */
    public boolean isSetTriggerGroup() {
      return this.triggerGroup != null;
    }

    public void setTriggerGroupIsSet(boolean value) {
      if (!value) {
        this.triggerGroup = null;
      }
    }

    @Override
	public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SERVICE_NAME:
        if (value == null) {
          unsetServiceName();
        } else {
          setServiceName((String)value);
        }
        break;

      case TRIGGER_NAME:
        if (value == null) {
          unsetTriggerName();
        } else {
          setTriggerName((String)value);
        }
        break;

      case TRIGGER_GROUP:
        if (value == null) {
          unsetTriggerGroup();
        } else {
          setTriggerGroup((String)value);
        }
        break;

      }
    }

    @Override
	public Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVICE_NAME:
        return getServiceName();

      case TRIGGER_NAME:
        return getTriggerName();

      case TRIGGER_GROUP:
        return getTriggerGroup();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
	public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SERVICE_NAME:
        return isSetServiceName();
      case TRIGGER_NAME:
        return isSetTriggerName();
      case TRIGGER_GROUP:
        return isSetTriggerGroup();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeTrigger_args)
        return this.equals((removeTrigger_args)that);
      return false;
    }

    public boolean equals(removeTrigger_args that) {
      if (that == null)
        return false;

      boolean this_present_serviceName = true && this.isSetServiceName();
      boolean that_present_serviceName = true && that.isSetServiceName();
      if (this_present_serviceName || that_present_serviceName) {
        if (!(this_present_serviceName && that_present_serviceName))
          return false;
        if (!this.serviceName.equals(that.serviceName))
          return false;
      }

      boolean this_present_triggerName = true && this.isSetTriggerName();
      boolean that_present_triggerName = true && that.isSetTriggerName();
      if (this_present_triggerName || that_present_triggerName) {
        if (!(this_present_triggerName && that_present_triggerName))
          return false;
        if (!this.triggerName.equals(that.triggerName))
          return false;
      }

      boolean this_present_triggerGroup = true && this.isSetTriggerGroup();
      boolean that_present_triggerGroup = true && that.isSetTriggerGroup();
      if (this_present_triggerGroup || that_present_triggerGroup) {
        if (!(this_present_triggerGroup && that_present_triggerGroup))
          return false;
        if (!this.triggerGroup.equals(that.triggerGroup))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
	public int compareTo(removeTrigger_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      removeTrigger_args typedOther = other;

      lastComparison = Boolean.valueOf(isSetServiceName()).compareTo(typedOther.isSetServiceName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServiceName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceName, typedOther.serviceName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTriggerName()).compareTo(typedOther.isSetTriggerName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTriggerName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.triggerName, typedOther.triggerName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTriggerGroup()).compareTo(typedOther.isSetTriggerGroup());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTriggerGroup()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.triggerGroup, typedOther.triggerGroup);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @Override
	public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    @Override
	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeTrigger_args(");
      boolean first = true;

      sb.append("serviceName:");
      if (this.serviceName == null) {
        sb.append("null");
      } else {
        sb.append(this.serviceName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("triggerName:");
      if (this.triggerName == null) {
        sb.append("null");
      } else {
        sb.append(this.triggerName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("triggerGroup:");
      if (this.triggerGroup == null) {
        sb.append("null");
      } else {
        sb.append(this.triggerGroup);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeTrigger_argsStandardSchemeFactory implements SchemeFactory {
      @Override
	public removeTrigger_argsStandardScheme getScheme() {
        return new removeTrigger_argsStandardScheme();
      }
    }

    private static class removeTrigger_argsStandardScheme extends StandardScheme<removeTrigger_args> {

      @Override
	public void read(org.apache.thrift.protocol.TProtocol iprot, removeTrigger_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERVICE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.serviceName = iprot.readString();
                struct.setServiceNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TRIGGER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.triggerName = iprot.readString();
                struct.setTriggerNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TRIGGER_GROUP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.triggerGroup = iprot.readString();
                struct.setTriggerGroupIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
	public void write(org.apache.thrift.protocol.TProtocol oprot, removeTrigger_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.serviceName != null) {
          oprot.writeFieldBegin(SERVICE_NAME_FIELD_DESC);
          oprot.writeString(struct.serviceName);
          oprot.writeFieldEnd();
        }
        if (struct.triggerName != null) {
          oprot.writeFieldBegin(TRIGGER_NAME_FIELD_DESC);
          oprot.writeString(struct.triggerName);
          oprot.writeFieldEnd();
        }
        if (struct.triggerGroup != null) {
          oprot.writeFieldBegin(TRIGGER_GROUP_FIELD_DESC);
          oprot.writeString(struct.triggerGroup);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeTrigger_argsTupleSchemeFactory implements SchemeFactory {
      @Override
	public removeTrigger_argsTupleScheme getScheme() {
        return new removeTrigger_argsTupleScheme();
      }
    }

    private static class removeTrigger_argsTupleScheme extends TupleScheme<removeTrigger_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeTrigger_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetServiceName()) {
          optionals.set(0);
        }
        if (struct.isSetTriggerName()) {
          optionals.set(1);
        }
        if (struct.isSetTriggerGroup()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetServiceName()) {
          oprot.writeString(struct.serviceName);
        }
        if (struct.isSetTriggerName()) {
          oprot.writeString(struct.triggerName);
        }
        if (struct.isSetTriggerGroup()) {
          oprot.writeString(struct.triggerGroup);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeTrigger_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.serviceName = iprot.readString();
          struct.setServiceNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.triggerName = iprot.readString();
          struct.setTriggerNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.triggerGroup = iprot.readString();
          struct.setTriggerGroupIsSet(true);
        }
      }
    }

  }

  public static class removeTrigger_result implements org.apache.thrift.TBase<removeTrigger_result, removeTrigger_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeTrigger_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeTrigger_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeTrigger_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
	public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
	public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeTrigger_result.class, metaDataMap);
    }

    public removeTrigger_result() {
    }

    public removeTrigger_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeTrigger_result(removeTrigger_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    @Override
	public removeTrigger_result deepCopy() {
      return new removeTrigger_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public removeTrigger_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    @Override
	public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    @Override
	public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
	public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeTrigger_result)
        return this.equals((removeTrigger_result)that);
      return false;
    }

    public boolean equals(removeTrigger_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
	public int compareTo(removeTrigger_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      removeTrigger_result typedOther = other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @Override
	public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    @Override
	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeTrigger_result(");

      sb.append("success:");
      sb.append(this.success);

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeTrigger_resultStandardSchemeFactory implements SchemeFactory {
      @Override
	public removeTrigger_resultStandardScheme getScheme() {
        return new removeTrigger_resultStandardScheme();
      }
    }

    private static class removeTrigger_resultStandardScheme extends StandardScheme<removeTrigger_result> {

      @Override
	public void read(org.apache.thrift.protocol.TProtocol iprot, removeTrigger_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
	public void write(org.apache.thrift.protocol.TProtocol oprot, removeTrigger_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeTrigger_resultTupleSchemeFactory implements SchemeFactory {
      @Override
	public removeTrigger_resultTupleScheme getScheme() {
        return new removeTrigger_resultTupleScheme();
      }
    }

    private static class removeTrigger_resultTupleScheme extends TupleScheme<removeTrigger_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeTrigger_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeTrigger_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryJob_args implements org.apache.thrift.TBase<queryJob_args, queryJob_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryJob_args");

    private static final org.apache.thrift.protocol.TField SERVICE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField JOB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("jobName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField JOB_GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("jobGroup", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryJob_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryJob_argsTupleSchemeFactory());
    }

    public String serviceName; // required
    public String jobName; // required
    public String jobGroup; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVICE_NAME((short)1, "serviceName"),
      JOB_NAME((short)2, "jobName"),
      JOB_GROUP((short)3, "jobGroup");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVICE_NAME
            return SERVICE_NAME;
          case 2: // JOB_NAME
            return JOB_NAME;
          case 3: // JOB_GROUP
            return JOB_GROUP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
	public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
	public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVICE_NAME, new org.apache.thrift.meta_data.FieldMetaData("serviceName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.JOB_NAME, new org.apache.thrift.meta_data.FieldMetaData("jobName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.JOB_GROUP, new org.apache.thrift.meta_data.FieldMetaData("jobGroup", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryJob_args.class, metaDataMap);
    }

    public queryJob_args() {
    }

    public queryJob_args(
      String serviceName,
      String jobName,
      String jobGroup)
    {
      this();
      this.serviceName = serviceName;
      this.jobName = jobName;
      this.jobGroup = jobGroup;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryJob_args(queryJob_args other) {
      if (other.isSetServiceName()) {
        this.serviceName = other.serviceName;
      }
      if (other.isSetJobName()) {
        this.jobName = other.jobName;
      }
      if (other.isSetJobGroup()) {
        this.jobGroup = other.jobGroup;
      }
    }

    @Override
	public queryJob_args deepCopy() {
      return new queryJob_args(this);
    }

    @Override
    public void clear() {
      this.serviceName = null;
      this.jobName = null;
      this.jobGroup = null;
    }

    public String getServiceName() {
      return this.serviceName;
    }

    public queryJob_args setServiceName(String serviceName) {
      this.serviceName = serviceName;
      return this;
    }

    public void unsetServiceName() {
      this.serviceName = null;
    }

    /** Returns true if field serviceName is set (has been assigned a value) and false otherwise */
    public boolean isSetServiceName() {
      return this.serviceName != null;
    }

    public void setServiceNameIsSet(boolean value) {
      if (!value) {
        this.serviceName = null;
      }
    }

    public String getJobName() {
      return this.jobName;
    }

    public queryJob_args setJobName(String jobName) {
      this.jobName = jobName;
      return this;
    }

    public void unsetJobName() {
      this.jobName = null;
    }

    /** Returns true if field jobName is set (has been assigned a value) and false otherwise */
    public boolean isSetJobName() {
      return this.jobName != null;
    }

    public void setJobNameIsSet(boolean value) {
      if (!value) {
        this.jobName = null;
      }
    }

    public String getJobGroup() {
      return this.jobGroup;
    }

    public queryJob_args setJobGroup(String jobGroup) {
      this.jobGroup = jobGroup;
      return this;
    }

    public void unsetJobGroup() {
      this.jobGroup = null;
    }

    /** Returns true if field jobGroup is set (has been assigned a value) and false otherwise */
    public boolean isSetJobGroup() {
      return this.jobGroup != null;
    }

    public void setJobGroupIsSet(boolean value) {
      if (!value) {
        this.jobGroup = null;
      }
    }

    @Override
	public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SERVICE_NAME:
        if (value == null) {
          unsetServiceName();
        } else {
          setServiceName((String)value);
        }
        break;

      case JOB_NAME:
        if (value == null) {
          unsetJobName();
        } else {
          setJobName((String)value);
        }
        break;

      case JOB_GROUP:
        if (value == null) {
          unsetJobGroup();
        } else {
          setJobGroup((String)value);
        }
        break;

      }
    }

    @Override
	public Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVICE_NAME:
        return getServiceName();

      case JOB_NAME:
        return getJobName();

      case JOB_GROUP:
        return getJobGroup();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
	public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SERVICE_NAME:
        return isSetServiceName();
      case JOB_NAME:
        return isSetJobName();
      case JOB_GROUP:
        return isSetJobGroup();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryJob_args)
        return this.equals((queryJob_args)that);
      return false;
    }

    public boolean equals(queryJob_args that) {
      if (that == null)
        return false;

      boolean this_present_serviceName = true && this.isSetServiceName();
      boolean that_present_serviceName = true && that.isSetServiceName();
      if (this_present_serviceName || that_present_serviceName) {
        if (!(this_present_serviceName && that_present_serviceName))
          return false;
        if (!this.serviceName.equals(that.serviceName))
          return false;
      }

      boolean this_present_jobName = true && this.isSetJobName();
      boolean that_present_jobName = true && that.isSetJobName();
      if (this_present_jobName || that_present_jobName) {
        if (!(this_present_jobName && that_present_jobName))
          return false;
        if (!this.jobName.equals(that.jobName))
          return false;
      }

      boolean this_present_jobGroup = true && this.isSetJobGroup();
      boolean that_present_jobGroup = true && that.isSetJobGroup();
      if (this_present_jobGroup || that_present_jobGroup) {
        if (!(this_present_jobGroup && that_present_jobGroup))
          return false;
        if (!this.jobGroup.equals(that.jobGroup))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
	public int compareTo(queryJob_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      queryJob_args typedOther = other;

      lastComparison = Boolean.valueOf(isSetServiceName()).compareTo(typedOther.isSetServiceName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServiceName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceName, typedOther.serviceName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetJobName()).compareTo(typedOther.isSetJobName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobName, typedOther.jobName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetJobGroup()).compareTo(typedOther.isSetJobGroup());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobGroup()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobGroup, typedOther.jobGroup);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @Override
	public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    @Override
	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryJob_args(");
      boolean first = true;

      sb.append("serviceName:");
      if (this.serviceName == null) {
        sb.append("null");
      } else {
        sb.append(this.serviceName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jobName:");
      if (this.jobName == null) {
        sb.append("null");
      } else {
        sb.append(this.jobName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jobGroup:");
      if (this.jobGroup == null) {
        sb.append("null");
      } else {
        sb.append(this.jobGroup);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryJob_argsStandardSchemeFactory implements SchemeFactory {
      @Override
	public queryJob_argsStandardScheme getScheme() {
        return new queryJob_argsStandardScheme();
      }
    }

    private static class queryJob_argsStandardScheme extends StandardScheme<queryJob_args> {

      @Override
	public void read(org.apache.thrift.protocol.TProtocol iprot, queryJob_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERVICE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.serviceName = iprot.readString();
                struct.setServiceNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // JOB_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jobName = iprot.readString();
                struct.setJobNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // JOB_GROUP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jobGroup = iprot.readString();
                struct.setJobGroupIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
	public void write(org.apache.thrift.protocol.TProtocol oprot, queryJob_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.serviceName != null) {
          oprot.writeFieldBegin(SERVICE_NAME_FIELD_DESC);
          oprot.writeString(struct.serviceName);
          oprot.writeFieldEnd();
        }
        if (struct.jobName != null) {
          oprot.writeFieldBegin(JOB_NAME_FIELD_DESC);
          oprot.writeString(struct.jobName);
          oprot.writeFieldEnd();
        }
        if (struct.jobGroup != null) {
          oprot.writeFieldBegin(JOB_GROUP_FIELD_DESC);
          oprot.writeString(struct.jobGroup);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryJob_argsTupleSchemeFactory implements SchemeFactory {
      @Override
	public queryJob_argsTupleScheme getScheme() {
        return new queryJob_argsTupleScheme();
      }
    }

    private static class queryJob_argsTupleScheme extends TupleScheme<queryJob_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryJob_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetServiceName()) {
          optionals.set(0);
        }
        if (struct.isSetJobName()) {
          optionals.set(1);
        }
        if (struct.isSetJobGroup()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetServiceName()) {
          oprot.writeString(struct.serviceName);
        }
        if (struct.isSetJobName()) {
          oprot.writeString(struct.jobName);
        }
        if (struct.isSetJobGroup()) {
          oprot.writeString(struct.jobGroup);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryJob_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.serviceName = iprot.readString();
          struct.setServiceNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.jobName = iprot.readString();
          struct.setJobNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.jobGroup = iprot.readString();
          struct.setJobGroupIsSet(true);
        }
      }
    }

  }

  public static class queryJob_result implements org.apache.thrift.TBase<queryJob_result, queryJob_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryJob_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryJob_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryJob_resultTupleSchemeFactory());
    }

    public TJobInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
	public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
	public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TJobInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryJob_result.class, metaDataMap);
    }

    public queryJob_result() {
    }

    public queryJob_result(
      TJobInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryJob_result(queryJob_result other) {
      if (other.isSetSuccess()) {
        this.success = new TJobInfo(other.success);
      }
    }

    @Override
	public queryJob_result deepCopy() {
      return new queryJob_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TJobInfo getSuccess() {
      return this.success;
    }

    public queryJob_result setSuccess(TJobInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
	public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TJobInfo)value);
        }
        break;

      }
    }

    @Override
	public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
	public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryJob_result)
        return this.equals((queryJob_result)that);
      return false;
    }

    public boolean equals(queryJob_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
	public int compareTo(queryJob_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      queryJob_result typedOther = other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @Override
	public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    @Override
	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryJob_result(");

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryJob_resultStandardSchemeFactory implements SchemeFactory {
      @Override
	public queryJob_resultStandardScheme getScheme() {
        return new queryJob_resultStandardScheme();
      }
    }

    private static class queryJob_resultStandardScheme extends StandardScheme<queryJob_result> {

      @Override
	public void read(org.apache.thrift.protocol.TProtocol iprot, queryJob_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TJobInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
	public void write(org.apache.thrift.protocol.TProtocol oprot, queryJob_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryJob_resultTupleSchemeFactory implements SchemeFactory {
      @Override
	public queryJob_resultTupleScheme getScheme() {
        return new queryJob_resultTupleScheme();
      }
    }

    private static class queryJob_resultTupleScheme extends TupleScheme<queryJob_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryJob_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryJob_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TJobInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryTrigger_args implements org.apache.thrift.TBase<queryTrigger_args, queryTrigger_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryTrigger_args");

    private static final org.apache.thrift.protocol.TField SERVICE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TRIGGER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("triggerName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TRIGGER_GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("triggerGroup", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryTrigger_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryTrigger_argsTupleSchemeFactory());
    }

    public String serviceName; // required
    public String triggerName; // required
    public String triggerGroup; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVICE_NAME((short)1, "serviceName"),
      TRIGGER_NAME((short)2, "triggerName"),
      TRIGGER_GROUP((short)3, "triggerGroup");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVICE_NAME
            return SERVICE_NAME;
          case 2: // TRIGGER_NAME
            return TRIGGER_NAME;
          case 3: // TRIGGER_GROUP
            return TRIGGER_GROUP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
	public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
	public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVICE_NAME, new org.apache.thrift.meta_data.FieldMetaData("serviceName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TRIGGER_NAME, new org.apache.thrift.meta_data.FieldMetaData("triggerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TRIGGER_GROUP, new org.apache.thrift.meta_data.FieldMetaData("triggerGroup", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryTrigger_args.class, metaDataMap);
    }

    public queryTrigger_args() {
    }

    public queryTrigger_args(
      String serviceName,
      String triggerName,
      String triggerGroup)
    {
      this();
      this.serviceName = serviceName;
      this.triggerName = triggerName;
      this.triggerGroup = triggerGroup;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryTrigger_args(queryTrigger_args other) {
      if (other.isSetServiceName()) {
        this.serviceName = other.serviceName;
      }
      if (other.isSetTriggerName()) {
        this.triggerName = other.triggerName;
      }
      if (other.isSetTriggerGroup()) {
        this.triggerGroup = other.triggerGroup;
      }
    }

    @Override
	public queryTrigger_args deepCopy() {
      return new queryTrigger_args(this);
    }

    @Override
    public void clear() {
      this.serviceName = null;
      this.triggerName = null;
      this.triggerGroup = null;
    }

    public String getServiceName() {
      return this.serviceName;
    }

    public queryTrigger_args setServiceName(String serviceName) {
      this.serviceName = serviceName;
      return this;
    }

    public void unsetServiceName() {
      this.serviceName = null;
    }

    /** Returns true if field serviceName is set (has been assigned a value) and false otherwise */
    public boolean isSetServiceName() {
      return this.serviceName != null;
    }

    public void setServiceNameIsSet(boolean value) {
      if (!value) {
        this.serviceName = null;
      }
    }

    public String getTriggerName() {
      return this.triggerName;
    }

    public queryTrigger_args setTriggerName(String triggerName) {
      this.triggerName = triggerName;
      return this;
    }

    public void unsetTriggerName() {
      this.triggerName = null;
    }

    /** Returns true if field triggerName is set (has been assigned a value) and false otherwise */
    public boolean isSetTriggerName() {
      return this.triggerName != null;
    }

    public void setTriggerNameIsSet(boolean value) {
      if (!value) {
        this.triggerName = null;
      }
    }

    public String getTriggerGroup() {
      return this.triggerGroup;
    }

    public queryTrigger_args setTriggerGroup(String triggerGroup) {
      this.triggerGroup = triggerGroup;
      return this;
    }

    public void unsetTriggerGroup() {
      this.triggerGroup = null;
    }

    /** Returns true if field triggerGroup is set (has been assigned a value) and false otherwise */
    public boolean isSetTriggerGroup() {
      return this.triggerGroup != null;
    }

    public void setTriggerGroupIsSet(boolean value) {
      if (!value) {
        this.triggerGroup = null;
      }
    }

    @Override
	public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SERVICE_NAME:
        if (value == null) {
          unsetServiceName();
        } else {
          setServiceName((String)value);
        }
        break;

      case TRIGGER_NAME:
        if (value == null) {
          unsetTriggerName();
        } else {
          setTriggerName((String)value);
        }
        break;

      case TRIGGER_GROUP:
        if (value == null) {
          unsetTriggerGroup();
        } else {
          setTriggerGroup((String)value);
        }
        break;

      }
    }

    @Override
	public Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVICE_NAME:
        return getServiceName();

      case TRIGGER_NAME:
        return getTriggerName();

      case TRIGGER_GROUP:
        return getTriggerGroup();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
	public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SERVICE_NAME:
        return isSetServiceName();
      case TRIGGER_NAME:
        return isSetTriggerName();
      case TRIGGER_GROUP:
        return isSetTriggerGroup();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryTrigger_args)
        return this.equals((queryTrigger_args)that);
      return false;
    }

    public boolean equals(queryTrigger_args that) {
      if (that == null)
        return false;

      boolean this_present_serviceName = true && this.isSetServiceName();
      boolean that_present_serviceName = true && that.isSetServiceName();
      if (this_present_serviceName || that_present_serviceName) {
        if (!(this_present_serviceName && that_present_serviceName))
          return false;
        if (!this.serviceName.equals(that.serviceName))
          return false;
      }

      boolean this_present_triggerName = true && this.isSetTriggerName();
      boolean that_present_triggerName = true && that.isSetTriggerName();
      if (this_present_triggerName || that_present_triggerName) {
        if (!(this_present_triggerName && that_present_triggerName))
          return false;
        if (!this.triggerName.equals(that.triggerName))
          return false;
      }

      boolean this_present_triggerGroup = true && this.isSetTriggerGroup();
      boolean that_present_triggerGroup = true && that.isSetTriggerGroup();
      if (this_present_triggerGroup || that_present_triggerGroup) {
        if (!(this_present_triggerGroup && that_present_triggerGroup))
          return false;
        if (!this.triggerGroup.equals(that.triggerGroup))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
	public int compareTo(queryTrigger_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      queryTrigger_args typedOther = other;

      lastComparison = Boolean.valueOf(isSetServiceName()).compareTo(typedOther.isSetServiceName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServiceName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceName, typedOther.serviceName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTriggerName()).compareTo(typedOther.isSetTriggerName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTriggerName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.triggerName, typedOther.triggerName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTriggerGroup()).compareTo(typedOther.isSetTriggerGroup());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTriggerGroup()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.triggerGroup, typedOther.triggerGroup);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @Override
	public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    @Override
	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryTrigger_args(");
      boolean first = true;

      sb.append("serviceName:");
      if (this.serviceName == null) {
        sb.append("null");
      } else {
        sb.append(this.serviceName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("triggerName:");
      if (this.triggerName == null) {
        sb.append("null");
      } else {
        sb.append(this.triggerName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("triggerGroup:");
      if (this.triggerGroup == null) {
        sb.append("null");
      } else {
        sb.append(this.triggerGroup);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryTrigger_argsStandardSchemeFactory implements SchemeFactory {
      @Override
	public queryTrigger_argsStandardScheme getScheme() {
        return new queryTrigger_argsStandardScheme();
      }
    }

    private static class queryTrigger_argsStandardScheme extends StandardScheme<queryTrigger_args> {

      @Override
	public void read(org.apache.thrift.protocol.TProtocol iprot, queryTrigger_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERVICE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.serviceName = iprot.readString();
                struct.setServiceNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TRIGGER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.triggerName = iprot.readString();
                struct.setTriggerNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TRIGGER_GROUP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.triggerGroup = iprot.readString();
                struct.setTriggerGroupIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
	public void write(org.apache.thrift.protocol.TProtocol oprot, queryTrigger_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.serviceName != null) {
          oprot.writeFieldBegin(SERVICE_NAME_FIELD_DESC);
          oprot.writeString(struct.serviceName);
          oprot.writeFieldEnd();
        }
        if (struct.triggerName != null) {
          oprot.writeFieldBegin(TRIGGER_NAME_FIELD_DESC);
          oprot.writeString(struct.triggerName);
          oprot.writeFieldEnd();
        }
        if (struct.triggerGroup != null) {
          oprot.writeFieldBegin(TRIGGER_GROUP_FIELD_DESC);
          oprot.writeString(struct.triggerGroup);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryTrigger_argsTupleSchemeFactory implements SchemeFactory {
      @Override
	public queryTrigger_argsTupleScheme getScheme() {
        return new queryTrigger_argsTupleScheme();
      }
    }

    private static class queryTrigger_argsTupleScheme extends TupleScheme<queryTrigger_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryTrigger_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetServiceName()) {
          optionals.set(0);
        }
        if (struct.isSetTriggerName()) {
          optionals.set(1);
        }
        if (struct.isSetTriggerGroup()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetServiceName()) {
          oprot.writeString(struct.serviceName);
        }
        if (struct.isSetTriggerName()) {
          oprot.writeString(struct.triggerName);
        }
        if (struct.isSetTriggerGroup()) {
          oprot.writeString(struct.triggerGroup);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryTrigger_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.serviceName = iprot.readString();
          struct.setServiceNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.triggerName = iprot.readString();
          struct.setTriggerNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.triggerGroup = iprot.readString();
          struct.setTriggerGroupIsSet(true);
        }
      }
    }

  }

  public static class queryTrigger_result implements org.apache.thrift.TBase<queryTrigger_result, queryTrigger_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryTrigger_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryTrigger_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryTrigger_resultTupleSchemeFactory());
    }

    public TTriggerInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
	public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
	public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTriggerInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryTrigger_result.class, metaDataMap);
    }

    public queryTrigger_result() {
    }

    public queryTrigger_result(
      TTriggerInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryTrigger_result(queryTrigger_result other) {
      if (other.isSetSuccess()) {
        this.success = new TTriggerInfo(other.success);
      }
    }

    @Override
	public queryTrigger_result deepCopy() {
      return new queryTrigger_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TTriggerInfo getSuccess() {
      return this.success;
    }

    public queryTrigger_result setSuccess(TTriggerInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
	public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TTriggerInfo)value);
        }
        break;

      }
    }

    @Override
	public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
	public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryTrigger_result)
        return this.equals((queryTrigger_result)that);
      return false;
    }

    public boolean equals(queryTrigger_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
	public int compareTo(queryTrigger_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      queryTrigger_result typedOther = other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @Override
	public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    @Override
	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryTrigger_result(");

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryTrigger_resultStandardSchemeFactory implements SchemeFactory {
      @Override
	public queryTrigger_resultStandardScheme getScheme() {
        return new queryTrigger_resultStandardScheme();
      }
    }

    private static class queryTrigger_resultStandardScheme extends StandardScheme<queryTrigger_result> {

      @Override
	public void read(org.apache.thrift.protocol.TProtocol iprot, queryTrigger_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TTriggerInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
	public void write(org.apache.thrift.protocol.TProtocol oprot, queryTrigger_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryTrigger_resultTupleSchemeFactory implements SchemeFactory {
      @Override
	public queryTrigger_resultTupleScheme getScheme() {
        return new queryTrigger_resultTupleScheme();
      }
    }

    private static class queryTrigger_resultTupleScheme extends TupleScheme<queryTrigger_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryTrigger_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryTrigger_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TTriggerInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
