/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package bma.siteone.cloud.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TCloudRequest implements org.apache.thrift.TBase<TCloudRequest, TCloudRequest._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TCloudRequest");

  private static final org.apache.thrift.protocol.TField ENTRY_FIELD_DESC = new org.apache.thrift.protocol.TField("entry", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CALLBACK_FIELD_DESC = new org.apache.thrift.protocol.TField("callback", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField LOGTRACK_FIELD_DESC = new org.apache.thrift.protocol.TField("logtrack", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField REFERER_FIELD_DESC = new org.apache.thrift.protocol.TField("referer", org.apache.thrift.protocol.TType.STRUCT, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TCloudRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TCloudRequestTupleSchemeFactory());
  }

  public TCloudEntry entry; // required
  public String content; // required
  public TCloudEntry callback; // required
  public boolean logtrack; // required
  public TCloudEntry referer; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ENTRY((short)1, "entry"),
    CONTENT((short)2, "content"),
    CALLBACK((short)3, "callback"),
    LOGTRACK((short)4, "logtrack"),
    REFERER((short)5, "referer");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ENTRY
          return ENTRY;
        case 2: // CONTENT
          return CONTENT;
        case 3: // CALLBACK
          return CALLBACK;
        case 4: // LOGTRACK
          return LOGTRACK;
        case 5: // REFERER
          return REFERER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LOGTRACK_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ENTRY, new org.apache.thrift.meta_data.FieldMetaData("entry", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCloudEntry.class)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CALLBACK, new org.apache.thrift.meta_data.FieldMetaData("callback", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCloudEntry.class)));
    tmpMap.put(_Fields.LOGTRACK, new org.apache.thrift.meta_data.FieldMetaData("logtrack", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.REFERER, new org.apache.thrift.meta_data.FieldMetaData("referer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCloudEntry.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TCloudRequest.class, metaDataMap);
  }

  public TCloudRequest() {
  }

  public TCloudRequest(
    TCloudEntry entry,
    String content,
    TCloudEntry callback,
    boolean logtrack,
    TCloudEntry referer)
  {
    this();
    this.entry = entry;
    this.content = content;
    this.callback = callback;
    this.logtrack = logtrack;
    setLogtrackIsSet(true);
    this.referer = referer;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TCloudRequest(TCloudRequest other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetEntry()) {
      this.entry = new TCloudEntry(other.entry);
    }
    if (other.isSetContent()) {
      this.content = other.content;
    }
    if (other.isSetCallback()) {
      this.callback = new TCloudEntry(other.callback);
    }
    this.logtrack = other.logtrack;
    if (other.isSetReferer()) {
      this.referer = new TCloudEntry(other.referer);
    }
  }

  public TCloudRequest deepCopy() {
    return new TCloudRequest(this);
  }

  @Override
  public void clear() {
    this.entry = null;
    this.content = null;
    this.callback = null;
    setLogtrackIsSet(false);
    this.logtrack = false;
    this.referer = null;
  }

  public TCloudEntry getEntry() {
    return this.entry;
  }

  public TCloudRequest setEntry(TCloudEntry entry) {
    this.entry = entry;
    return this;
  }

  public void unsetEntry() {
    this.entry = null;
  }

  /** Returns true if field entry is set (has been assigned a value) and false otherwise */
  public boolean isSetEntry() {
    return this.entry != null;
  }

  public void setEntryIsSet(boolean value) {
    if (!value) {
      this.entry = null;
    }
  }

  public String getContent() {
    return this.content;
  }

  public TCloudRequest setContent(String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public TCloudEntry getCallback() {
    return this.callback;
  }

  public TCloudRequest setCallback(TCloudEntry callback) {
    this.callback = callback;
    return this;
  }

  public void unsetCallback() {
    this.callback = null;
  }

  /** Returns true if field callback is set (has been assigned a value) and false otherwise */
  public boolean isSetCallback() {
    return this.callback != null;
  }

  public void setCallbackIsSet(boolean value) {
    if (!value) {
      this.callback = null;
    }
  }

  public boolean isLogtrack() {
    return this.logtrack;
  }

  public TCloudRequest setLogtrack(boolean logtrack) {
    this.logtrack = logtrack;
    setLogtrackIsSet(true);
    return this;
  }

  public void unsetLogtrack() {
    __isset_bit_vector.clear(__LOGTRACK_ISSET_ID);
  }

  /** Returns true if field logtrack is set (has been assigned a value) and false otherwise */
  public boolean isSetLogtrack() {
    return __isset_bit_vector.get(__LOGTRACK_ISSET_ID);
  }

  public void setLogtrackIsSet(boolean value) {
    __isset_bit_vector.set(__LOGTRACK_ISSET_ID, value);
  }

  public TCloudEntry getReferer() {
    return this.referer;
  }

  public TCloudRequest setReferer(TCloudEntry referer) {
    this.referer = referer;
    return this;
  }

  public void unsetReferer() {
    this.referer = null;
  }

  /** Returns true if field referer is set (has been assigned a value) and false otherwise */
  public boolean isSetReferer() {
    return this.referer != null;
  }

  public void setRefererIsSet(boolean value) {
    if (!value) {
      this.referer = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ENTRY:
      if (value == null) {
        unsetEntry();
      } else {
        setEntry((TCloudEntry)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case CALLBACK:
      if (value == null) {
        unsetCallback();
      } else {
        setCallback((TCloudEntry)value);
      }
      break;

    case LOGTRACK:
      if (value == null) {
        unsetLogtrack();
      } else {
        setLogtrack((Boolean)value);
      }
      break;

    case REFERER:
      if (value == null) {
        unsetReferer();
      } else {
        setReferer((TCloudEntry)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ENTRY:
      return getEntry();

    case CONTENT:
      return getContent();

    case CALLBACK:
      return getCallback();

    case LOGTRACK:
      return Boolean.valueOf(isLogtrack());

    case REFERER:
      return getReferer();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ENTRY:
      return isSetEntry();
    case CONTENT:
      return isSetContent();
    case CALLBACK:
      return isSetCallback();
    case LOGTRACK:
      return isSetLogtrack();
    case REFERER:
      return isSetReferer();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TCloudRequest)
      return this.equals((TCloudRequest)that);
    return false;
  }

  public boolean equals(TCloudRequest that) {
    if (that == null)
      return false;

    boolean this_present_entry = true && this.isSetEntry();
    boolean that_present_entry = true && that.isSetEntry();
    if (this_present_entry || that_present_entry) {
      if (!(this_present_entry && that_present_entry))
        return false;
      if (!this.entry.equals(that.entry))
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_callback = true && this.isSetCallback();
    boolean that_present_callback = true && that.isSetCallback();
    if (this_present_callback || that_present_callback) {
      if (!(this_present_callback && that_present_callback))
        return false;
      if (!this.callback.equals(that.callback))
        return false;
    }

    boolean this_present_logtrack = true;
    boolean that_present_logtrack = true;
    if (this_present_logtrack || that_present_logtrack) {
      if (!(this_present_logtrack && that_present_logtrack))
        return false;
      if (this.logtrack != that.logtrack)
        return false;
    }

    boolean this_present_referer = true && this.isSetReferer();
    boolean that_present_referer = true && that.isSetReferer();
    if (this_present_referer || that_present_referer) {
      if (!(this_present_referer && that_present_referer))
        return false;
      if (!this.referer.equals(that.referer))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TCloudRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TCloudRequest typedOther = (TCloudRequest)other;

    lastComparison = Boolean.valueOf(isSetEntry()).compareTo(typedOther.isSetEntry());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEntry()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entry, typedOther.entry);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(typedOther.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, typedOther.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCallback()).compareTo(typedOther.isSetCallback());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCallback()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.callback, typedOther.callback);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLogtrack()).compareTo(typedOther.isSetLogtrack());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogtrack()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logtrack, typedOther.logtrack);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReferer()).compareTo(typedOther.isSetReferer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReferer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.referer, typedOther.referer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TCloudRequest(");
    boolean first = true;

    sb.append("entry:");
    if (this.entry == null) {
      sb.append("null");
    } else {
      sb.append(this.entry);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      sb.append(this.content);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("callback:");
    if (this.callback == null) {
      sb.append("null");
    } else {
      sb.append(this.callback);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("logtrack:");
    sb.append(this.logtrack);
    first = false;
    if (!first) sb.append(", ");
    sb.append("referer:");
    if (this.referer == null) {
      sb.append("null");
    } else {
      sb.append(this.referer);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TCloudRequestStandardSchemeFactory implements SchemeFactory {
    public TCloudRequestStandardScheme getScheme() {
      return new TCloudRequestStandardScheme();
    }
  }

  private static class TCloudRequestStandardScheme extends StandardScheme<TCloudRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TCloudRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ENTRY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.entry = new TCloudEntry();
              struct.entry.read(iprot);
              struct.setEntryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CALLBACK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.callback = new TCloudEntry();
              struct.callback.read(iprot);
              struct.setCallbackIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LOGTRACK
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.logtrack = iprot.readBool();
              struct.setLogtrackIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REFERER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.referer = new TCloudEntry();
              struct.referer.read(iprot);
              struct.setRefererIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TCloudRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.entry != null) {
        oprot.writeFieldBegin(ENTRY_FIELD_DESC);
        struct.entry.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeString(struct.content);
        oprot.writeFieldEnd();
      }
      if (struct.callback != null) {
        oprot.writeFieldBegin(CALLBACK_FIELD_DESC);
        struct.callback.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LOGTRACK_FIELD_DESC);
      oprot.writeBool(struct.logtrack);
      oprot.writeFieldEnd();
      if (struct.referer != null) {
        oprot.writeFieldBegin(REFERER_FIELD_DESC);
        struct.referer.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TCloudRequestTupleSchemeFactory implements SchemeFactory {
    public TCloudRequestTupleScheme getScheme() {
      return new TCloudRequestTupleScheme();
    }
  }

  private static class TCloudRequestTupleScheme extends TupleScheme<TCloudRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TCloudRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetEntry()) {
        optionals.set(0);
      }
      if (struct.isSetContent()) {
        optionals.set(1);
      }
      if (struct.isSetCallback()) {
        optionals.set(2);
      }
      if (struct.isSetLogtrack()) {
        optionals.set(3);
      }
      if (struct.isSetReferer()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetEntry()) {
        struct.entry.write(oprot);
      }
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
      if (struct.isSetCallback()) {
        struct.callback.write(oprot);
      }
      if (struct.isSetLogtrack()) {
        oprot.writeBool(struct.logtrack);
      }
      if (struct.isSetReferer()) {
        struct.referer.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TCloudRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.entry = new TCloudEntry();
        struct.entry.read(iprot);
        struct.setEntryIsSet(true);
      }
      if (incoming.get(1)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
      if (incoming.get(2)) {
        struct.callback = new TCloudEntry();
        struct.callback.read(iprot);
        struct.setCallbackIsSet(true);
      }
      if (incoming.get(3)) {
        struct.logtrack = iprot.readBool();
        struct.setLogtrackIsSet(true);
      }
      if (incoming.get(4)) {
        struct.referer = new TCloudEntry();
        struct.referer.read(iprot);
        struct.setRefererIsSet(true);
      }
    }
  }

}

