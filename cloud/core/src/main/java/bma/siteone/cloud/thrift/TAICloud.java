/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package bma.siteone.cloud.thrift;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.thrift.TBase;
import org.apache.thrift.TException;

import bma.common.langutil.ai.stack.AIStack;
import bma.common.thrift.ai.AIBaseStack;
import bma.common.thrift.ai.AIThriftInvoker;
import bma.common.thrift.ai.TAIBaseProcessor;
import bma.common.thrift.ai.TAIBaseServiceClient;
import bma.common.thrift.ai.TAIProcessFunction;
import bma.siteone.cloud.thrift.TCloud.closeCloudApp_args;
import bma.siteone.cloud.thrift.TCloud.closeCloudApp_result;
import bma.siteone.cloud.thrift.TCloud.cloudCall_args;
import bma.siteone.cloud.thrift.TCloud.cloudCall_result;
import bma.siteone.cloud.thrift.TCloud.createCloudApp_args;
import bma.siteone.cloud.thrift.TCloud.createCloudApp_result;
import bma.siteone.cloud.thrift.TCloud.getCloudApiDesc_args;
import bma.siteone.cloud.thrift.TCloud.getCloudApiDesc_result;
import bma.siteone.cloud.thrift.TCloud.getCloudAppDesc_args;
import bma.siteone.cloud.thrift.TCloud.getCloudAppDesc_result;
import bma.siteone.cloud.thrift.TCloud.getCloudNodeDesc_args;
import bma.siteone.cloud.thrift.TCloud.getCloudNodeDesc_result;
import bma.siteone.cloud.thrift.TCloud.getCloudServiceDesc_args;
import bma.siteone.cloud.thrift.TCloud.getCloudServiceDesc_result;
import bma.siteone.cloud.thrift.TCloud.listCloudApiDesc_args;
import bma.siteone.cloud.thrift.TCloud.listCloudApiDesc_result;
import bma.siteone.cloud.thrift.TCloud.listCloudAppDesc_args;
import bma.siteone.cloud.thrift.TCloud.listCloudAppDesc_result;
import bma.siteone.cloud.thrift.TCloud.listCloudServiceDesc_args;
import bma.siteone.cloud.thrift.TCloud.listCloudServiceDesc_result;

public class TAICloud {

	public interface Iface {

		public boolean getCloudNodeDesc(AIStack<String> stack, String nodeId)
				throws org.apache.thrift.TException;

		public boolean listCloudAppDesc(AIStack<List<String>> stack,
				String nodeId) throws org.apache.thrift.TException;

		public boolean createCloudApp(AIStack<Boolean> stack, String nodeId,
				String appId, String appName)
				throws org.apache.thrift.TException;

		public boolean closeCloudApp(AIStack<Boolean> stack, String nodeId,
				String appId) throws org.apache.thrift.TException;

		public boolean getCloudAppDesc(AIStack<String> stack, String nodeId,
				String appId) throws org.apache.thrift.TException;

		public boolean listCloudServiceDesc(AIStack<List<String>> stack,
				String nodeId, String appId)
				throws org.apache.thrift.TException;

		public boolean getCloudServiceDesc(AIStack<String> stack,
				String nodeId, String appId, String serviceId)
				throws org.apache.thrift.TException;

		public boolean listCloudApiDesc(AIStack<List<String>> stack,
				String nodeId, String appId, String serviceId)
				throws org.apache.thrift.TException;

		public boolean getCloudApiDesc(AIStack<String> stack, String nodeId,
				String appId, String serviceId, String apiId)
				throws org.apache.thrift.TException;

		public boolean cloudCall(AIStack<TCloudResponse> stack,
				TCloudRequest req) throws org.apache.thrift.TException;

	}

	public static class Client extends TAIBaseServiceClient implements Iface {

		public Client(AIThriftInvoker invoker) {
			super(invoker);
		}

		public boolean getCloudNodeDesc(AIStack<String> stack, String nodeId)
				throws org.apache.thrift.TException {
			return super.invoke(stack, new getCloudNodeDesc_result(),
					"getCloudNodeDesc", new getCloudNodeDesc_args(nodeId));
		}

		public boolean listCloudAppDesc(AIStack<List<String>> stack,
				String nodeId) throws org.apache.thrift.TException {
			return super.invoke(stack, new listCloudAppDesc_result(),
					"listCloudAppDesc", new listCloudAppDesc_args(nodeId));
		}

		public boolean createCloudApp(AIStack<Boolean> stack, String nodeId,
				String appId, String appName)
				throws org.apache.thrift.TException {
			return super.invoke(stack, new createCloudApp_result(),
					"createCloudApp", new createCloudApp_args(nodeId, appId,
							appName));
		}

		public boolean closeCloudApp(AIStack<Boolean> stack, String nodeId,
				String appId) throws org.apache.thrift.TException {
			return super.invoke(stack, new closeCloudApp_result(),
					"closeCloudApp", new closeCloudApp_args(nodeId, appId));
		}

		public boolean listCloudServiceDesc(AIStack<List<String>> stack,
				String nodeId, String appId)
				throws org.apache.thrift.TException {
			return super.invoke(stack, new listCloudServiceDesc_result(),
					"listCloudServiceDesc", new listCloudServiceDesc_args(
							nodeId, appId));
		}

		public boolean listCloudApiDesc(AIStack<List<String>> stack,
				String nodeId, String appId, String serviceId)
				throws org.apache.thrift.TException {
			return super.invoke(stack, new listCloudApiDesc_result(),
					"listCloudApiDesc", new listCloudApiDesc_args(nodeId,
							appId, serviceId));
		}

		public boolean cloudCall(AIStack<TCloudResponse> stack,
				TCloudRequest req) throws org.apache.thrift.TException {
			return super.invoke(stack, new cloudCall_result(), "cloudCall",
					new cloudCall_args(req));
		}

		@Override
		public boolean getCloudAppDesc(AIStack<String> stack, String nodeId,
				String appId) throws TException {
			return super.invoke(stack, new getCloudAppDesc_result(),
					"getCloudAppDesc", new getCloudAppDesc_args(nodeId, appId));
		}

		@Override
		public boolean getCloudServiceDesc(AIStack<String> stack,
				String nodeId, String appId, String serviceId)
				throws TException {
			return super.invoke(stack, new getCloudServiceDesc_result(),
					"getCloudServiceDesc", new getCloudServiceDesc_args(nodeId,
							appId, serviceId));
		}

		@Override
		public boolean getCloudApiDesc(AIStack<String> stack, String nodeId,
				String appId, String serviceId, String apiId) throws TException {
			return super.invoke(stack, new getCloudServiceDesc_result(),
					"getCloudApiDesc", new getCloudApiDesc_args(nodeId, appId,
							serviceId, apiId));
		}

	}

	public static class Processor<IFACE extends Iface> extends
			TAIBaseProcessor<IFACE> {

		public Processor(IFACE iface) {
			super(
					iface,
					getProcessMap(new HashMap<String, TAIProcessFunction<IFACE, ? extends TBase>>()));
		}

		private static <I extends Iface> Map<String, TAIProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(
				Map<String, TAIProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
			processMap.put("getCloudNodeDesc", new getCloudNodeDesc());
			processMap.put("listCloudAppDesc", new listCloudAppDesc());
			processMap.put("createCloudApp", new createCloudApp());
			processMap.put("closeCloudApp", new closeCloudApp());
			processMap.put("listCloudServiceDesc", new listCloudServiceDesc());
			processMap.put("listCloudApiDesc", new listCloudApiDesc());
			processMap.put("cloudCall", new cloudCall());

			processMap.put("getCloudAppDesc", new getCloudAppDesc());
			processMap.put("getCloudServiceDesc", new getCloudServiceDesc());
			processMap.put("getCloudApiDesc", new getCloudApiDesc());

			return processMap;
		}

		private static class getCloudNodeDesc<I extends Iface> extends
				TAIProcessFunction<I, getCloudNodeDesc_args> {
			public getCloudNodeDesc() {
				super("getCloudNodeDesc");
			}

			protected getCloudNodeDesc_args getEmptyArgsInstance() {
				return new getCloudNodeDesc_args();
			}

			protected boolean getResult(AIStack<TBase> stack, I iface,
					getCloudNodeDesc_args args) throws TException {
				getCloudNodeDesc_result result = new getCloudNodeDesc_result();
				return iface.getCloudNodeDesc(new AIBaseStack<String>(stack,
						result), args.getNodeId());
			}

		}

		private static class listCloudAppDesc<I extends Iface> extends
				TAIProcessFunction<I, listCloudAppDesc_args> {
			public listCloudAppDesc() {
				super("listCloudAppDesc");
			}

			protected listCloudAppDesc_args getEmptyArgsInstance() {
				return new listCloudAppDesc_args();
			}

			protected boolean getResult(AIStack<TBase> stack, I iface,
					listCloudAppDesc_args args) throws TException {
				listCloudAppDesc_result result = new listCloudAppDesc_result();
				return iface.listCloudAppDesc(new AIBaseStack<List<String>>(
						stack, result), args.getNodeId());
			}

		}

		private static class createCloudApp<I extends Iface> extends
				TAIProcessFunction<I, createCloudApp_args> {
			public createCloudApp() {
				super("createCloudApp");
			}

			protected createCloudApp_args getEmptyArgsInstance() {
				return new createCloudApp_args();
			}

			protected boolean getResult(AIStack<TBase> stack, I iface,
					createCloudApp_args args) throws TException {
				createCloudApp_result result = new createCloudApp_result();
				return iface.createCloudApp(new AIBaseStack<Boolean>(stack,
						result), args.getNodeId(), args.getAppId(), args
						.getAppName());
			}
		}

		private static class closeCloudApp<I extends Iface> extends
				TAIProcessFunction<I, closeCloudApp_args> {

			public closeCloudApp() {
				super("closeCloudApp");
			}

			protected closeCloudApp_args getEmptyArgsInstance() {
				return new closeCloudApp_args();
			}

			protected boolean getResult(AIStack<TBase> stack, I iface,
					closeCloudApp_args args) throws TException {
				closeCloudApp_result result = new closeCloudApp_result();
				return iface.closeCloudApp(new AIBaseStack<Boolean>(stack,
						result), args.getNodeId(), args.getAppId());
			}
		}

		private static class listCloudServiceDesc<I extends Iface> extends
				TAIProcessFunction<I, listCloudServiceDesc_args> {
			public listCloudServiceDesc() {
				super("listCloudServiceDesc");
			}

			protected listCloudServiceDesc_args getEmptyArgsInstance() {
				return new listCloudServiceDesc_args();
			}

			protected boolean getResult(AIStack<TBase> stack, I iface,
					listCloudServiceDesc_args args) throws TException {
				listCloudServiceDesc_result result = new listCloudServiceDesc_result();
				return iface.listCloudServiceDesc(
						new AIBaseStack<List<String>>(stack, result),
						args.getNodeId(), args.getAppId());
			}

		}

		private static class listCloudApiDesc<I extends Iface> extends
				TAIProcessFunction<I, listCloudApiDesc_args> {
			public listCloudApiDesc() {
				super("listCloudApiDesc");
			}

			protected listCloudApiDesc_args getEmptyArgsInstance() {
				return new listCloudApiDesc_args();
			}

			protected boolean getResult(AIStack<TBase> stack, I iface,
					listCloudApiDesc_args args) throws TException {
				listCloudApiDesc_result result = new listCloudApiDesc_result();
				return iface.listCloudApiDesc(new AIBaseStack<List<String>>(
						stack, result), args.getNodeId(), args.getAppId(), args
						.getServiceId());
			}

		}

		private static class cloudCall<I extends Iface> extends
				TAIProcessFunction<I, cloudCall_args> {
			public cloudCall() {
				super("cloudCall");
			}

			protected cloudCall_args getEmptyArgsInstance() {
				return new cloudCall_args();
			}

			protected boolean getResult(AIStack<TBase> stack, I iface,
					cloudCall_args args) throws TException {
				cloudCall_result result = new cloudCall_result();
				return iface.cloudCall(new AIBaseStack<TCloudResponse>(stack,
						result), args.getReq());
			}

		}

		private static class getCloudAppDesc<I extends Iface> extends
				TAIProcessFunction<I, getCloudAppDesc_args> {
			public getCloudAppDesc() {
				super("getCloudAppDesc");
			}

			protected getCloudAppDesc_args getEmptyArgsInstance() {
				return new getCloudAppDesc_args();
			}

			protected boolean getResult(AIStack<TBase> stack, I iface,
					getCloudAppDesc_args args) throws TException {
				getCloudAppDesc_result result = new getCloudAppDesc_result();
				return iface.getCloudAppDesc(new AIBaseStack<String>(stack,
						result), args.getNodeId(), args.getAppId());
			}

		}

		private static class getCloudServiceDesc<I extends Iface> extends
				TAIProcessFunction<I, getCloudServiceDesc_args> {

			public getCloudServiceDesc() {
				super("getCloudServiceDesc");
			}

			protected getCloudServiceDesc_args getEmptyArgsInstance() {
				return new getCloudServiceDesc_args();
			}

			protected boolean getResult(AIStack<TBase> stack, I iface,
					getCloudServiceDesc_args args) throws TException {
				getCloudServiceDesc_result result = new getCloudServiceDesc_result();
				return iface.getCloudServiceDesc(new AIBaseStack<String>(stack,
						result), args.getNodeId(), args.getAppId(), args
						.getServiceId());
			}

		}

		private static class getCloudApiDesc<I extends Iface> extends
				TAIProcessFunction<I, getCloudApiDesc_args> {

			public getCloudApiDesc() {
				super("getCloudApiDesc");
			}

			protected getCloudApiDesc_args getEmptyArgsInstance() {
				return new getCloudApiDesc_args();
			}

			protected boolean getResult(AIStack<TBase> stack, I iface,
					getCloudApiDesc_args args) throws TException {
				getCloudApiDesc_result result = new getCloudApiDesc_result();
				return iface.getCloudApiDesc(new AIBaseStack<String>(stack,
						result), args.getNodeId(), args.getAppId(), args
						.getServiceId(), args.getApiId());
			}

		}

	}

}
