/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package bma.siteone.admin.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TAdminDeployService {

  public interface Iface {

    public boolean initAppAuth(List<TSync> syncInit) throws org.apache.thrift.TException;

    public boolean upgradeAppAuth(List<TSync> syncUpgrade) throws org.apache.thrift.TException;

    public List<TSync> exportAppAuth(String appName) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void initAppAuth(List<TSync> syncInit, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.initAppAuth_call> resultHandler) throws org.apache.thrift.TException;

    public void upgradeAppAuth(List<TSync> syncUpgrade, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.upgradeAppAuth_call> resultHandler) throws org.apache.thrift.TException;

    public void exportAppAuth(String appName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.exportAppAuth_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public boolean initAppAuth(List<TSync> syncInit) throws org.apache.thrift.TException
    {
      send_initAppAuth(syncInit);
      return recv_initAppAuth();
    }

    public void send_initAppAuth(List<TSync> syncInit) throws org.apache.thrift.TException
    {
      initAppAuth_args args = new initAppAuth_args();
      args.setSyncInit(syncInit);
      sendBase("initAppAuth", args);
    }

    public boolean recv_initAppAuth() throws org.apache.thrift.TException
    {
      initAppAuth_result result = new initAppAuth_result();
      receiveBase(result, "initAppAuth");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "initAppAuth failed: unknown result");
    }

    public boolean upgradeAppAuth(List<TSync> syncUpgrade) throws org.apache.thrift.TException
    {
      send_upgradeAppAuth(syncUpgrade);
      return recv_upgradeAppAuth();
    }

    public void send_upgradeAppAuth(List<TSync> syncUpgrade) throws org.apache.thrift.TException
    {
      upgradeAppAuth_args args = new upgradeAppAuth_args();
      args.setSyncUpgrade(syncUpgrade);
      sendBase("upgradeAppAuth", args);
    }

    public boolean recv_upgradeAppAuth() throws org.apache.thrift.TException
    {
      upgradeAppAuth_result result = new upgradeAppAuth_result();
      receiveBase(result, "upgradeAppAuth");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "upgradeAppAuth failed: unknown result");
    }

    public List<TSync> exportAppAuth(String appName) throws org.apache.thrift.TException
    {
      send_exportAppAuth(appName);
      return recv_exportAppAuth();
    }

    public void send_exportAppAuth(String appName) throws org.apache.thrift.TException
    {
      exportAppAuth_args args = new exportAppAuth_args();
      args.setAppName(appName);
      sendBase("exportAppAuth", args);
    }

    public List<TSync> recv_exportAppAuth() throws org.apache.thrift.TException
    {
      exportAppAuth_result result = new exportAppAuth_result();
      receiveBase(result, "exportAppAuth");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "exportAppAuth failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void initAppAuth(List<TSync> syncInit, org.apache.thrift.async.AsyncMethodCallback<initAppAuth_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      initAppAuth_call method_call = new initAppAuth_call(syncInit, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class initAppAuth_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<TSync> syncInit;
      public initAppAuth_call(List<TSync> syncInit, org.apache.thrift.async.AsyncMethodCallback<initAppAuth_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.syncInit = syncInit;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("initAppAuth", org.apache.thrift.protocol.TMessageType.CALL, 0));
        initAppAuth_args args = new initAppAuth_args();
        args.setSyncInit(syncInit);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_initAppAuth();
      }
    }

    public void upgradeAppAuth(List<TSync> syncUpgrade, org.apache.thrift.async.AsyncMethodCallback<upgradeAppAuth_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      upgradeAppAuth_call method_call = new upgradeAppAuth_call(syncUpgrade, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class upgradeAppAuth_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<TSync> syncUpgrade;
      public upgradeAppAuth_call(List<TSync> syncUpgrade, org.apache.thrift.async.AsyncMethodCallback<upgradeAppAuth_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.syncUpgrade = syncUpgrade;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("upgradeAppAuth", org.apache.thrift.protocol.TMessageType.CALL, 0));
        upgradeAppAuth_args args = new upgradeAppAuth_args();
        args.setSyncUpgrade(syncUpgrade);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_upgradeAppAuth();
      }
    }

    public void exportAppAuth(String appName, org.apache.thrift.async.AsyncMethodCallback<exportAppAuth_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      exportAppAuth_call method_call = new exportAppAuth_call(appName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class exportAppAuth_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String appName;
      public exportAppAuth_call(String appName, org.apache.thrift.async.AsyncMethodCallback<exportAppAuth_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appName = appName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("exportAppAuth", org.apache.thrift.protocol.TMessageType.CALL, 0));
        exportAppAuth_args args = new exportAppAuth_args();
        args.setAppName(appName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<TSync> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_exportAppAuth();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("initAppAuth", new initAppAuth());
      processMap.put("upgradeAppAuth", new upgradeAppAuth());
      processMap.put("exportAppAuth", new exportAppAuth());
      return processMap;
    }

    private static class initAppAuth<I extends Iface> extends org.apache.thrift.ProcessFunction<I, initAppAuth_args> {
      public initAppAuth() {
        super("initAppAuth");
      }

      protected initAppAuth_args getEmptyArgsInstance() {
        return new initAppAuth_args();
      }

      protected initAppAuth_result getResult(I iface, initAppAuth_args args) throws org.apache.thrift.TException {
        initAppAuth_result result = new initAppAuth_result();
        result.success = iface.initAppAuth(args.syncInit);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class upgradeAppAuth<I extends Iface> extends org.apache.thrift.ProcessFunction<I, upgradeAppAuth_args> {
      public upgradeAppAuth() {
        super("upgradeAppAuth");
      }

      protected upgradeAppAuth_args getEmptyArgsInstance() {
        return new upgradeAppAuth_args();
      }

      protected upgradeAppAuth_result getResult(I iface, upgradeAppAuth_args args) throws org.apache.thrift.TException {
        upgradeAppAuth_result result = new upgradeAppAuth_result();
        result.success = iface.upgradeAppAuth(args.syncUpgrade);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class exportAppAuth<I extends Iface> extends org.apache.thrift.ProcessFunction<I, exportAppAuth_args> {
      public exportAppAuth() {
        super("exportAppAuth");
      }

      protected exportAppAuth_args getEmptyArgsInstance() {
        return new exportAppAuth_args();
      }

      protected exportAppAuth_result getResult(I iface, exportAppAuth_args args) throws org.apache.thrift.TException {
        exportAppAuth_result result = new exportAppAuth_result();
        result.success = iface.exportAppAuth(args.appName);
        return result;
      }
    }

  }

  public static class initAppAuth_args implements org.apache.thrift.TBase<initAppAuth_args, initAppAuth_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("initAppAuth_args");

    private static final org.apache.thrift.protocol.TField SYNC_INIT_FIELD_DESC = new org.apache.thrift.protocol.TField("syncInit", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new initAppAuth_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new initAppAuth_argsTupleSchemeFactory());
    }

    public List<TSync> syncInit; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SYNC_INIT((short)1, "syncInit");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SYNC_INIT
            return SYNC_INIT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SYNC_INIT, new org.apache.thrift.meta_data.FieldMetaData("syncInit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSync.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(initAppAuth_args.class, metaDataMap);
    }

    public initAppAuth_args() {
    }

    public initAppAuth_args(
      List<TSync> syncInit)
    {
      this();
      this.syncInit = syncInit;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public initAppAuth_args(initAppAuth_args other) {
      if (other.isSetSyncInit()) {
        List<TSync> __this__syncInit = new ArrayList<TSync>();
        for (TSync other_element : other.syncInit) {
          __this__syncInit.add(new TSync(other_element));
        }
        this.syncInit = __this__syncInit;
      }
    }

    public initAppAuth_args deepCopy() {
      return new initAppAuth_args(this);
    }

    @Override
    public void clear() {
      this.syncInit = null;
    }

    public int getSyncInitSize() {
      return (this.syncInit == null) ? 0 : this.syncInit.size();
    }

    public java.util.Iterator<TSync> getSyncInitIterator() {
      return (this.syncInit == null) ? null : this.syncInit.iterator();
    }

    public void addToSyncInit(TSync elem) {
      if (this.syncInit == null) {
        this.syncInit = new ArrayList<TSync>();
      }
      this.syncInit.add(elem);
    }

    public List<TSync> getSyncInit() {
      return this.syncInit;
    }

    public initAppAuth_args setSyncInit(List<TSync> syncInit) {
      this.syncInit = syncInit;
      return this;
    }

    public void unsetSyncInit() {
      this.syncInit = null;
    }

    /** Returns true if field syncInit is set (has been assigned a value) and false otherwise */
    public boolean isSetSyncInit() {
      return this.syncInit != null;
    }

    public void setSyncInitIsSet(boolean value) {
      if (!value) {
        this.syncInit = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SYNC_INIT:
        if (value == null) {
          unsetSyncInit();
        } else {
          setSyncInit((List<TSync>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SYNC_INIT:
        return getSyncInit();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SYNC_INIT:
        return isSetSyncInit();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof initAppAuth_args)
        return this.equals((initAppAuth_args)that);
      return false;
    }

    public boolean equals(initAppAuth_args that) {
      if (that == null)
        return false;

      boolean this_present_syncInit = true && this.isSetSyncInit();
      boolean that_present_syncInit = true && that.isSetSyncInit();
      if (this_present_syncInit || that_present_syncInit) {
        if (!(this_present_syncInit && that_present_syncInit))
          return false;
        if (!this.syncInit.equals(that.syncInit))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(initAppAuth_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      initAppAuth_args typedOther = (initAppAuth_args)other;

      lastComparison = Boolean.valueOf(isSetSyncInit()).compareTo(typedOther.isSetSyncInit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSyncInit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.syncInit, typedOther.syncInit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("initAppAuth_args(");
      boolean first = true;

      sb.append("syncInit:");
      if (this.syncInit == null) {
        sb.append("null");
      } else {
        sb.append(this.syncInit);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class initAppAuth_argsStandardSchemeFactory implements SchemeFactory {
      public initAppAuth_argsStandardScheme getScheme() {
        return new initAppAuth_argsStandardScheme();
      }
    }

    private static class initAppAuth_argsStandardScheme extends StandardScheme<initAppAuth_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, initAppAuth_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SYNC_INIT
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list82 = iprot.readListBegin();
                  struct.syncInit = new ArrayList<TSync>(_list82.size);
                  for (int _i83 = 0; _i83 < _list82.size; ++_i83)
                  {
                    TSync _elem84; // required
                    _elem84 = new TSync();
                    _elem84.read(iprot);
                    struct.syncInit.add(_elem84);
                  }
                  iprot.readListEnd();
                }
                struct.setSyncInitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, initAppAuth_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.syncInit != null) {
          oprot.writeFieldBegin(SYNC_INIT_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.syncInit.size()));
            for (TSync _iter85 : struct.syncInit)
            {
              _iter85.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class initAppAuth_argsTupleSchemeFactory implements SchemeFactory {
      public initAppAuth_argsTupleScheme getScheme() {
        return new initAppAuth_argsTupleScheme();
      }
    }

    private static class initAppAuth_argsTupleScheme extends TupleScheme<initAppAuth_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, initAppAuth_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSyncInit()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSyncInit()) {
          {
            oprot.writeI32(struct.syncInit.size());
            for (TSync _iter86 : struct.syncInit)
            {
              _iter86.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, initAppAuth_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list87 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.syncInit = new ArrayList<TSync>(_list87.size);
            for (int _i88 = 0; _i88 < _list87.size; ++_i88)
            {
              TSync _elem89; // required
              _elem89 = new TSync();
              _elem89.read(iprot);
              struct.syncInit.add(_elem89);
            }
          }
          struct.setSyncInitIsSet(true);
        }
      }
    }

  }

  public static class initAppAuth_result implements org.apache.thrift.TBase<initAppAuth_result, initAppAuth_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("initAppAuth_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new initAppAuth_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new initAppAuth_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(initAppAuth_result.class, metaDataMap);
    }

    public initAppAuth_result() {
    }

    public initAppAuth_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public initAppAuth_result(initAppAuth_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public initAppAuth_result deepCopy() {
      return new initAppAuth_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public initAppAuth_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof initAppAuth_result)
        return this.equals((initAppAuth_result)that);
      return false;
    }

    public boolean equals(initAppAuth_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(initAppAuth_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      initAppAuth_result typedOther = (initAppAuth_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("initAppAuth_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class initAppAuth_resultStandardSchemeFactory implements SchemeFactory {
      public initAppAuth_resultStandardScheme getScheme() {
        return new initAppAuth_resultStandardScheme();
      }
    }

    private static class initAppAuth_resultStandardScheme extends StandardScheme<initAppAuth_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, initAppAuth_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, initAppAuth_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class initAppAuth_resultTupleSchemeFactory implements SchemeFactory {
      public initAppAuth_resultTupleScheme getScheme() {
        return new initAppAuth_resultTupleScheme();
      }
    }

    private static class initAppAuth_resultTupleScheme extends TupleScheme<initAppAuth_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, initAppAuth_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, initAppAuth_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class upgradeAppAuth_args implements org.apache.thrift.TBase<upgradeAppAuth_args, upgradeAppAuth_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("upgradeAppAuth_args");

    private static final org.apache.thrift.protocol.TField SYNC_UPGRADE_FIELD_DESC = new org.apache.thrift.protocol.TField("syncUpgrade", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new upgradeAppAuth_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new upgradeAppAuth_argsTupleSchemeFactory());
    }

    public List<TSync> syncUpgrade; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SYNC_UPGRADE((short)1, "syncUpgrade");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SYNC_UPGRADE
            return SYNC_UPGRADE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SYNC_UPGRADE, new org.apache.thrift.meta_data.FieldMetaData("syncUpgrade", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSync.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(upgradeAppAuth_args.class, metaDataMap);
    }

    public upgradeAppAuth_args() {
    }

    public upgradeAppAuth_args(
      List<TSync> syncUpgrade)
    {
      this();
      this.syncUpgrade = syncUpgrade;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public upgradeAppAuth_args(upgradeAppAuth_args other) {
      if (other.isSetSyncUpgrade()) {
        List<TSync> __this__syncUpgrade = new ArrayList<TSync>();
        for (TSync other_element : other.syncUpgrade) {
          __this__syncUpgrade.add(new TSync(other_element));
        }
        this.syncUpgrade = __this__syncUpgrade;
      }
    }

    public upgradeAppAuth_args deepCopy() {
      return new upgradeAppAuth_args(this);
    }

    @Override
    public void clear() {
      this.syncUpgrade = null;
    }

    public int getSyncUpgradeSize() {
      return (this.syncUpgrade == null) ? 0 : this.syncUpgrade.size();
    }

    public java.util.Iterator<TSync> getSyncUpgradeIterator() {
      return (this.syncUpgrade == null) ? null : this.syncUpgrade.iterator();
    }

    public void addToSyncUpgrade(TSync elem) {
      if (this.syncUpgrade == null) {
        this.syncUpgrade = new ArrayList<TSync>();
      }
      this.syncUpgrade.add(elem);
    }

    public List<TSync> getSyncUpgrade() {
      return this.syncUpgrade;
    }

    public upgradeAppAuth_args setSyncUpgrade(List<TSync> syncUpgrade) {
      this.syncUpgrade = syncUpgrade;
      return this;
    }

    public void unsetSyncUpgrade() {
      this.syncUpgrade = null;
    }

    /** Returns true if field syncUpgrade is set (has been assigned a value) and false otherwise */
    public boolean isSetSyncUpgrade() {
      return this.syncUpgrade != null;
    }

    public void setSyncUpgradeIsSet(boolean value) {
      if (!value) {
        this.syncUpgrade = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SYNC_UPGRADE:
        if (value == null) {
          unsetSyncUpgrade();
        } else {
          setSyncUpgrade((List<TSync>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SYNC_UPGRADE:
        return getSyncUpgrade();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SYNC_UPGRADE:
        return isSetSyncUpgrade();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof upgradeAppAuth_args)
        return this.equals((upgradeAppAuth_args)that);
      return false;
    }

    public boolean equals(upgradeAppAuth_args that) {
      if (that == null)
        return false;

      boolean this_present_syncUpgrade = true && this.isSetSyncUpgrade();
      boolean that_present_syncUpgrade = true && that.isSetSyncUpgrade();
      if (this_present_syncUpgrade || that_present_syncUpgrade) {
        if (!(this_present_syncUpgrade && that_present_syncUpgrade))
          return false;
        if (!this.syncUpgrade.equals(that.syncUpgrade))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(upgradeAppAuth_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      upgradeAppAuth_args typedOther = (upgradeAppAuth_args)other;

      lastComparison = Boolean.valueOf(isSetSyncUpgrade()).compareTo(typedOther.isSetSyncUpgrade());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSyncUpgrade()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.syncUpgrade, typedOther.syncUpgrade);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("upgradeAppAuth_args(");
      boolean first = true;

      sb.append("syncUpgrade:");
      if (this.syncUpgrade == null) {
        sb.append("null");
      } else {
        sb.append(this.syncUpgrade);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class upgradeAppAuth_argsStandardSchemeFactory implements SchemeFactory {
      public upgradeAppAuth_argsStandardScheme getScheme() {
        return new upgradeAppAuth_argsStandardScheme();
      }
    }

    private static class upgradeAppAuth_argsStandardScheme extends StandardScheme<upgradeAppAuth_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, upgradeAppAuth_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SYNC_UPGRADE
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list90 = iprot.readListBegin();
                  struct.syncUpgrade = new ArrayList<TSync>(_list90.size);
                  for (int _i91 = 0; _i91 < _list90.size; ++_i91)
                  {
                    TSync _elem92; // required
                    _elem92 = new TSync();
                    _elem92.read(iprot);
                    struct.syncUpgrade.add(_elem92);
                  }
                  iprot.readListEnd();
                }
                struct.setSyncUpgradeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, upgradeAppAuth_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.syncUpgrade != null) {
          oprot.writeFieldBegin(SYNC_UPGRADE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.syncUpgrade.size()));
            for (TSync _iter93 : struct.syncUpgrade)
            {
              _iter93.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class upgradeAppAuth_argsTupleSchemeFactory implements SchemeFactory {
      public upgradeAppAuth_argsTupleScheme getScheme() {
        return new upgradeAppAuth_argsTupleScheme();
      }
    }

    private static class upgradeAppAuth_argsTupleScheme extends TupleScheme<upgradeAppAuth_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, upgradeAppAuth_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSyncUpgrade()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSyncUpgrade()) {
          {
            oprot.writeI32(struct.syncUpgrade.size());
            for (TSync _iter94 : struct.syncUpgrade)
            {
              _iter94.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, upgradeAppAuth_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list95 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.syncUpgrade = new ArrayList<TSync>(_list95.size);
            for (int _i96 = 0; _i96 < _list95.size; ++_i96)
            {
              TSync _elem97; // required
              _elem97 = new TSync();
              _elem97.read(iprot);
              struct.syncUpgrade.add(_elem97);
            }
          }
          struct.setSyncUpgradeIsSet(true);
        }
      }
    }

  }

  public static class upgradeAppAuth_result implements org.apache.thrift.TBase<upgradeAppAuth_result, upgradeAppAuth_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("upgradeAppAuth_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new upgradeAppAuth_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new upgradeAppAuth_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(upgradeAppAuth_result.class, metaDataMap);
    }

    public upgradeAppAuth_result() {
    }

    public upgradeAppAuth_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public upgradeAppAuth_result(upgradeAppAuth_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public upgradeAppAuth_result deepCopy() {
      return new upgradeAppAuth_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public upgradeAppAuth_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof upgradeAppAuth_result)
        return this.equals((upgradeAppAuth_result)that);
      return false;
    }

    public boolean equals(upgradeAppAuth_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(upgradeAppAuth_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      upgradeAppAuth_result typedOther = (upgradeAppAuth_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("upgradeAppAuth_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class upgradeAppAuth_resultStandardSchemeFactory implements SchemeFactory {
      public upgradeAppAuth_resultStandardScheme getScheme() {
        return new upgradeAppAuth_resultStandardScheme();
      }
    }

    private static class upgradeAppAuth_resultStandardScheme extends StandardScheme<upgradeAppAuth_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, upgradeAppAuth_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, upgradeAppAuth_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class upgradeAppAuth_resultTupleSchemeFactory implements SchemeFactory {
      public upgradeAppAuth_resultTupleScheme getScheme() {
        return new upgradeAppAuth_resultTupleScheme();
      }
    }

    private static class upgradeAppAuth_resultTupleScheme extends TupleScheme<upgradeAppAuth_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, upgradeAppAuth_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, upgradeAppAuth_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class exportAppAuth_args implements org.apache.thrift.TBase<exportAppAuth_args, exportAppAuth_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exportAppAuth_args");

    private static final org.apache.thrift.protocol.TField APP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("appName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exportAppAuth_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exportAppAuth_argsTupleSchemeFactory());
    }

    public String appName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APP_NAME((short)1, "appName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP_NAME
            return APP_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP_NAME, new org.apache.thrift.meta_data.FieldMetaData("appName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exportAppAuth_args.class, metaDataMap);
    }

    public exportAppAuth_args() {
    }

    public exportAppAuth_args(
      String appName)
    {
      this();
      this.appName = appName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exportAppAuth_args(exportAppAuth_args other) {
      if (other.isSetAppName()) {
        this.appName = other.appName;
      }
    }

    public exportAppAuth_args deepCopy() {
      return new exportAppAuth_args(this);
    }

    @Override
    public void clear() {
      this.appName = null;
    }

    public String getAppName() {
      return this.appName;
    }

    public exportAppAuth_args setAppName(String appName) {
      this.appName = appName;
      return this;
    }

    public void unsetAppName() {
      this.appName = null;
    }

    /** Returns true if field appName is set (has been assigned a value) and false otherwise */
    public boolean isSetAppName() {
      return this.appName != null;
    }

    public void setAppNameIsSet(boolean value) {
      if (!value) {
        this.appName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP_NAME:
        if (value == null) {
          unsetAppName();
        } else {
          setAppName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP_NAME:
        return getAppName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP_NAME:
        return isSetAppName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exportAppAuth_args)
        return this.equals((exportAppAuth_args)that);
      return false;
    }

    public boolean equals(exportAppAuth_args that) {
      if (that == null)
        return false;

      boolean this_present_appName = true && this.isSetAppName();
      boolean that_present_appName = true && that.isSetAppName();
      if (this_present_appName || that_present_appName) {
        if (!(this_present_appName && that_present_appName))
          return false;
        if (!this.appName.equals(that.appName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(exportAppAuth_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      exportAppAuth_args typedOther = (exportAppAuth_args)other;

      lastComparison = Boolean.valueOf(isSetAppName()).compareTo(typedOther.isSetAppName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appName, typedOther.appName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exportAppAuth_args(");
      boolean first = true;

      sb.append("appName:");
      if (this.appName == null) {
        sb.append("null");
      } else {
        sb.append(this.appName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exportAppAuth_argsStandardSchemeFactory implements SchemeFactory {
      public exportAppAuth_argsStandardScheme getScheme() {
        return new exportAppAuth_argsStandardScheme();
      }
    }

    private static class exportAppAuth_argsStandardScheme extends StandardScheme<exportAppAuth_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exportAppAuth_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APP_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.appName = iprot.readString();
                struct.setAppNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exportAppAuth_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.appName != null) {
          oprot.writeFieldBegin(APP_NAME_FIELD_DESC);
          oprot.writeString(struct.appName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exportAppAuth_argsTupleSchemeFactory implements SchemeFactory {
      public exportAppAuth_argsTupleScheme getScheme() {
        return new exportAppAuth_argsTupleScheme();
      }
    }

    private static class exportAppAuth_argsTupleScheme extends TupleScheme<exportAppAuth_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exportAppAuth_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAppName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAppName()) {
          oprot.writeString(struct.appName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exportAppAuth_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.appName = iprot.readString();
          struct.setAppNameIsSet(true);
        }
      }
    }

  }

  public static class exportAppAuth_result implements org.apache.thrift.TBase<exportAppAuth_result, exportAppAuth_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exportAppAuth_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exportAppAuth_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exportAppAuth_resultTupleSchemeFactory());
    }

    public List<TSync> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSync.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exportAppAuth_result.class, metaDataMap);
    }

    public exportAppAuth_result() {
    }

    public exportAppAuth_result(
      List<TSync> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exportAppAuth_result(exportAppAuth_result other) {
      if (other.isSetSuccess()) {
        List<TSync> __this__success = new ArrayList<TSync>();
        for (TSync other_element : other.success) {
          __this__success.add(new TSync(other_element));
        }
        this.success = __this__success;
      }
    }

    public exportAppAuth_result deepCopy() {
      return new exportAppAuth_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TSync> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TSync elem) {
      if (this.success == null) {
        this.success = new ArrayList<TSync>();
      }
      this.success.add(elem);
    }

    public List<TSync> getSuccess() {
      return this.success;
    }

    public exportAppAuth_result setSuccess(List<TSync> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TSync>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exportAppAuth_result)
        return this.equals((exportAppAuth_result)that);
      return false;
    }

    public boolean equals(exportAppAuth_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(exportAppAuth_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      exportAppAuth_result typedOther = (exportAppAuth_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exportAppAuth_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exportAppAuth_resultStandardSchemeFactory implements SchemeFactory {
      public exportAppAuth_resultStandardScheme getScheme() {
        return new exportAppAuth_resultStandardScheme();
      }
    }

    private static class exportAppAuth_resultStandardScheme extends StandardScheme<exportAppAuth_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exportAppAuth_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list98 = iprot.readListBegin();
                  struct.success = new ArrayList<TSync>(_list98.size);
                  for (int _i99 = 0; _i99 < _list98.size; ++_i99)
                  {
                    TSync _elem100; // required
                    _elem100 = new TSync();
                    _elem100.read(iprot);
                    struct.success.add(_elem100);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exportAppAuth_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TSync _iter101 : struct.success)
            {
              _iter101.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exportAppAuth_resultTupleSchemeFactory implements SchemeFactory {
      public exportAppAuth_resultTupleScheme getScheme() {
        return new exportAppAuth_resultTupleScheme();
      }
    }

    private static class exportAppAuth_resultTupleScheme extends TupleScheme<exportAppAuth_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exportAppAuth_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TSync _iter102 : struct.success)
            {
              _iter102.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exportAppAuth_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list103 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<TSync>(_list103.size);
            for (int _i104 = 0; _i104 < _list103.size; ++_i104)
            {
              TSync _elem105; // required
              _elem105 = new TSync();
              _elem105.read(iprot);
              struct.success.add(_elem105);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
