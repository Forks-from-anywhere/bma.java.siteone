/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package bma.siteone.matchlist.thrift;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

public class TMatchListService {

	public interface Iface {

		public int createOne(TMatchInfo info)
				throws org.apache.thrift.TException;

		public boolean updateOne(TMatchInfo info)
				throws org.apache.thrift.TException;

		public boolean deleteOne(int id) throws org.apache.thrift.TException;

		public TMatchInfo getOne(int id) throws org.apache.thrift.TException;

		public boolean match(String groupId, String v, String type)
				throws org.apache.thrift.TException;

		public List<String> listGroupId() throws org.apache.thrift.TException;

		public List<TMatchInfo> listGroup(String groupId)
				throws org.apache.thrift.TException;

		public TMatchSearchResult search(String hsql, int page, int pageSize)
				throws org.apache.thrift.TException;

	}

	public interface AsyncIface {

		public void createOne(
				TMatchInfo info,
				org.apache.thrift.async.AsyncMethodCallback<AsyncClient.createOne_call> resultHandler)
				throws org.apache.thrift.TException;

		public void updateOne(
				TMatchInfo info,
				org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateOne_call> resultHandler)
				throws org.apache.thrift.TException;

		public void deleteOne(
				int id,
				org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deleteOne_call> resultHandler)
				throws org.apache.thrift.TException;

		public void getOne(
				int id,
				org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getOne_call> resultHandler)
				throws org.apache.thrift.TException;

		public void match(
				String groupId,
				String v,
				String type,
				org.apache.thrift.async.AsyncMethodCallback<AsyncClient.match_call> resultHandler)
				throws org.apache.thrift.TException;

		public void listGroupId(
				org.apache.thrift.async.AsyncMethodCallback<AsyncClient.listGroupId_call> resultHandler)
				throws org.apache.thrift.TException;

		public void listGroup(
				String groupId,
				org.apache.thrift.async.AsyncMethodCallback<AsyncClient.listGroup_call> resultHandler)
				throws org.apache.thrift.TException;

		public void search(
				String hsql,
				int page,
				int pageSize,
				org.apache.thrift.async.AsyncMethodCallback<AsyncClient.search_call> resultHandler)
				throws org.apache.thrift.TException;

	}

	public static class Client extends org.apache.thrift.TServiceClient
			implements Iface {
		public static class Factory implements
				org.apache.thrift.TServiceClientFactory<Client> {
			public Factory() {
			}

			@Override
			public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
				return new Client(prot);
			}

			@Override
			public Client getClient(org.apache.thrift.protocol.TProtocol iprot,
					org.apache.thrift.protocol.TProtocol oprot) {
				return new Client(iprot, oprot);
			}
		}

		public Client(org.apache.thrift.protocol.TProtocol prot) {
			super(prot, prot);
		}

		public Client(org.apache.thrift.protocol.TProtocol iprot,
				org.apache.thrift.protocol.TProtocol oprot) {
			super(iprot, oprot);
		}

		@Override
		public int createOne(TMatchInfo info)
				throws org.apache.thrift.TException {
			send_createOne(info);
			return recv_createOne();
		}

		public void send_createOne(TMatchInfo info)
				throws org.apache.thrift.TException {
			createOne_args args = new createOne_args();
			args.setInfo(info);
			sendBase("createOne", args);
		}

		public int recv_createOne() throws org.apache.thrift.TException {
			createOne_result result = new createOne_result();
			receiveBase(result, "createOne");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(
					org.apache.thrift.TApplicationException.MISSING_RESULT,
					"createOne failed: unknown result");
		}

		@Override
		public boolean updateOne(TMatchInfo info)
				throws org.apache.thrift.TException {
			send_updateOne(info);
			return recv_updateOne();
		}

		public void send_updateOne(TMatchInfo info)
				throws org.apache.thrift.TException {
			updateOne_args args = new updateOne_args();
			args.setInfo(info);
			sendBase("updateOne", args);
		}

		public boolean recv_updateOne() throws org.apache.thrift.TException {
			updateOne_result result = new updateOne_result();
			receiveBase(result, "updateOne");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(
					org.apache.thrift.TApplicationException.MISSING_RESULT,
					"updateOne failed: unknown result");
		}

		@Override
		public boolean deleteOne(int id) throws org.apache.thrift.TException {
			send_deleteOne(id);
			return recv_deleteOne();
		}

		public void send_deleteOne(int id) throws org.apache.thrift.TException {
			deleteOne_args args = new deleteOne_args();
			args.setId(id);
			sendBase("deleteOne", args);
		}

		public boolean recv_deleteOne() throws org.apache.thrift.TException {
			deleteOne_result result = new deleteOne_result();
			receiveBase(result, "deleteOne");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(
					org.apache.thrift.TApplicationException.MISSING_RESULT,
					"deleteOne failed: unknown result");
		}

		@Override
		public TMatchInfo getOne(int id) throws org.apache.thrift.TException {
			send_getOne(id);
			return recv_getOne();
		}

		public void send_getOne(int id) throws org.apache.thrift.TException {
			getOne_args args = new getOne_args();
			args.setId(id);
			sendBase("getOne", args);
		}

		public TMatchInfo recv_getOne() throws org.apache.thrift.TException {
			getOne_result result = new getOne_result();
			receiveBase(result, "getOne");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(
					org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getOne failed: unknown result");
		}

		@Override
		public boolean match(String groupId, String v, String type)
				throws org.apache.thrift.TException {
			send_match(groupId, v, type);
			return recv_match();
		}

		public void send_match(String groupId, String v, String type)
				throws org.apache.thrift.TException {
			match_args args = new match_args();
			args.setGroupId(groupId);
			args.setV(v);
			args.setType(type);
			sendBase("match", args);
		}

		public boolean recv_match() throws org.apache.thrift.TException {
			match_result result = new match_result();
			receiveBase(result, "match");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(
					org.apache.thrift.TApplicationException.MISSING_RESULT,
					"match failed: unknown result");
		}

		@Override
		public List<String> listGroupId() throws org.apache.thrift.TException {
			send_listGroupId();
			return recv_listGroupId();
		}

		public void send_listGroupId() throws org.apache.thrift.TException {
			listGroupId_args args = new listGroupId_args();
			sendBase("listGroupId", args);
		}

		public List<String> recv_listGroupId()
				throws org.apache.thrift.TException {
			listGroupId_result result = new listGroupId_result();
			receiveBase(result, "listGroupId");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(
					org.apache.thrift.TApplicationException.MISSING_RESULT,
					"listGroupId failed: unknown result");
		}

		@Override
		public List<TMatchInfo> listGroup(String groupId)
				throws org.apache.thrift.TException {
			send_listGroup(groupId);
			return recv_listGroup();
		}

		public void send_listGroup(String groupId)
				throws org.apache.thrift.TException {
			listGroup_args args = new listGroup_args();
			args.setGroupId(groupId);
			sendBase("listGroup", args);
		}

		public List<TMatchInfo> recv_listGroup()
				throws org.apache.thrift.TException {
			listGroup_result result = new listGroup_result();
			receiveBase(result, "listGroup");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(
					org.apache.thrift.TApplicationException.MISSING_RESULT,
					"listGroup failed: unknown result");
		}

		@Override
		public TMatchSearchResult search(String hsql, int page, int pageSize)
				throws org.apache.thrift.TException {
			send_search(hsql, page, pageSize);
			return recv_search();
		}

		public void send_search(String hsql, int page, int pageSize)
				throws org.apache.thrift.TException {
			search_args args = new search_args();
			args.setHsql(hsql);
			args.setPage(page);
			args.setPageSize(pageSize);
			sendBase("search", args);
		}

		public TMatchSearchResult recv_search()
				throws org.apache.thrift.TException {
			search_result result = new search_result();
			receiveBase(result, "search");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(
					org.apache.thrift.TApplicationException.MISSING_RESULT,
					"search failed: unknown result");
		}

	}

	public static class AsyncClient extends
			org.apache.thrift.async.TAsyncClient implements AsyncIface {
		public static class Factory implements
				org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
			private org.apache.thrift.async.TAsyncClientManager clientManager;
			private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

			public Factory(
					org.apache.thrift.async.TAsyncClientManager clientManager,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
				this.clientManager = clientManager;
				this.protocolFactory = protocolFactory;
			}

			@Override
			public AsyncClient getAsyncClient(
					org.apache.thrift.transport.TNonblockingTransport transport) {
				return new AsyncClient(protocolFactory, clientManager,
						transport);
			}
		}

		public AsyncClient(
				org.apache.thrift.protocol.TProtocolFactory protocolFactory,
				org.apache.thrift.async.TAsyncClientManager clientManager,
				org.apache.thrift.transport.TNonblockingTransport transport) {
			super(protocolFactory, clientManager, transport);
		}

		@Override
		public void createOne(
				TMatchInfo info,
				org.apache.thrift.async.AsyncMethodCallback<createOne_call> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			createOne_call method_call = new createOne_call(info,
					resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class createOne_call extends
				org.apache.thrift.async.TAsyncMethodCall {
			private TMatchInfo info;

			public createOne_call(
					TMatchInfo info,
					org.apache.thrift.async.AsyncMethodCallback<createOne_call> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport)
					throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.info = info;
			}

			@Override
			public void write_args(org.apache.thrift.protocol.TProtocol prot)
					throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
						"createOne",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				createOne_args args = new createOne_args();
				args.setInfo(info);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public int getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client
						.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_createOne();
			}
		}

		@Override
		public void updateOne(
				TMatchInfo info,
				org.apache.thrift.async.AsyncMethodCallback<updateOne_call> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			updateOne_call method_call = new updateOne_call(info,
					resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class updateOne_call extends
				org.apache.thrift.async.TAsyncMethodCall {
			private TMatchInfo info;

			public updateOne_call(
					TMatchInfo info,
					org.apache.thrift.async.AsyncMethodCallback<updateOne_call> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport)
					throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.info = info;
			}

			@Override
			public void write_args(org.apache.thrift.protocol.TProtocol prot)
					throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
						"updateOne",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				updateOne_args args = new updateOne_args();
				args.setInfo(info);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public boolean getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client
						.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_updateOne();
			}
		}

		@Override
		public void deleteOne(
				int id,
				org.apache.thrift.async.AsyncMethodCallback<deleteOne_call> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			deleteOne_call method_call = new deleteOne_call(id, resultHandler,
					this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class deleteOne_call extends
				org.apache.thrift.async.TAsyncMethodCall {
			private int id;

			public deleteOne_call(
					int id,
					org.apache.thrift.async.AsyncMethodCallback<deleteOne_call> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport)
					throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.id = id;
			}

			@Override
			public void write_args(org.apache.thrift.protocol.TProtocol prot)
					throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
						"deleteOne",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				deleteOne_args args = new deleteOne_args();
				args.setId(id);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public boolean getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client
						.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_deleteOne();
			}
		}

		@Override
		public void getOne(
				int id,
				org.apache.thrift.async.AsyncMethodCallback<getOne_call> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getOne_call method_call = new getOne_call(id, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getOne_call extends
				org.apache.thrift.async.TAsyncMethodCall {
			private int id;

			public getOne_call(
					int id,
					org.apache.thrift.async.AsyncMethodCallback<getOne_call> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport)
					throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.id = id;
			}

			@Override
			public void write_args(org.apache.thrift.protocol.TProtocol prot)
					throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
						"getOne", org.apache.thrift.protocol.TMessageType.CALL,
						0));
				getOne_args args = new getOne_args();
				args.setId(id);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public TMatchInfo getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client
						.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getOne();
			}
		}

		@Override
		public void match(
				String groupId,
				String v,
				String type,
				org.apache.thrift.async.AsyncMethodCallback<match_call> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			match_call method_call = new match_call(groupId, v, type,
					resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class match_call extends
				org.apache.thrift.async.TAsyncMethodCall {
			private String groupId;
			private String v;
			private String type;

			public match_call(
					String groupId,
					String v,
					String type,
					org.apache.thrift.async.AsyncMethodCallback<match_call> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport)
					throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.groupId = groupId;
				this.v = v;
				this.type = type;
			}

			@Override
			public void write_args(org.apache.thrift.protocol.TProtocol prot)
					throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
						"match", org.apache.thrift.protocol.TMessageType.CALL,
						0));
				match_args args = new match_args();
				args.setGroupId(groupId);
				args.setV(v);
				args.setType(type);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public boolean getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client
						.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_match();
			}
		}

		@Override
		public void listGroupId(
				org.apache.thrift.async.AsyncMethodCallback<listGroupId_call> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			listGroupId_call method_call = new listGroupId_call(resultHandler,
					this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class listGroupId_call extends
				org.apache.thrift.async.TAsyncMethodCall {
			public listGroupId_call(
					org.apache.thrift.async.AsyncMethodCallback<listGroupId_call> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport)
					throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
			}

			@Override
			public void write_args(org.apache.thrift.protocol.TProtocol prot)
					throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
						"listGroupId",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				listGroupId_args args = new listGroupId_args();
				args.write(prot);
				prot.writeMessageEnd();
			}

			public List<String> getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client
						.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_listGroupId();
			}
		}

		@Override
		public void listGroup(
				String groupId,
				org.apache.thrift.async.AsyncMethodCallback<listGroup_call> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			listGroup_call method_call = new listGroup_call(groupId,
					resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class listGroup_call extends
				org.apache.thrift.async.TAsyncMethodCall {
			private String groupId;

			public listGroup_call(
					String groupId,
					org.apache.thrift.async.AsyncMethodCallback<listGroup_call> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport)
					throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.groupId = groupId;
			}

			@Override
			public void write_args(org.apache.thrift.protocol.TProtocol prot)
					throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
						"listGroup",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				listGroup_args args = new listGroup_args();
				args.setGroupId(groupId);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public List<TMatchInfo> getResult()
					throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client
						.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_listGroup();
			}
		}

		@Override
		public void search(
				String hsql,
				int page,
				int pageSize,
				org.apache.thrift.async.AsyncMethodCallback<search_call> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			search_call method_call = new search_call(hsql, page, pageSize,
					resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class search_call extends
				org.apache.thrift.async.TAsyncMethodCall {
			private String hsql;
			private int page;
			private int pageSize;

			public search_call(
					String hsql,
					int page,
					int pageSize,
					org.apache.thrift.async.AsyncMethodCallback<search_call> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport)
					throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.hsql = hsql;
				this.page = page;
				this.pageSize = pageSize;
			}

			@Override
			public void write_args(org.apache.thrift.protocol.TProtocol prot)
					throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
						"search", org.apache.thrift.protocol.TMessageType.CALL,
						0));
				search_args args = new search_args();
				args.setHsql(hsql);
				args.setPage(page);
				args.setPageSize(pageSize);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public TMatchSearchResult getResult()
					throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client
						.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_search();
			}
		}

	}

	public static class Processor<I extends Iface> extends
			org.apache.thrift.TBaseProcessor<I> implements
			org.apache.thrift.TProcessor {

		public Processor(I iface) {
			super(
					iface,
					getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
		}

		protected Processor(
				I iface,
				Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
			super(iface, getProcessMap(processMap));
		}

		private static <I extends Iface> Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(
				Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
			processMap.put("createOne", new createOne());
			processMap.put("updateOne", new updateOne());
			processMap.put("deleteOne", new deleteOne());
			processMap.put("getOne", new getOne());
			processMap.put("match", new match());
			processMap.put("listGroupId", new listGroupId());
			processMap.put("listGroup", new listGroup());
			processMap.put("search", new search());
			return processMap;
		}

		private static class createOne<I extends Iface> extends
				org.apache.thrift.ProcessFunction<I, createOne_args> {
			public createOne() {
				super("createOne");
			}

			@Override
			protected createOne_args getEmptyArgsInstance() {
				return new createOne_args();
			}

			@Override
			protected createOne_result getResult(I iface, createOne_args args)
					throws org.apache.thrift.TException {
				createOne_result result = new createOne_result();
				result.success = iface.createOne(args.info);
				result.setSuccessIsSet(true);
				return result;
			}
		}

		private static class updateOne<I extends Iface> extends
				org.apache.thrift.ProcessFunction<I, updateOne_args> {
			public updateOne() {
				super("updateOne");
			}

			@Override
			protected updateOne_args getEmptyArgsInstance() {
				return new updateOne_args();
			}

			@Override
			protected updateOne_result getResult(I iface, updateOne_args args)
					throws org.apache.thrift.TException {
				updateOne_result result = new updateOne_result();
				result.success = iface.updateOne(args.info);
				result.setSuccessIsSet(true);
				return result;
			}
		}

		private static class deleteOne<I extends Iface> extends
				org.apache.thrift.ProcessFunction<I, deleteOne_args> {
			public deleteOne() {
				super("deleteOne");
			}

			@Override
			protected deleteOne_args getEmptyArgsInstance() {
				return new deleteOne_args();
			}

			@Override
			protected deleteOne_result getResult(I iface, deleteOne_args args)
					throws org.apache.thrift.TException {
				deleteOne_result result = new deleteOne_result();
				result.success = iface.deleteOne(args.id);
				result.setSuccessIsSet(true);
				return result;
			}
		}

		private static class getOne<I extends Iface> extends
				org.apache.thrift.ProcessFunction<I, getOne_args> {
			public getOne() {
				super("getOne");
			}

			@Override
			protected getOne_args getEmptyArgsInstance() {
				return new getOne_args();
			}

			@Override
			protected getOne_result getResult(I iface, getOne_args args)
					throws org.apache.thrift.TException {
				getOne_result result = new getOne_result();
				result.success = iface.getOne(args.id);
				return result;
			}
		}

		private static class match<I extends Iface> extends
				org.apache.thrift.ProcessFunction<I, match_args> {
			public match() {
				super("match");
			}

			@Override
			protected match_args getEmptyArgsInstance() {
				return new match_args();
			}

			@Override
			protected match_result getResult(I iface, match_args args)
					throws org.apache.thrift.TException {
				match_result result = new match_result();
				result.success = iface.match(args.groupId, args.v, args.type);
				result.setSuccessIsSet(true);
				return result;
			}
		}

		private static class listGroupId<I extends Iface> extends
				org.apache.thrift.ProcessFunction<I, listGroupId_args> {
			public listGroupId() {
				super("listGroupId");
			}

			@Override
			protected listGroupId_args getEmptyArgsInstance() {
				return new listGroupId_args();
			}

			@Override
			protected listGroupId_result getResult(I iface,
					listGroupId_args args) throws org.apache.thrift.TException {
				listGroupId_result result = new listGroupId_result();
				result.success = iface.listGroupId();
				return result;
			}
		}

		private static class listGroup<I extends Iface> extends
				org.apache.thrift.ProcessFunction<I, listGroup_args> {
			public listGroup() {
				super("listGroup");
			}

			@Override
			protected listGroup_args getEmptyArgsInstance() {
				return new listGroup_args();
			}

			@Override
			protected listGroup_result getResult(I iface, listGroup_args args)
					throws org.apache.thrift.TException {
				listGroup_result result = new listGroup_result();
				result.success = iface.listGroup(args.groupId);
				return result;
			}
		}

		private static class search<I extends Iface> extends
				org.apache.thrift.ProcessFunction<I, search_args> {
			public search() {
				super("search");
			}

			@Override
			protected search_args getEmptyArgsInstance() {
				return new search_args();
			}

			@Override
			protected search_result getResult(I iface, search_args args)
					throws org.apache.thrift.TException {
				search_result result = new search_result();
				result.success = iface.search(args.hsql, args.page,
						args.pageSize);
				return result;
			}
		}

	}

	public static class createOne_args implements
			org.apache.thrift.TBase<createOne_args, createOne_args._Fields>,
			java.io.Serializable, Cloneable {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"createOne_args");

		private static final org.apache.thrift.protocol.TField INFO_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"info", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new createOne_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new createOne_argsTupleSchemeFactory());
		}

		public TMatchInfo info; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			INFO((short) 1, "info");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // INFO
					return INFO;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			@Override
			public short getThriftFieldId() {
				return _thriftId;
			}

			@Override
			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.INFO,
					new org.apache.thrift.meta_data.FieldMetaData("info",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(
									org.apache.thrift.protocol.TType.STRUCT,
									TMatchInfo.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					createOne_args.class, metaDataMap);
		}

		public createOne_args() {
		}

		public createOne_args(TMatchInfo info) {
			this();
			this.info = info;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public createOne_args(createOne_args other) {
			if (other.isSetInfo()) {
				this.info = new TMatchInfo(other.info);
			}
		}

		@Override
		public createOne_args deepCopy() {
			return new createOne_args(this);
		}

		@Override
		public void clear() {
			this.info = null;
		}

		public TMatchInfo getInfo() {
			return this.info;
		}

		public createOne_args setInfo(TMatchInfo info) {
			this.info = info;
			return this;
		}

		public void unsetInfo() {
			this.info = null;
		}

		/**
		 * Returns true if field info is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetInfo() {
			return this.info != null;
		}

		public void setInfoIsSet(boolean value) {
			if (!value) {
				this.info = null;
			}
		}

		@Override
		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case INFO:
				if (value == null) {
					unsetInfo();
				} else {
					setInfo((TMatchInfo) value);
				}
				break;

			}
		}

		@Override
		public Object getFieldValue(_Fields field) {
			switch (field) {
			case INFO:
				return getInfo();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		@Override
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case INFO:
				return isSetInfo();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof createOne_args)
				return this.equals((createOne_args) that);
			return false;
		}

		public boolean equals(createOne_args that) {
			if (that == null)
				return false;

			boolean this_present_info = true && this.isSetInfo();
			boolean that_present_info = true && that.isSetInfo();
			if (this_present_info || that_present_info) {
				if (!(this_present_info && that_present_info))
					return false;
				if (!this.info.equals(that.info))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			return 0;
		}

		@Override
		public int compareTo(createOne_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;
			createOne_args typedOther = other;

			lastComparison = Boolean.valueOf(isSetInfo()).compareTo(
					typedOther.isSetInfo());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetInfo()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.info, typedOther.info);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@Override
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		@Override
		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("createOne_args(");
			sb.append("info:");
			if (this.info == null) {
				sb.append("null");
			} else {
				sb.append(this.info);
			}
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class createOne_argsStandardSchemeFactory implements
				SchemeFactory {
			@Override
			public createOne_argsStandardScheme getScheme() {
				return new createOne_argsStandardScheme();
			}
		}

		private static class createOne_argsStandardScheme extends
				StandardScheme<createOne_args> {

			@Override
			public void read(org.apache.thrift.protocol.TProtocol iprot,
					createOne_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // INFO
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.info = new TMatchInfo();
							struct.info.read(iprot);
							struct.setInfoIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			@Override
			public void write(org.apache.thrift.protocol.TProtocol oprot,
					createOne_args struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.info != null) {
					oprot.writeFieldBegin(INFO_FIELD_DESC);
					struct.info.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class createOne_argsTupleSchemeFactory implements
				SchemeFactory {
			@Override
			public createOne_argsTupleScheme getScheme() {
				return new createOne_argsTupleScheme();
			}
		}

		private static class createOne_argsTupleScheme extends
				TupleScheme<createOne_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					createOne_args struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetInfo()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetInfo()) {
					struct.info.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot,
					createOne_args struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.info = new TMatchInfo();
					struct.info.read(iprot);
					struct.setInfoIsSet(true);
				}
			}
		}

	}

	public static class createOne_result
			implements
			org.apache.thrift.TBase<createOne_result, createOne_result._Fields>,
			java.io.Serializable, Cloneable {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"createOne_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.I32, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new createOne_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new createOne_resultTupleSchemeFactory());
		}

		public int success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			@Override
			public short getThriftFieldId() {
				return _thriftId;
			}

			@Override
			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __SUCCESS_ISSET_ID = 0;
		private BitSet __isset_bit_vector = new BitSet(1);
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.I32)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					createOne_result.class, metaDataMap);
		}

		public createOne_result() {
		}

		public createOne_result(int success) {
			this();
			this.success = success;
			setSuccessIsSet(true);
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public createOne_result(createOne_result other) {
			__isset_bit_vector.clear();
			__isset_bit_vector.or(other.__isset_bit_vector);
			this.success = other.success;
		}

		@Override
		public createOne_result deepCopy() {
			return new createOne_result(this);
		}

		@Override
		public void clear() {
			setSuccessIsSet(false);
			this.success = 0;
		}

		public int getSuccess() {
			return this.success;
		}

		public createOne_result setSuccess(int success) {
			this.success = success;
			setSuccessIsSet(true);
			return this;
		}

		public void unsetSuccess() {
			__isset_bit_vector.clear(__SUCCESS_ISSET_ID);
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
		}

		public void setSuccessIsSet(boolean value) {
			__isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
		}

		@Override
		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Integer) value);
				}
				break;

			}
		}

		@Override
		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return Integer.valueOf(getSuccess());

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		@Override
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof createOne_result)
				return this.equals((createOne_result) that);
			return false;
		}

		public boolean equals(createOne_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true;
			boolean that_present_success = true;
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (this.success != that.success)
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			return 0;
		}

		@Override
		public int compareTo(createOne_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;
			createOne_result typedOther = other;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
					typedOther.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.success, typedOther.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@Override
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		@Override
		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("createOne_result(");
			sb.append("success:");
			sb.append(this.success);
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class createOne_resultStandardSchemeFactory implements
				SchemeFactory {
			@Override
			public createOne_resultStandardScheme getScheme() {
				return new createOne_resultStandardScheme();
			}
		}

		private static class createOne_resultStandardScheme extends
				StandardScheme<createOne_result> {

			@Override
			public void read(org.apache.thrift.protocol.TProtocol iprot,
					createOne_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.success = iprot.readI32();
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			@Override
			public void write(org.apache.thrift.protocol.TProtocol oprot,
					createOne_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
				oprot.writeI32(struct.success);
				oprot.writeFieldEnd();
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class createOne_resultTupleSchemeFactory implements
				SchemeFactory {
			@Override
			public createOne_resultTupleScheme getScheme() {
				return new createOne_resultTupleScheme();
			}
		}

		private static class createOne_resultTupleScheme extends
				TupleScheme<createOne_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					createOne_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeI32(struct.success);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot,
					createOne_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = iprot.readI32();
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class updateOne_args implements
			org.apache.thrift.TBase<updateOne_args, updateOne_args._Fields>,
			java.io.Serializable, Cloneable {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"updateOne_args");

		private static final org.apache.thrift.protocol.TField INFO_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"info", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new updateOne_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new updateOne_argsTupleSchemeFactory());
		}

		public TMatchInfo info; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			INFO((short) 1, "info");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // INFO
					return INFO;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			@Override
			public short getThriftFieldId() {
				return _thriftId;
			}

			@Override
			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.INFO,
					new org.apache.thrift.meta_data.FieldMetaData("info",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(
									org.apache.thrift.protocol.TType.STRUCT,
									TMatchInfo.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					updateOne_args.class, metaDataMap);
		}

		public updateOne_args() {
		}

		public updateOne_args(TMatchInfo info) {
			this();
			this.info = info;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public updateOne_args(updateOne_args other) {
			if (other.isSetInfo()) {
				this.info = new TMatchInfo(other.info);
			}
		}

		@Override
		public updateOne_args deepCopy() {
			return new updateOne_args(this);
		}

		@Override
		public void clear() {
			this.info = null;
		}

		public TMatchInfo getInfo() {
			return this.info;
		}

		public updateOne_args setInfo(TMatchInfo info) {
			this.info = info;
			return this;
		}

		public void unsetInfo() {
			this.info = null;
		}

		/**
		 * Returns true if field info is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetInfo() {
			return this.info != null;
		}

		public void setInfoIsSet(boolean value) {
			if (!value) {
				this.info = null;
			}
		}

		@Override
		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case INFO:
				if (value == null) {
					unsetInfo();
				} else {
					setInfo((TMatchInfo) value);
				}
				break;

			}
		}

		@Override
		public Object getFieldValue(_Fields field) {
			switch (field) {
			case INFO:
				return getInfo();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		@Override
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case INFO:
				return isSetInfo();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof updateOne_args)
				return this.equals((updateOne_args) that);
			return false;
		}

		public boolean equals(updateOne_args that) {
			if (that == null)
				return false;

			boolean this_present_info = true && this.isSetInfo();
			boolean that_present_info = true && that.isSetInfo();
			if (this_present_info || that_present_info) {
				if (!(this_present_info && that_present_info))
					return false;
				if (!this.info.equals(that.info))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			return 0;
		}

		@Override
		public int compareTo(updateOne_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;
			updateOne_args typedOther = other;

			lastComparison = Boolean.valueOf(isSetInfo()).compareTo(
					typedOther.isSetInfo());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetInfo()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.info, typedOther.info);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@Override
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		@Override
		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("updateOne_args(");
			sb.append("info:");
			if (this.info == null) {
				sb.append("null");
			} else {
				sb.append(this.info);
			}
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class updateOne_argsStandardSchemeFactory implements
				SchemeFactory {
			@Override
			public updateOne_argsStandardScheme getScheme() {
				return new updateOne_argsStandardScheme();
			}
		}

		private static class updateOne_argsStandardScheme extends
				StandardScheme<updateOne_args> {

			@Override
			public void read(org.apache.thrift.protocol.TProtocol iprot,
					updateOne_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // INFO
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.info = new TMatchInfo();
							struct.info.read(iprot);
							struct.setInfoIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			@Override
			public void write(org.apache.thrift.protocol.TProtocol oprot,
					updateOne_args struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.info != null) {
					oprot.writeFieldBegin(INFO_FIELD_DESC);
					struct.info.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class updateOne_argsTupleSchemeFactory implements
				SchemeFactory {
			@Override
			public updateOne_argsTupleScheme getScheme() {
				return new updateOne_argsTupleScheme();
			}
		}

		private static class updateOne_argsTupleScheme extends
				TupleScheme<updateOne_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					updateOne_args struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetInfo()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetInfo()) {
					struct.info.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot,
					updateOne_args struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.info = new TMatchInfo();
					struct.info.read(iprot);
					struct.setInfoIsSet(true);
				}
			}
		}

	}

	public static class updateOne_result
			implements
			org.apache.thrift.TBase<updateOne_result, updateOne_result._Fields>,
			java.io.Serializable, Cloneable {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"updateOne_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.BOOL, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new updateOne_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new updateOne_resultTupleSchemeFactory());
		}

		public boolean success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			@Override
			public short getThriftFieldId() {
				return _thriftId;
			}

			@Override
			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __SUCCESS_ISSET_ID = 0;
		private BitSet __isset_bit_vector = new BitSet(1);
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.BOOL)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					updateOne_result.class, metaDataMap);
		}

		public updateOne_result() {
		}

		public updateOne_result(boolean success) {
			this();
			this.success = success;
			setSuccessIsSet(true);
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public updateOne_result(updateOne_result other) {
			__isset_bit_vector.clear();
			__isset_bit_vector.or(other.__isset_bit_vector);
			this.success = other.success;
		}

		@Override
		public updateOne_result deepCopy() {
			return new updateOne_result(this);
		}

		@Override
		public void clear() {
			setSuccessIsSet(false);
			this.success = false;
		}

		public boolean isSuccess() {
			return this.success;
		}

		public updateOne_result setSuccess(boolean success) {
			this.success = success;
			setSuccessIsSet(true);
			return this;
		}

		public void unsetSuccess() {
			__isset_bit_vector.clear(__SUCCESS_ISSET_ID);
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
		}

		public void setSuccessIsSet(boolean value) {
			__isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
		}

		@Override
		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Boolean) value);
				}
				break;

			}
		}

		@Override
		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return Boolean.valueOf(isSuccess());

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		@Override
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof updateOne_result)
				return this.equals((updateOne_result) that);
			return false;
		}

		public boolean equals(updateOne_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true;
			boolean that_present_success = true;
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (this.success != that.success)
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			return 0;
		}

		@Override
		public int compareTo(updateOne_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;
			updateOne_result typedOther = other;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
					typedOther.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.success, typedOther.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@Override
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		@Override
		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("updateOne_result(");
			sb.append("success:");
			sb.append(this.success);
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class updateOne_resultStandardSchemeFactory implements
				SchemeFactory {
			@Override
			public updateOne_resultStandardScheme getScheme() {
				return new updateOne_resultStandardScheme();
			}
		}

		private static class updateOne_resultStandardScheme extends
				StandardScheme<updateOne_result> {

			@Override
			public void read(org.apache.thrift.protocol.TProtocol iprot,
					updateOne_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
							struct.success = iprot.readBool();
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			@Override
			public void write(org.apache.thrift.protocol.TProtocol oprot,
					updateOne_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
				oprot.writeBool(struct.success);
				oprot.writeFieldEnd();
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class updateOne_resultTupleSchemeFactory implements
				SchemeFactory {
			@Override
			public updateOne_resultTupleScheme getScheme() {
				return new updateOne_resultTupleScheme();
			}
		}

		private static class updateOne_resultTupleScheme extends
				TupleScheme<updateOne_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					updateOne_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeBool(struct.success);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot,
					updateOne_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = iprot.readBool();
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class deleteOne_args implements
			org.apache.thrift.TBase<deleteOne_args, deleteOne_args._Fields>,
			java.io.Serializable, Cloneable {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"deleteOne_args");

		private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"id", org.apache.thrift.protocol.TType.I32, (short) 1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new deleteOne_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new deleteOne_argsTupleSchemeFactory());
		}

		public int id; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			ID((short) 1, "id");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // ID
					return ID;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			@Override
			public short getThriftFieldId() {
				return _thriftId;
			}

			@Override
			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __ID_ISSET_ID = 0;
		private BitSet __isset_bit_vector = new BitSet(1);
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.ID,
					new org.apache.thrift.meta_data.FieldMetaData("id",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.I32)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					deleteOne_args.class, metaDataMap);
		}

		public deleteOne_args() {
		}

		public deleteOne_args(int id) {
			this();
			this.id = id;
			setIdIsSet(true);
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public deleteOne_args(deleteOne_args other) {
			__isset_bit_vector.clear();
			__isset_bit_vector.or(other.__isset_bit_vector);
			this.id = other.id;
		}

		@Override
		public deleteOne_args deepCopy() {
			return new deleteOne_args(this);
		}

		@Override
		public void clear() {
			setIdIsSet(false);
			this.id = 0;
		}

		public int getId() {
			return this.id;
		}

		public deleteOne_args setId(int id) {
			this.id = id;
			setIdIsSet(true);
			return this;
		}

		public void unsetId() {
			__isset_bit_vector.clear(__ID_ISSET_ID);
		}

		/**
		 * Returns true if field id is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetId() {
			return __isset_bit_vector.get(__ID_ISSET_ID);
		}

		public void setIdIsSet(boolean value) {
			__isset_bit_vector.set(__ID_ISSET_ID, value);
		}

		@Override
		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case ID:
				if (value == null) {
					unsetId();
				} else {
					setId((Integer) value);
				}
				break;

			}
		}

		@Override
		public Object getFieldValue(_Fields field) {
			switch (field) {
			case ID:
				return Integer.valueOf(getId());

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		@Override
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case ID:
				return isSetId();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof deleteOne_args)
				return this.equals((deleteOne_args) that);
			return false;
		}

		public boolean equals(deleteOne_args that) {
			if (that == null)
				return false;

			boolean this_present_id = true;
			boolean that_present_id = true;
			if (this_present_id || that_present_id) {
				if (!(this_present_id && that_present_id))
					return false;
				if (this.id != that.id)
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			return 0;
		}

		@Override
		public int compareTo(deleteOne_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;
			deleteOne_args typedOther = other;

			lastComparison = Boolean.valueOf(isSetId()).compareTo(
					typedOther.isSetId());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetId()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.id, typedOther.id);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@Override
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		@Override
		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("deleteOne_args(");
			sb.append("id:");
			sb.append(this.id);
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java
				// serialization is wacky, and doesn't call the default
				// constructor.
				__isset_bit_vector = new BitSet(1);
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class deleteOne_argsStandardSchemeFactory implements
				SchemeFactory {
			@Override
			public deleteOne_argsStandardScheme getScheme() {
				return new deleteOne_argsStandardScheme();
			}
		}

		private static class deleteOne_argsStandardScheme extends
				StandardScheme<deleteOne_args> {

			@Override
			public void read(org.apache.thrift.protocol.TProtocol iprot,
					deleteOne_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // ID
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.id = iprot.readI32();
							struct.setIdIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			@Override
			public void write(org.apache.thrift.protocol.TProtocol oprot,
					deleteOne_args struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldBegin(ID_FIELD_DESC);
				oprot.writeI32(struct.id);
				oprot.writeFieldEnd();
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class deleteOne_argsTupleSchemeFactory implements
				SchemeFactory {
			@Override
			public deleteOne_argsTupleScheme getScheme() {
				return new deleteOne_argsTupleScheme();
			}
		}

		private static class deleteOne_argsTupleScheme extends
				TupleScheme<deleteOne_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					deleteOne_args struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetId()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetId()) {
					oprot.writeI32(struct.id);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot,
					deleteOne_args struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.id = iprot.readI32();
					struct.setIdIsSet(true);
				}
			}
		}

	}

	public static class deleteOne_result
			implements
			org.apache.thrift.TBase<deleteOne_result, deleteOne_result._Fields>,
			java.io.Serializable, Cloneable {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"deleteOne_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.BOOL, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new deleteOne_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new deleteOne_resultTupleSchemeFactory());
		}

		public boolean success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			@Override
			public short getThriftFieldId() {
				return _thriftId;
			}

			@Override
			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __SUCCESS_ISSET_ID = 0;
		private BitSet __isset_bit_vector = new BitSet(1);
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.BOOL)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					deleteOne_result.class, metaDataMap);
		}

		public deleteOne_result() {
		}

		public deleteOne_result(boolean success) {
			this();
			this.success = success;
			setSuccessIsSet(true);
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public deleteOne_result(deleteOne_result other) {
			__isset_bit_vector.clear();
			__isset_bit_vector.or(other.__isset_bit_vector);
			this.success = other.success;
		}

		@Override
		public deleteOne_result deepCopy() {
			return new deleteOne_result(this);
		}

		@Override
		public void clear() {
			setSuccessIsSet(false);
			this.success = false;
		}

		public boolean isSuccess() {
			return this.success;
		}

		public deleteOne_result setSuccess(boolean success) {
			this.success = success;
			setSuccessIsSet(true);
			return this;
		}

		public void unsetSuccess() {
			__isset_bit_vector.clear(__SUCCESS_ISSET_ID);
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
		}

		public void setSuccessIsSet(boolean value) {
			__isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
		}

		@Override
		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Boolean) value);
				}
				break;

			}
		}

		@Override
		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return Boolean.valueOf(isSuccess());

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		@Override
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof deleteOne_result)
				return this.equals((deleteOne_result) that);
			return false;
		}

		public boolean equals(deleteOne_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true;
			boolean that_present_success = true;
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (this.success != that.success)
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			return 0;
		}

		@Override
		public int compareTo(deleteOne_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;
			deleteOne_result typedOther = other;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
					typedOther.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.success, typedOther.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@Override
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		@Override
		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("deleteOne_result(");
			sb.append("success:");
			sb.append(this.success);
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class deleteOne_resultStandardSchemeFactory implements
				SchemeFactory {
			@Override
			public deleteOne_resultStandardScheme getScheme() {
				return new deleteOne_resultStandardScheme();
			}
		}

		private static class deleteOne_resultStandardScheme extends
				StandardScheme<deleteOne_result> {

			@Override
			public void read(org.apache.thrift.protocol.TProtocol iprot,
					deleteOne_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
							struct.success = iprot.readBool();
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			@Override
			public void write(org.apache.thrift.protocol.TProtocol oprot,
					deleteOne_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
				oprot.writeBool(struct.success);
				oprot.writeFieldEnd();
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class deleteOne_resultTupleSchemeFactory implements
				SchemeFactory {
			@Override
			public deleteOne_resultTupleScheme getScheme() {
				return new deleteOne_resultTupleScheme();
			}
		}

		private static class deleteOne_resultTupleScheme extends
				TupleScheme<deleteOne_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					deleteOne_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeBool(struct.success);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot,
					deleteOne_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = iprot.readBool();
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class getOne_args implements
			org.apache.thrift.TBase<getOne_args, getOne_args._Fields>,
			java.io.Serializable, Cloneable {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getOne_args");

		private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"id", org.apache.thrift.protocol.TType.I32, (short) 1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new getOne_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new getOne_argsTupleSchemeFactory());
		}

		public int id; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			ID((short) 1, "id");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // ID
					return ID;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			@Override
			public short getThriftFieldId() {
				return _thriftId;
			}

			@Override
			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __ID_ISSET_ID = 0;
		private BitSet __isset_bit_vector = new BitSet(1);
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.ID,
					new org.apache.thrift.meta_data.FieldMetaData("id",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.I32)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					getOne_args.class, metaDataMap);
		}

		public getOne_args() {
		}

		public getOne_args(int id) {
			this();
			this.id = id;
			setIdIsSet(true);
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getOne_args(getOne_args other) {
			__isset_bit_vector.clear();
			__isset_bit_vector.or(other.__isset_bit_vector);
			this.id = other.id;
		}

		@Override
		public getOne_args deepCopy() {
			return new getOne_args(this);
		}

		@Override
		public void clear() {
			setIdIsSet(false);
			this.id = 0;
		}

		public int getId() {
			return this.id;
		}

		public getOne_args setId(int id) {
			this.id = id;
			setIdIsSet(true);
			return this;
		}

		public void unsetId() {
			__isset_bit_vector.clear(__ID_ISSET_ID);
		}

		/**
		 * Returns true if field id is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetId() {
			return __isset_bit_vector.get(__ID_ISSET_ID);
		}

		public void setIdIsSet(boolean value) {
			__isset_bit_vector.set(__ID_ISSET_ID, value);
		}

		@Override
		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case ID:
				if (value == null) {
					unsetId();
				} else {
					setId((Integer) value);
				}
				break;

			}
		}

		@Override
		public Object getFieldValue(_Fields field) {
			switch (field) {
			case ID:
				return Integer.valueOf(getId());

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		@Override
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case ID:
				return isSetId();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof getOne_args)
				return this.equals((getOne_args) that);
			return false;
		}

		public boolean equals(getOne_args that) {
			if (that == null)
				return false;

			boolean this_present_id = true;
			boolean that_present_id = true;
			if (this_present_id || that_present_id) {
				if (!(this_present_id && that_present_id))
					return false;
				if (this.id != that.id)
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			return 0;
		}

		@Override
		public int compareTo(getOne_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;
			getOne_args typedOther = other;

			lastComparison = Boolean.valueOf(isSetId()).compareTo(
					typedOther.isSetId());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetId()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.id, typedOther.id);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@Override
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		@Override
		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("getOne_args(");
			sb.append("id:");
			sb.append(this.id);
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java
				// serialization is wacky, and doesn't call the default
				// constructor.
				__isset_bit_vector = new BitSet(1);
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getOne_argsStandardSchemeFactory implements
				SchemeFactory {
			@Override
			public getOne_argsStandardScheme getScheme() {
				return new getOne_argsStandardScheme();
			}
		}

		private static class getOne_argsStandardScheme extends
				StandardScheme<getOne_args> {

			@Override
			public void read(org.apache.thrift.protocol.TProtocol iprot,
					getOne_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // ID
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.id = iprot.readI32();
							struct.setIdIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			@Override
			public void write(org.apache.thrift.protocol.TProtocol oprot,
					getOne_args struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldBegin(ID_FIELD_DESC);
				oprot.writeI32(struct.id);
				oprot.writeFieldEnd();
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getOne_argsTupleSchemeFactory implements
				SchemeFactory {
			@Override
			public getOne_argsTupleScheme getScheme() {
				return new getOne_argsTupleScheme();
			}
		}

		private static class getOne_argsTupleScheme extends
				TupleScheme<getOne_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					getOne_args struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetId()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetId()) {
					oprot.writeI32(struct.id);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot,
					getOne_args struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.id = iprot.readI32();
					struct.setIdIsSet(true);
				}
			}
		}

	}

	public static class getOne_result implements
			org.apache.thrift.TBase<getOne_result, getOne_result._Fields>,
			java.io.Serializable, Cloneable {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getOne_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new getOne_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new getOne_resultTupleSchemeFactory());
		}

		public TMatchInfo success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			@Override
			public short getThriftFieldId() {
				return _thriftId;
			}

			@Override
			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(
									org.apache.thrift.protocol.TType.STRUCT,
									TMatchInfo.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					getOne_result.class, metaDataMap);
		}

		public getOne_result() {
		}

		public getOne_result(TMatchInfo success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getOne_result(getOne_result other) {
			if (other.isSetSuccess()) {
				this.success = new TMatchInfo(other.success);
			}
		}

		@Override
		public getOne_result deepCopy() {
			return new getOne_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public TMatchInfo getSuccess() {
			return this.success;
		}

		public getOne_result setSuccess(TMatchInfo success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@Override
		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((TMatchInfo) value);
				}
				break;

			}
		}

		@Override
		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		@Override
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof getOne_result)
				return this.equals((getOne_result) that);
			return false;
		}

		public boolean equals(getOne_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			return 0;
		}

		@Override
		public int compareTo(getOne_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;
			getOne_result typedOther = other;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
					typedOther.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.success, typedOther.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@Override
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		@Override
		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("getOne_result(");
			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getOne_resultStandardSchemeFactory implements
				SchemeFactory {
			@Override
			public getOne_resultStandardScheme getScheme() {
				return new getOne_resultStandardScheme();
			}
		}

		private static class getOne_resultStandardScheme extends
				StandardScheme<getOne_result> {

			@Override
			public void read(org.apache.thrift.protocol.TProtocol iprot,
					getOne_result struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new TMatchInfo();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			@Override
			public void write(org.apache.thrift.protocol.TProtocol oprot,
					getOne_result struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getOne_resultTupleSchemeFactory implements
				SchemeFactory {
			@Override
			public getOne_resultTupleScheme getScheme() {
				return new getOne_resultTupleScheme();
			}
		}

		private static class getOne_resultTupleScheme extends
				TupleScheme<getOne_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					getOne_result struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot,
					getOne_result struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new TMatchInfo();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class match_args implements
			org.apache.thrift.TBase<match_args, match_args._Fields>,
			java.io.Serializable, Cloneable {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"match_args");

		private static final org.apache.thrift.protocol.TField GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"groupId", org.apache.thrift.protocol.TType.STRING, (short) 1);
		private static final org.apache.thrift.protocol.TField V_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"v", org.apache.thrift.protocol.TType.STRING, (short) 2);
		private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"type", org.apache.thrift.protocol.TType.STRING, (short) 3);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new match_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new match_argsTupleSchemeFactory());
		}

		public String groupId; // required
		public String v; // required
		public String type; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			GROUP_ID((short) 1, "groupId"), V((short) 2, "v"), TYPE((short) 3,
					"type");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // GROUP_ID
					return GROUP_ID;
				case 2: // V
					return V;
				case 3: // TYPE
					return TYPE;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			@Override
			public short getThriftFieldId() {
				return _thriftId;
			}

			@Override
			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.GROUP_ID,
					new org.apache.thrift.meta_data.FieldMetaData("groupId",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.V,
					new org.apache.thrift.meta_data.FieldMetaData("v",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.TYPE,
					new org.apache.thrift.meta_data.FieldMetaData("type",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					match_args.class, metaDataMap);
		}

		public match_args() {
		}

		public match_args(String groupId, String v, String type) {
			this();
			this.groupId = groupId;
			this.v = v;
			this.type = type;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public match_args(match_args other) {
			if (other.isSetGroupId()) {
				this.groupId = other.groupId;
			}
			if (other.isSetV()) {
				this.v = other.v;
			}
			if (other.isSetType()) {
				this.type = other.type;
			}
		}

		@Override
		public match_args deepCopy() {
			return new match_args(this);
		}

		@Override
		public void clear() {
			this.groupId = null;
			this.v = null;
			this.type = null;
		}

		public String getGroupId() {
			return this.groupId;
		}

		public match_args setGroupId(String groupId) {
			this.groupId = groupId;
			return this;
		}

		public void unsetGroupId() {
			this.groupId = null;
		}

		/**
		 * Returns true if field groupId is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetGroupId() {
			return this.groupId != null;
		}

		public void setGroupIdIsSet(boolean value) {
			if (!value) {
				this.groupId = null;
			}
		}

		public String getV() {
			return this.v;
		}

		public match_args setV(String v) {
			this.v = v;
			return this;
		}

		public void unsetV() {
			this.v = null;
		}

		/**
		 * Returns true if field v is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetV() {
			return this.v != null;
		}

		public void setVIsSet(boolean value) {
			if (!value) {
				this.v = null;
			}
		}

		public String getType() {
			return this.type;
		}

		public match_args setType(String type) {
			this.type = type;
			return this;
		}

		public void unsetType() {
			this.type = null;
		}

		/**
		 * Returns true if field type is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetType() {
			return this.type != null;
		}

		public void setTypeIsSet(boolean value) {
			if (!value) {
				this.type = null;
			}
		}

		@Override
		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case GROUP_ID:
				if (value == null) {
					unsetGroupId();
				} else {
					setGroupId((String) value);
				}
				break;

			case V:
				if (value == null) {
					unsetV();
				} else {
					setV((String) value);
				}
				break;

			case TYPE:
				if (value == null) {
					unsetType();
				} else {
					setType((String) value);
				}
				break;

			}
		}

		@Override
		public Object getFieldValue(_Fields field) {
			switch (field) {
			case GROUP_ID:
				return getGroupId();

			case V:
				return getV();

			case TYPE:
				return getType();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		@Override
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case GROUP_ID:
				return isSetGroupId();
			case V:
				return isSetV();
			case TYPE:
				return isSetType();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof match_args)
				return this.equals((match_args) that);
			return false;
		}

		public boolean equals(match_args that) {
			if (that == null)
				return false;

			boolean this_present_groupId = true && this.isSetGroupId();
			boolean that_present_groupId = true && that.isSetGroupId();
			if (this_present_groupId || that_present_groupId) {
				if (!(this_present_groupId && that_present_groupId))
					return false;
				if (!this.groupId.equals(that.groupId))
					return false;
			}

			boolean this_present_v = true && this.isSetV();
			boolean that_present_v = true && that.isSetV();
			if (this_present_v || that_present_v) {
				if (!(this_present_v && that_present_v))
					return false;
				if (!this.v.equals(that.v))
					return false;
			}

			boolean this_present_type = true && this.isSetType();
			boolean that_present_type = true && that.isSetType();
			if (this_present_type || that_present_type) {
				if (!(this_present_type && that_present_type))
					return false;
				if (!this.type.equals(that.type))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			return 0;
		}

		@Override
		public int compareTo(match_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;
			match_args typedOther = other;

			lastComparison = Boolean.valueOf(isSetGroupId()).compareTo(
					typedOther.isSetGroupId());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetGroupId()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.groupId, typedOther.groupId);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetV()).compareTo(
					typedOther.isSetV());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetV()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.v, typedOther.v);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetType()).compareTo(
					typedOther.isSetType());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetType()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.type, typedOther.type);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@Override
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		@Override
		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("match_args(");
			boolean first = true;

			sb.append("groupId:");
			if (this.groupId == null) {
				sb.append("null");
			} else {
				sb.append(this.groupId);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("v:");
			if (this.v == null) {
				sb.append("null");
			} else {
				sb.append(this.v);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("type:");
			if (this.type == null) {
				sb.append("null");
			} else {
				sb.append(this.type);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class match_argsStandardSchemeFactory implements
				SchemeFactory {
			@Override
			public match_argsStandardScheme getScheme() {
				return new match_argsStandardScheme();
			}
		}

		private static class match_argsStandardScheme extends
				StandardScheme<match_args> {

			@Override
			public void read(org.apache.thrift.protocol.TProtocol iprot,
					match_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // GROUP_ID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.groupId = iprot.readString();
							struct.setGroupIdIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 2: // V
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.v = iprot.readString();
							struct.setVIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 3: // TYPE
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.type = iprot.readString();
							struct.setTypeIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			@Override
			public void write(org.apache.thrift.protocol.TProtocol oprot,
					match_args struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.groupId != null) {
					oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
					oprot.writeString(struct.groupId);
					oprot.writeFieldEnd();
				}
				if (struct.v != null) {
					oprot.writeFieldBegin(V_FIELD_DESC);
					oprot.writeString(struct.v);
					oprot.writeFieldEnd();
				}
				if (struct.type != null) {
					oprot.writeFieldBegin(TYPE_FIELD_DESC);
					oprot.writeString(struct.type);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class match_argsTupleSchemeFactory implements
				SchemeFactory {
			@Override
			public match_argsTupleScheme getScheme() {
				return new match_argsTupleScheme();
			}
		}

		private static class match_argsTupleScheme extends
				TupleScheme<match_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					match_args struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetGroupId()) {
					optionals.set(0);
				}
				if (struct.isSetV()) {
					optionals.set(1);
				}
				if (struct.isSetType()) {
					optionals.set(2);
				}
				oprot.writeBitSet(optionals, 3);
				if (struct.isSetGroupId()) {
					oprot.writeString(struct.groupId);
				}
				if (struct.isSetV()) {
					oprot.writeString(struct.v);
				}
				if (struct.isSetType()) {
					oprot.writeString(struct.type);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot,
					match_args struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(3);
				if (incoming.get(0)) {
					struct.groupId = iprot.readString();
					struct.setGroupIdIsSet(true);
				}
				if (incoming.get(1)) {
					struct.v = iprot.readString();
					struct.setVIsSet(true);
				}
				if (incoming.get(2)) {
					struct.type = iprot.readString();
					struct.setTypeIsSet(true);
				}
			}
		}

	}

	public static class match_result implements
			org.apache.thrift.TBase<match_result, match_result._Fields>,
			java.io.Serializable, Cloneable {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"match_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.BOOL, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new match_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new match_resultTupleSchemeFactory());
		}

		public boolean success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			@Override
			public short getThriftFieldId() {
				return _thriftId;
			}

			@Override
			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __SUCCESS_ISSET_ID = 0;
		private BitSet __isset_bit_vector = new BitSet(1);
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.BOOL)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					match_result.class, metaDataMap);
		}

		public match_result() {
		}

		public match_result(boolean success) {
			this();
			this.success = success;
			setSuccessIsSet(true);
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public match_result(match_result other) {
			__isset_bit_vector.clear();
			__isset_bit_vector.or(other.__isset_bit_vector);
			this.success = other.success;
		}

		@Override
		public match_result deepCopy() {
			return new match_result(this);
		}

		@Override
		public void clear() {
			setSuccessIsSet(false);
			this.success = false;
		}

		public boolean isSuccess() {
			return this.success;
		}

		public match_result setSuccess(boolean success) {
			this.success = success;
			setSuccessIsSet(true);
			return this;
		}

		public void unsetSuccess() {
			__isset_bit_vector.clear(__SUCCESS_ISSET_ID);
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
		}

		public void setSuccessIsSet(boolean value) {
			__isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
		}

		@Override
		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Boolean) value);
				}
				break;

			}
		}

		@Override
		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return Boolean.valueOf(isSuccess());

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		@Override
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof match_result)
				return this.equals((match_result) that);
			return false;
		}

		public boolean equals(match_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true;
			boolean that_present_success = true;
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (this.success != that.success)
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			return 0;
		}

		@Override
		public int compareTo(match_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;
			match_result typedOther = other;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
					typedOther.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.success, typedOther.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@Override
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		@Override
		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("match_result(");
			sb.append("success:");
			sb.append(this.success);
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class match_resultStandardSchemeFactory implements
				SchemeFactory {
			@Override
			public match_resultStandardScheme getScheme() {
				return new match_resultStandardScheme();
			}
		}

		private static class match_resultStandardScheme extends
				StandardScheme<match_result> {

			@Override
			public void read(org.apache.thrift.protocol.TProtocol iprot,
					match_result struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
							struct.success = iprot.readBool();
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			@Override
			public void write(org.apache.thrift.protocol.TProtocol oprot,
					match_result struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
				oprot.writeBool(struct.success);
				oprot.writeFieldEnd();
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class match_resultTupleSchemeFactory implements
				SchemeFactory {
			@Override
			public match_resultTupleScheme getScheme() {
				return new match_resultTupleScheme();
			}
		}

		private static class match_resultTupleScheme extends
				TupleScheme<match_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					match_result struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeBool(struct.success);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot,
					match_result struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = iprot.readBool();
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class listGroupId_args
			implements
			org.apache.thrift.TBase<listGroupId_args, listGroupId_args._Fields>,
			java.io.Serializable, Cloneable {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"listGroupId_args");

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new listGroupId_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new listGroupId_argsTupleSchemeFactory());
		}

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			;

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			@Override
			public short getThriftFieldId() {
				return _thriftId;
			}

			@Override
			public String getFieldName() {
				return _fieldName;
			}
		}

		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					listGroupId_args.class, metaDataMap);
		}

		public listGroupId_args() {
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public listGroupId_args(listGroupId_args other) {
		}

		@Override
		public listGroupId_args deepCopy() {
			return new listGroupId_args(this);
		}

		@Override
		public void clear() {
		}

		@Override
		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			}
		}

		@Override
		public Object getFieldValue(_Fields field) {
			switch (field) {
			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		@Override
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof listGroupId_args)
				return this.equals((listGroupId_args) that);
			return false;
		}

		public boolean equals(listGroupId_args that) {
			if (that == null)
				return false;

			return true;
		}

		@Override
		public int hashCode() {
			return 0;
		}

		@Override
		public int compareTo(listGroupId_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			return 0;
		}

		@Override
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		@Override
		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("listGroupId_args(");
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class listGroupId_argsStandardSchemeFactory implements
				SchemeFactory {
			@Override
			public listGroupId_argsStandardScheme getScheme() {
				return new listGroupId_argsStandardScheme();
			}
		}

		private static class listGroupId_argsStandardScheme extends
				StandardScheme<listGroupId_args> {

			@Override
			public void read(org.apache.thrift.protocol.TProtocol iprot,
					listGroupId_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			@Override
			public void write(org.apache.thrift.protocol.TProtocol oprot,
					listGroupId_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class listGroupId_argsTupleSchemeFactory implements
				SchemeFactory {
			@Override
			public listGroupId_argsTupleScheme getScheme() {
				return new listGroupId_argsTupleScheme();
			}
		}

		private static class listGroupId_argsTupleScheme extends
				TupleScheme<listGroupId_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					listGroupId_args struct)
					throws org.apache.thrift.TException {
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot,
					listGroupId_args struct)
					throws org.apache.thrift.TException {
			}
		}

	}

	public static class listGroupId_result
			implements
			org.apache.thrift.TBase<listGroupId_result, listGroupId_result._Fields>,
			java.io.Serializable, Cloneable {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"listGroupId_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.LIST, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new listGroupId_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new listGroupId_resultTupleSchemeFactory());
		}

		public List<String> success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			@Override
			public short getThriftFieldId() {
				return _thriftId;
			}

			@Override
			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(
					_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData(
							"success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.ListMetaData(
									org.apache.thrift.protocol.TType.LIST,
									new org.apache.thrift.meta_data.FieldValueMetaData(
											org.apache.thrift.protocol.TType.STRING))));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					listGroupId_result.class, metaDataMap);
		}

		public listGroupId_result() {
		}

		public listGroupId_result(List<String> success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public listGroupId_result(listGroupId_result other) {
			if (other.isSetSuccess()) {
				List<String> __this__success = new ArrayList<String>();
				for (String other_element : other.success) {
					__this__success.add(other_element);
				}
				this.success = __this__success;
			}
		}

		@Override
		public listGroupId_result deepCopy() {
			return new listGroupId_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public int getSuccessSize() {
			return (this.success == null) ? 0 : this.success.size();
		}

		public java.util.Iterator<String> getSuccessIterator() {
			return (this.success == null) ? null : this.success.iterator();
		}

		public void addToSuccess(String elem) {
			if (this.success == null) {
				this.success = new ArrayList<String>();
			}
			this.success.add(elem);
		}

		public List<String> getSuccess() {
			return this.success;
		}

		public listGroupId_result setSuccess(List<String> success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@Override
		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((List<String>) value);
				}
				break;

			}
		}

		@Override
		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		@Override
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof listGroupId_result)
				return this.equals((listGroupId_result) that);
			return false;
		}

		public boolean equals(listGroupId_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			return 0;
		}

		@Override
		public int compareTo(listGroupId_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;
			listGroupId_result typedOther = other;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
					typedOther.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.success, typedOther.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@Override
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		@Override
		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("listGroupId_result(");
			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class listGroupId_resultStandardSchemeFactory implements
				SchemeFactory {
			@Override
			public listGroupId_resultStandardScheme getScheme() {
				return new listGroupId_resultStandardScheme();
			}
		}

		private static class listGroupId_resultStandardScheme extends
				StandardScheme<listGroupId_result> {

			@Override
			public void read(org.apache.thrift.protocol.TProtocol iprot,
					listGroupId_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
							{
								org.apache.thrift.protocol.TList _list8 = iprot
										.readListBegin();
								struct.success = new ArrayList<String>(
										_list8.size);
								for (int _i9 = 0; _i9 < _list8.size; ++_i9) {
									String _elem10; // required
									_elem10 = iprot.readString();
									struct.success.add(_elem10);
								}
								iprot.readListEnd();
							}
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			@Override
			public void write(org.apache.thrift.protocol.TProtocol oprot,
					listGroupId_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					{
						oprot.writeListBegin(new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRING,
								struct.success.size()));
						for (String _iter11 : struct.success) {
							oprot.writeString(_iter11);
						}
						oprot.writeListEnd();
					}
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class listGroupId_resultTupleSchemeFactory implements
				SchemeFactory {
			@Override
			public listGroupId_resultTupleScheme getScheme() {
				return new listGroupId_resultTupleScheme();
			}
		}

		private static class listGroupId_resultTupleScheme extends
				TupleScheme<listGroupId_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					listGroupId_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					{
						oprot.writeI32(struct.success.size());
						for (String _iter12 : struct.success) {
							oprot.writeString(_iter12);
						}
					}
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot,
					listGroupId_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					{
						org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRING,
								iprot.readI32());
						struct.success = new ArrayList<String>(_list13.size);
						for (int _i14 = 0; _i14 < _list13.size; ++_i14) {
							String _elem15; // required
							_elem15 = iprot.readString();
							struct.success.add(_elem15);
						}
					}
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class listGroup_args implements
			org.apache.thrift.TBase<listGroup_args, listGroup_args._Fields>,
			java.io.Serializable, Cloneable {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"listGroup_args");

		private static final org.apache.thrift.protocol.TField GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"groupId", org.apache.thrift.protocol.TType.STRING, (short) 1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new listGroup_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new listGroup_argsTupleSchemeFactory());
		}

		public String groupId; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			GROUP_ID((short) 1, "groupId");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // GROUP_ID
					return GROUP_ID;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			@Override
			public short getThriftFieldId() {
				return _thriftId;
			}

			@Override
			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.GROUP_ID,
					new org.apache.thrift.meta_data.FieldMetaData("groupId",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					listGroup_args.class, metaDataMap);
		}

		public listGroup_args() {
		}

		public listGroup_args(String groupId) {
			this();
			this.groupId = groupId;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public listGroup_args(listGroup_args other) {
			if (other.isSetGroupId()) {
				this.groupId = other.groupId;
			}
		}

		@Override
		public listGroup_args deepCopy() {
			return new listGroup_args(this);
		}

		@Override
		public void clear() {
			this.groupId = null;
		}

		public String getGroupId() {
			return this.groupId;
		}

		public listGroup_args setGroupId(String groupId) {
			this.groupId = groupId;
			return this;
		}

		public void unsetGroupId() {
			this.groupId = null;
		}

		/**
		 * Returns true if field groupId is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetGroupId() {
			return this.groupId != null;
		}

		public void setGroupIdIsSet(boolean value) {
			if (!value) {
				this.groupId = null;
			}
		}

		@Override
		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case GROUP_ID:
				if (value == null) {
					unsetGroupId();
				} else {
					setGroupId((String) value);
				}
				break;

			}
		}

		@Override
		public Object getFieldValue(_Fields field) {
			switch (field) {
			case GROUP_ID:
				return getGroupId();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		@Override
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case GROUP_ID:
				return isSetGroupId();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof listGroup_args)
				return this.equals((listGroup_args) that);
			return false;
		}

		public boolean equals(listGroup_args that) {
			if (that == null)
				return false;

			boolean this_present_groupId = true && this.isSetGroupId();
			boolean that_present_groupId = true && that.isSetGroupId();
			if (this_present_groupId || that_present_groupId) {
				if (!(this_present_groupId && that_present_groupId))
					return false;
				if (!this.groupId.equals(that.groupId))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			return 0;
		}

		@Override
		public int compareTo(listGroup_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;
			listGroup_args typedOther = other;

			lastComparison = Boolean.valueOf(isSetGroupId()).compareTo(
					typedOther.isSetGroupId());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetGroupId()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.groupId, typedOther.groupId);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@Override
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		@Override
		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("listGroup_args(");
			sb.append("groupId:");
			if (this.groupId == null) {
				sb.append("null");
			} else {
				sb.append(this.groupId);
			}
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class listGroup_argsStandardSchemeFactory implements
				SchemeFactory {
			@Override
			public listGroup_argsStandardScheme getScheme() {
				return new listGroup_argsStandardScheme();
			}
		}

		private static class listGroup_argsStandardScheme extends
				StandardScheme<listGroup_args> {

			@Override
			public void read(org.apache.thrift.protocol.TProtocol iprot,
					listGroup_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // GROUP_ID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.groupId = iprot.readString();
							struct.setGroupIdIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			@Override
			public void write(org.apache.thrift.protocol.TProtocol oprot,
					listGroup_args struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.groupId != null) {
					oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
					oprot.writeString(struct.groupId);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class listGroup_argsTupleSchemeFactory implements
				SchemeFactory {
			@Override
			public listGroup_argsTupleScheme getScheme() {
				return new listGroup_argsTupleScheme();
			}
		}

		private static class listGroup_argsTupleScheme extends
				TupleScheme<listGroup_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					listGroup_args struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetGroupId()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetGroupId()) {
					oprot.writeString(struct.groupId);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot,
					listGroup_args struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.groupId = iprot.readString();
					struct.setGroupIdIsSet(true);
				}
			}
		}

	}

	public static class listGroup_result
			implements
			org.apache.thrift.TBase<listGroup_result, listGroup_result._Fields>,
			java.io.Serializable, Cloneable {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"listGroup_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.LIST, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new listGroup_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new listGroup_resultTupleSchemeFactory());
		}

		public List<TMatchInfo> success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			@Override
			public short getThriftFieldId() {
				return _thriftId;
			}

			@Override
			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(
					_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData(
							"success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.ListMetaData(
									org.apache.thrift.protocol.TType.LIST,
									new org.apache.thrift.meta_data.StructMetaData(
											org.apache.thrift.protocol.TType.STRUCT,
											TMatchInfo.class))));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					listGroup_result.class, metaDataMap);
		}

		public listGroup_result() {
		}

		public listGroup_result(List<TMatchInfo> success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public listGroup_result(listGroup_result other) {
			if (other.isSetSuccess()) {
				List<TMatchInfo> __this__success = new ArrayList<TMatchInfo>();
				for (TMatchInfo other_element : other.success) {
					__this__success.add(new TMatchInfo(other_element));
				}
				this.success = __this__success;
			}
		}

		@Override
		public listGroup_result deepCopy() {
			return new listGroup_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public int getSuccessSize() {
			return (this.success == null) ? 0 : this.success.size();
		}

		public java.util.Iterator<TMatchInfo> getSuccessIterator() {
			return (this.success == null) ? null : this.success.iterator();
		}

		public void addToSuccess(TMatchInfo elem) {
			if (this.success == null) {
				this.success = new ArrayList<TMatchInfo>();
			}
			this.success.add(elem);
		}

		public List<TMatchInfo> getSuccess() {
			return this.success;
		}

		public listGroup_result setSuccess(List<TMatchInfo> success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@Override
		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((List<TMatchInfo>) value);
				}
				break;

			}
		}

		@Override
		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		@Override
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof listGroup_result)
				return this.equals((listGroup_result) that);
			return false;
		}

		public boolean equals(listGroup_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			return 0;
		}

		@Override
		public int compareTo(listGroup_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;
			listGroup_result typedOther = other;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
					typedOther.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.success, typedOther.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@Override
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		@Override
		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("listGroup_result(");
			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class listGroup_resultStandardSchemeFactory implements
				SchemeFactory {
			@Override
			public listGroup_resultStandardScheme getScheme() {
				return new listGroup_resultStandardScheme();
			}
		}

		private static class listGroup_resultStandardScheme extends
				StandardScheme<listGroup_result> {

			@Override
			public void read(org.apache.thrift.protocol.TProtocol iprot,
					listGroup_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
							{
								org.apache.thrift.protocol.TList _list16 = iprot
										.readListBegin();
								struct.success = new ArrayList<TMatchInfo>(
										_list16.size);
								for (int _i17 = 0; _i17 < _list16.size; ++_i17) {
									TMatchInfo _elem18; // required
									_elem18 = new TMatchInfo();
									_elem18.read(iprot);
									struct.success.add(_elem18);
								}
								iprot.readListEnd();
							}
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			@Override
			public void write(org.apache.thrift.protocol.TProtocol oprot,
					listGroup_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					{
						oprot.writeListBegin(new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRUCT,
								struct.success.size()));
						for (TMatchInfo _iter19 : struct.success) {
							_iter19.write(oprot);
						}
						oprot.writeListEnd();
					}
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class listGroup_resultTupleSchemeFactory implements
				SchemeFactory {
			@Override
			public listGroup_resultTupleScheme getScheme() {
				return new listGroup_resultTupleScheme();
			}
		}

		private static class listGroup_resultTupleScheme extends
				TupleScheme<listGroup_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					listGroup_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					{
						oprot.writeI32(struct.success.size());
						for (TMatchInfo _iter20 : struct.success) {
							_iter20.write(oprot);
						}
					}
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot,
					listGroup_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					{
						org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRUCT,
								iprot.readI32());
						struct.success = new ArrayList<TMatchInfo>(_list21.size);
						for (int _i22 = 0; _i22 < _list21.size; ++_i22) {
							TMatchInfo _elem23; // required
							_elem23 = new TMatchInfo();
							_elem23.read(iprot);
							struct.success.add(_elem23);
						}
					}
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class search_args implements
			org.apache.thrift.TBase<search_args, search_args._Fields>,
			java.io.Serializable, Cloneable {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"search_args");

		private static final org.apache.thrift.protocol.TField HSQL_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"hsql", org.apache.thrift.protocol.TType.STRING, (short) 1);
		private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"page", org.apache.thrift.protocol.TType.I32, (short) 2);
		private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"pageSize", org.apache.thrift.protocol.TType.I32, (short) 3);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new search_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new search_argsTupleSchemeFactory());
		}

		public String hsql; // required
		public int page; // required
		public int pageSize; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			HSQL((short) 1, "hsql"), PAGE((short) 2, "page"), PAGE_SIZE(
					(short) 3, "pageSize");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // HSQL
					return HSQL;
				case 2: // PAGE
					return PAGE;
				case 3: // PAGE_SIZE
					return PAGE_SIZE;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			@Override
			public short getThriftFieldId() {
				return _thriftId;
			}

			@Override
			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __PAGE_ISSET_ID = 0;
		private static final int __PAGESIZE_ISSET_ID = 1;
		private BitSet __isset_bit_vector = new BitSet(2);
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.HSQL,
					new org.apache.thrift.meta_data.FieldMetaData("hsql",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.PAGE,
					new org.apache.thrift.meta_data.FieldMetaData("page",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.I32)));
			tmpMap.put(_Fields.PAGE_SIZE,
					new org.apache.thrift.meta_data.FieldMetaData("pageSize",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.I32)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					search_args.class, metaDataMap);
		}

		public search_args() {
		}

		public search_args(String hsql, int page, int pageSize) {
			this();
			this.hsql = hsql;
			this.page = page;
			setPageIsSet(true);
			this.pageSize = pageSize;
			setPageSizeIsSet(true);
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public search_args(search_args other) {
			__isset_bit_vector.clear();
			__isset_bit_vector.or(other.__isset_bit_vector);
			if (other.isSetHsql()) {
				this.hsql = other.hsql;
			}
			this.page = other.page;
			this.pageSize = other.pageSize;
		}

		@Override
		public search_args deepCopy() {
			return new search_args(this);
		}

		@Override
		public void clear() {
			this.hsql = null;
			setPageIsSet(false);
			this.page = 0;
			setPageSizeIsSet(false);
			this.pageSize = 0;
		}

		public String getHsql() {
			return this.hsql;
		}

		public search_args setHsql(String hsql) {
			this.hsql = hsql;
			return this;
		}

		public void unsetHsql() {
			this.hsql = null;
		}

		/**
		 * Returns true if field hsql is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetHsql() {
			return this.hsql != null;
		}

		public void setHsqlIsSet(boolean value) {
			if (!value) {
				this.hsql = null;
			}
		}

		public int getPage() {
			return this.page;
		}

		public search_args setPage(int page) {
			this.page = page;
			setPageIsSet(true);
			return this;
		}

		public void unsetPage() {
			__isset_bit_vector.clear(__PAGE_ISSET_ID);
		}

		/**
		 * Returns true if field page is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetPage() {
			return __isset_bit_vector.get(__PAGE_ISSET_ID);
		}

		public void setPageIsSet(boolean value) {
			__isset_bit_vector.set(__PAGE_ISSET_ID, value);
		}

		public int getPageSize() {
			return this.pageSize;
		}

		public search_args setPageSize(int pageSize) {
			this.pageSize = pageSize;
			setPageSizeIsSet(true);
			return this;
		}

		public void unsetPageSize() {
			__isset_bit_vector.clear(__PAGESIZE_ISSET_ID);
		}

		/**
		 * Returns true if field pageSize is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetPageSize() {
			return __isset_bit_vector.get(__PAGESIZE_ISSET_ID);
		}

		public void setPageSizeIsSet(boolean value) {
			__isset_bit_vector.set(__PAGESIZE_ISSET_ID, value);
		}

		@Override
		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case HSQL:
				if (value == null) {
					unsetHsql();
				} else {
					setHsql((String) value);
				}
				break;

			case PAGE:
				if (value == null) {
					unsetPage();
				} else {
					setPage((Integer) value);
				}
				break;

			case PAGE_SIZE:
				if (value == null) {
					unsetPageSize();
				} else {
					setPageSize((Integer) value);
				}
				break;

			}
		}

		@Override
		public Object getFieldValue(_Fields field) {
			switch (field) {
			case HSQL:
				return getHsql();

			case PAGE:
				return Integer.valueOf(getPage());

			case PAGE_SIZE:
				return Integer.valueOf(getPageSize());

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		@Override
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case HSQL:
				return isSetHsql();
			case PAGE:
				return isSetPage();
			case PAGE_SIZE:
				return isSetPageSize();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof search_args)
				return this.equals((search_args) that);
			return false;
		}

		public boolean equals(search_args that) {
			if (that == null)
				return false;

			boolean this_present_hsql = true && this.isSetHsql();
			boolean that_present_hsql = true && that.isSetHsql();
			if (this_present_hsql || that_present_hsql) {
				if (!(this_present_hsql && that_present_hsql))
					return false;
				if (!this.hsql.equals(that.hsql))
					return false;
			}

			boolean this_present_page = true;
			boolean that_present_page = true;
			if (this_present_page || that_present_page) {
				if (!(this_present_page && that_present_page))
					return false;
				if (this.page != that.page)
					return false;
			}

			boolean this_present_pageSize = true;
			boolean that_present_pageSize = true;
			if (this_present_pageSize || that_present_pageSize) {
				if (!(this_present_pageSize && that_present_pageSize))
					return false;
				if (this.pageSize != that.pageSize)
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			return 0;
		}

		@Override
		public int compareTo(search_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;
			search_args typedOther = other;

			lastComparison = Boolean.valueOf(isSetHsql()).compareTo(
					typedOther.isSetHsql());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetHsql()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.hsql, typedOther.hsql);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetPage()).compareTo(
					typedOther.isSetPage());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetPage()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.page, typedOther.page);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(
					typedOther.isSetPageSize());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetPageSize()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.pageSize, typedOther.pageSize);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@Override
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		@Override
		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("search_args(");
			boolean first = true;

			sb.append("hsql:");
			if (this.hsql == null) {
				sb.append("null");
			} else {
				sb.append(this.hsql);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("page:");
			sb.append(this.page);
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("pageSize:");
			sb.append(this.pageSize);
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java
				// serialization is wacky, and doesn't call the default
				// constructor.
				__isset_bit_vector = new BitSet(1);
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class search_argsStandardSchemeFactory implements
				SchemeFactory {
			@Override
			public search_argsStandardScheme getScheme() {
				return new search_argsStandardScheme();
			}
		}

		private static class search_argsStandardScheme extends
				StandardScheme<search_args> {

			@Override
			public void read(org.apache.thrift.protocol.TProtocol iprot,
					search_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // HSQL
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.hsql = iprot.readString();
							struct.setHsqlIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 2: // PAGE
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.page = iprot.readI32();
							struct.setPageIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 3: // PAGE_SIZE
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.pageSize = iprot.readI32();
							struct.setPageSizeIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			@Override
			public void write(org.apache.thrift.protocol.TProtocol oprot,
					search_args struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.hsql != null) {
					oprot.writeFieldBegin(HSQL_FIELD_DESC);
					oprot.writeString(struct.hsql);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldBegin(PAGE_FIELD_DESC);
				oprot.writeI32(struct.page);
				oprot.writeFieldEnd();
				oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
				oprot.writeI32(struct.pageSize);
				oprot.writeFieldEnd();
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class search_argsTupleSchemeFactory implements
				SchemeFactory {
			@Override
			public search_argsTupleScheme getScheme() {
				return new search_argsTupleScheme();
			}
		}

		private static class search_argsTupleScheme extends
				TupleScheme<search_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					search_args struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetHsql()) {
					optionals.set(0);
				}
				if (struct.isSetPage()) {
					optionals.set(1);
				}
				if (struct.isSetPageSize()) {
					optionals.set(2);
				}
				oprot.writeBitSet(optionals, 3);
				if (struct.isSetHsql()) {
					oprot.writeString(struct.hsql);
				}
				if (struct.isSetPage()) {
					oprot.writeI32(struct.page);
				}
				if (struct.isSetPageSize()) {
					oprot.writeI32(struct.pageSize);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot,
					search_args struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(3);
				if (incoming.get(0)) {
					struct.hsql = iprot.readString();
					struct.setHsqlIsSet(true);
				}
				if (incoming.get(1)) {
					struct.page = iprot.readI32();
					struct.setPageIsSet(true);
				}
				if (incoming.get(2)) {
					struct.pageSize = iprot.readI32();
					struct.setPageSizeIsSet(true);
				}
			}
		}

	}

	public static class search_result implements
			org.apache.thrift.TBase<search_result, search_result._Fields>,
			java.io.Serializable, Cloneable {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"search_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new search_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new search_resultTupleSchemeFactory());
		}

		public TMatchSearchResult success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			@Override
			public short getThriftFieldId() {
				return _thriftId;
			}

			@Override
			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(
									org.apache.thrift.protocol.TType.STRUCT,
									TMatchSearchResult.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					search_result.class, metaDataMap);
		}

		public search_result() {
		}

		public search_result(TMatchSearchResult success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public search_result(search_result other) {
			if (other.isSetSuccess()) {
				this.success = new TMatchSearchResult(other.success);
			}
		}

		@Override
		public search_result deepCopy() {
			return new search_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public TMatchSearchResult getSuccess() {
			return this.success;
		}

		public search_result setSuccess(TMatchSearchResult success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@Override
		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((TMatchSearchResult) value);
				}
				break;

			}
		}

		@Override
		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		@Override
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof search_result)
				return this.equals((search_result) that);
			return false;
		}

		public boolean equals(search_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			return 0;
		}

		@Override
		public int compareTo(search_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;
			search_result typedOther = other;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
					typedOther.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.success, typedOther.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@Override
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		@Override
		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("search_result(");
			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class search_resultStandardSchemeFactory implements
				SchemeFactory {
			@Override
			public search_resultStandardScheme getScheme() {
				return new search_resultStandardScheme();
			}
		}

		private static class search_resultStandardScheme extends
				StandardScheme<search_result> {

			@Override
			public void read(org.apache.thrift.protocol.TProtocol iprot,
					search_result struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new TMatchSearchResult();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			@Override
			public void write(org.apache.thrift.protocol.TProtocol oprot,
					search_result struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class search_resultTupleSchemeFactory implements
				SchemeFactory {
			@Override
			public search_resultTupleScheme getScheme() {
				return new search_resultTupleScheme();
			}
		}

		private static class search_resultTupleScheme extends
				TupleScheme<search_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					search_result struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot,
					search_result struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new TMatchSearchResult();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

}
