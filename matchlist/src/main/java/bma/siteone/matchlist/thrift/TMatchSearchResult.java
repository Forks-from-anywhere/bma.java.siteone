/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package bma.siteone.matchlist.thrift;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

public class TMatchSearchResult
		implements
		org.apache.thrift.TBase<TMatchSearchResult, TMatchSearchResult._Fields>,
		java.io.Serializable, Cloneable {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"TMatchSearchResult");

	private static final org.apache.thrift.protocol.TField TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"total", org.apache.thrift.protocol.TType.I32, (short) 1);
	private static final org.apache.thrift.protocol.TField RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"result", org.apache.thrift.protocol.TType.LIST, (short) 2);

	private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
	static {
		schemes.put(StandardScheme.class,
				new TMatchSearchResultStandardSchemeFactory());
		schemes.put(TupleScheme.class,
				new TMatchSearchResultTupleSchemeFactory());
	}

	public int total; // required
	public List<TMatchInfo> result; // required

	/**
	 * The set of fields this struct contains, along with convenience methods
	 * for finding and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		TOTAL((short) 1, "total"), RESULT((short) 2, "result");

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not
		 * found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // TOTAL
				return TOTAL;
			case 2: // RESULT
				return RESULT;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new IllegalArgumentException("Field " + fieldId
						+ " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not
		 * found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		@Override
		public short getThriftFieldId() {
			return _thriftId;
		}

		@Override
		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	private static final int __TOTAL_ISSET_ID = 0;
	private BitSet __isset_bit_vector = new BitSet(1);
	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.TOTAL,
				new org.apache.thrift.meta_data.FieldMetaData("total",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(
								org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(
				_Fields.RESULT,
				new org.apache.thrift.meta_data.FieldMetaData(
						"result",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.ListMetaData(
								org.apache.thrift.protocol.TType.LIST,
								new org.apache.thrift.meta_data.StructMetaData(
										org.apache.thrift.protocol.TType.STRUCT,
										TMatchInfo.class))));
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
				TMatchSearchResult.class, metaDataMap);
	}

	public TMatchSearchResult() {
	}

	public TMatchSearchResult(int total, List<TMatchInfo> result) {
		this();
		this.total = total;
		setTotalIsSet(true);
		this.result = result;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public TMatchSearchResult(TMatchSearchResult other) {
		__isset_bit_vector.clear();
		__isset_bit_vector.or(other.__isset_bit_vector);
		this.total = other.total;
		if (other.isSetResult()) {
			List<TMatchInfo> __this__result = new ArrayList<TMatchInfo>();
			for (TMatchInfo other_element : other.result) {
				__this__result.add(new TMatchInfo(other_element));
			}
			this.result = __this__result;
		}
	}

	@Override
	public TMatchSearchResult deepCopy() {
		return new TMatchSearchResult(this);
	}

	@Override
	public void clear() {
		setTotalIsSet(false);
		this.total = 0;
		this.result = null;
	}

	public int getTotal() {
		return this.total;
	}

	public TMatchSearchResult setTotal(int total) {
		this.total = total;
		setTotalIsSet(true);
		return this;
	}

	public void unsetTotal() {
		__isset_bit_vector.clear(__TOTAL_ISSET_ID);
	}

	/**
	 * Returns true if field total is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetTotal() {
		return __isset_bit_vector.get(__TOTAL_ISSET_ID);
	}

	public void setTotalIsSet(boolean value) {
		__isset_bit_vector.set(__TOTAL_ISSET_ID, value);
	}

	public int getResultSize() {
		return (this.result == null) ? 0 : this.result.size();
	}

	public java.util.Iterator<TMatchInfo> getResultIterator() {
		return (this.result == null) ? null : this.result.iterator();
	}

	public void addToResult(TMatchInfo elem) {
		if (this.result == null) {
			this.result = new ArrayList<TMatchInfo>();
		}
		this.result.add(elem);
	}

	public List<TMatchInfo> getResult() {
		return this.result;
	}

	public TMatchSearchResult setResult(List<TMatchInfo> result) {
		this.result = result;
		return this;
	}

	public void unsetResult() {
		this.result = null;
	}

	/**
	 * Returns true if field result is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetResult() {
		return this.result != null;
	}

	public void setResultIsSet(boolean value) {
		if (!value) {
			this.result = null;
		}
	}

	@SuppressWarnings("unchecked")
	@Override
	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case TOTAL:
			if (value == null) {
				unsetTotal();
			} else {
				setTotal((Integer) value);
			}
			break;

		case RESULT:
			if (value == null) {
				unsetResult();
			} else {
				setResult((List<TMatchInfo>) value);
			}
			break;

		}
	}

	@Override
	public Object getFieldValue(_Fields field) {
		switch (field) {
		case TOTAL:
			return Integer.valueOf(getTotal());

		case RESULT:
			return getResult();

		}
		throw new IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned
	 * a value) and false otherwise
	 */
	@Override
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case TOTAL:
			return isSetTotal();
		case RESULT:
			return isSetResult();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof TMatchSearchResult)
			return this.equals((TMatchSearchResult) that);
		return false;
	}

	public boolean equals(TMatchSearchResult that) {
		if (that == null)
			return false;

		boolean this_present_total = true;
		boolean that_present_total = true;
		if (this_present_total || that_present_total) {
			if (!(this_present_total && that_present_total))
				return false;
			if (this.total != that.total)
				return false;
		}

		boolean this_present_result = true && this.isSetResult();
		boolean that_present_result = true && that.isSetResult();
		if (this_present_result || that_present_result) {
			if (!(this_present_result && that_present_result))
				return false;
			if (!this.result.equals(that.result))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		return 0;
	}

	@Override
	public int compareTo(TMatchSearchResult other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;
		TMatchSearchResult typedOther = other;

		lastComparison = Boolean.valueOf(isSetTotal()).compareTo(
				typedOther.isSetTotal());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetTotal()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(
					this.total, typedOther.total);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetResult()).compareTo(
				typedOther.isSetResult());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetResult()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(
					this.result, typedOther.result);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	@Override
	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	@SuppressWarnings("unchecked")
	@Override
	public void read(org.apache.thrift.protocol.TProtocol iprot)
			throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	@SuppressWarnings("unchecked")
	@Override
	public void write(org.apache.thrift.protocol.TProtocol oprot)
			throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("TMatchSearchResult(");
		boolean first = true;

		sb.append("total:");
		sb.append(this.total);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("result:");
		if (this.result == null) {
			sb.append("null");
		} else {
			sb.append(this.result);
		}
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
	}

	private void writeObject(java.io.ObjectOutputStream out)
			throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in)
			throws java.io.IOException, ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java
			// serialization is wacky, and doesn't call the default constructor.
			__isset_bit_vector = new BitSet(1);
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class TMatchSearchResultStandardSchemeFactory implements
			SchemeFactory {
		@SuppressWarnings("unchecked")
		@Override
		public TMatchSearchResultStandardScheme getScheme() {
			return new TMatchSearchResultStandardScheme();
		}
	}

	private static class TMatchSearchResultStandardScheme extends
			StandardScheme<TMatchSearchResult> {

		@Override
		public void read(org.apache.thrift.protocol.TProtocol iprot,
				TMatchSearchResult struct) throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // TOTAL
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.total = iprot.readI32();
						struct.setTotalIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					break;
				case 2: // RESULT
					if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
						{
							org.apache.thrift.protocol.TList _list0 = iprot
									.readListBegin();
							struct.result = new ArrayList<TMatchInfo>(
									_list0.size);
							for (int _i1 = 0; _i1 < _list0.size; ++_i1) {
								TMatchInfo _elem2; // required
								_elem2 = new TMatchInfo();
								_elem2.read(iprot);
								struct.result.add(_elem2);
							}
							iprot.readListEnd();
						}
						struct.setResultIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
							schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be
			// checked in the validate method
			struct.validate();
		}

		@Override
		public void write(org.apache.thrift.protocol.TProtocol oprot,
				TMatchSearchResult struct) throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			oprot.writeFieldBegin(TOTAL_FIELD_DESC);
			oprot.writeI32(struct.total);
			oprot.writeFieldEnd();
			if (struct.result != null) {
				oprot.writeFieldBegin(RESULT_FIELD_DESC);
				{
					oprot.writeListBegin(new org.apache.thrift.protocol.TList(
							org.apache.thrift.protocol.TType.STRUCT,
							struct.result.size()));
					for (TMatchInfo _iter3 : struct.result) {
						_iter3.write(oprot);
					}
					oprot.writeListEnd();
				}
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class TMatchSearchResultTupleSchemeFactory implements
			SchemeFactory {
		@SuppressWarnings("unchecked")
		@Override
		public TMatchSearchResultTupleScheme getScheme() {
			return new TMatchSearchResultTupleScheme();
		}
	}

	private static class TMatchSearchResultTupleScheme extends
			TupleScheme<TMatchSearchResult> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot,
				TMatchSearchResult struct) throws org.apache.thrift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			BitSet optionals = new BitSet();
			if (struct.isSetTotal()) {
				optionals.set(0);
			}
			if (struct.isSetResult()) {
				optionals.set(1);
			}
			oprot.writeBitSet(optionals, 2);
			if (struct.isSetTotal()) {
				oprot.writeI32(struct.total);
			}
			if (struct.isSetResult()) {
				{
					oprot.writeI32(struct.result.size());
					for (TMatchInfo _iter4 : struct.result) {
						_iter4.write(oprot);
					}
				}
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot,
				TMatchSearchResult struct) throws org.apache.thrift.TException {
			TTupleProtocol iprot = (TTupleProtocol) prot;
			BitSet incoming = iprot.readBitSet(2);
			if (incoming.get(0)) {
				struct.total = iprot.readI32();
				struct.setTotalIsSet(true);
			}
			if (incoming.get(1)) {
				{
					org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(
							org.apache.thrift.protocol.TType.STRUCT,
							iprot.readI32());
					struct.result = new ArrayList<TMatchInfo>(_list5.size);
					for (int _i6 = 0; _i6 < _list5.size; ++_i6) {
						TMatchInfo _elem7; // required
						_elem7 = new TMatchInfo();
						_elem7.read(iprot);
						struct.result.add(_elem7);
					}
				}
				struct.setResultIsSet(true);
			}
		}
	}

}
