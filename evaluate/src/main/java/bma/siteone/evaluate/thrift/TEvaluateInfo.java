/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package bma.siteone.evaluate.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TEvaluateInfo implements org.apache.thrift.TBase<TEvaluateInfo, TEvaluateInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TEvaluateInfo");

  private static final org.apache.thrift.protocol.TField GROUP_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("groupType", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("itemId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField EVA_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("evaAmount", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField OPTION1_FIELD_DESC = new org.apache.thrift.protocol.TField("option1", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField OPTION2_FIELD_DESC = new org.apache.thrift.protocol.TField("option2", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField OPTION3_FIELD_DESC = new org.apache.thrift.protocol.TField("option3", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField OPTION4_FIELD_DESC = new org.apache.thrift.protocol.TField("option4", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField OPTION5_FIELD_DESC = new org.apache.thrift.protocol.TField("option5", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField OPTION6_FIELD_DESC = new org.apache.thrift.protocol.TField("option6", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField OPTION7_FIELD_DESC = new org.apache.thrift.protocol.TField("option7", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField OPTION8_FIELD_DESC = new org.apache.thrift.protocol.TField("option8", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField OPTION9_FIELD_DESC = new org.apache.thrift.protocol.TField("option9", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField OPTION10_FIELD_DESC = new org.apache.thrift.protocol.TField("option10", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField RESERVE1_FIELD_DESC = new org.apache.thrift.protocol.TField("reserve1", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField RESERVE2_FIELD_DESC = new org.apache.thrift.protocol.TField("reserve2", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField RESERVE3_FIELD_DESC = new org.apache.thrift.protocol.TField("reserve3", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField RESERVE4_FIELD_DESC = new org.apache.thrift.protocol.TField("reserve4", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField LAST_UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastUpdateTime", org.apache.thrift.protocol.TType.STRING, (short)22);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TEvaluateInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TEvaluateInfoTupleSchemeFactory());
  }

  public String groupType; // required
  public String itemId; // required
  public String url; // optional
  public String title; // optional
  public int evaAmount; // optional
  public int option1; // optional
  public int option2; // optional
  public int option3; // optional
  public int option4; // optional
  public int option5; // optional
  public int option6; // optional
  public int option7; // optional
  public int option8; // optional
  public int option9; // optional
  public int option10; // optional
  public int status; // optional
  public int reserve1; // optional
  public int reserve2; // optional
  public String reserve3; // optional
  public String reserve4; // optional
  public String createTime; // optional
  public String lastUpdateTime; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GROUP_TYPE((short)1, "groupType"),
    ITEM_ID((short)2, "itemId"),
    URL((short)3, "url"),
    TITLE((short)4, "title"),
    EVA_AMOUNT((short)5, "evaAmount"),
    OPTION1((short)6, "option1"),
    OPTION2((short)7, "option2"),
    OPTION3((short)8, "option3"),
    OPTION4((short)9, "option4"),
    OPTION5((short)10, "option5"),
    OPTION6((short)11, "option6"),
    OPTION7((short)12, "option7"),
    OPTION8((short)13, "option8"),
    OPTION9((short)14, "option9"),
    OPTION10((short)15, "option10"),
    STATUS((short)16, "status"),
    RESERVE1((short)17, "reserve1"),
    RESERVE2((short)18, "reserve2"),
    RESERVE3((short)19, "reserve3"),
    RESERVE4((short)20, "reserve4"),
    CREATE_TIME((short)21, "createTime"),
    LAST_UPDATE_TIME((short)22, "lastUpdateTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GROUP_TYPE
          return GROUP_TYPE;
        case 2: // ITEM_ID
          return ITEM_ID;
        case 3: // URL
          return URL;
        case 4: // TITLE
          return TITLE;
        case 5: // EVA_AMOUNT
          return EVA_AMOUNT;
        case 6: // OPTION1
          return OPTION1;
        case 7: // OPTION2
          return OPTION2;
        case 8: // OPTION3
          return OPTION3;
        case 9: // OPTION4
          return OPTION4;
        case 10: // OPTION5
          return OPTION5;
        case 11: // OPTION6
          return OPTION6;
        case 12: // OPTION7
          return OPTION7;
        case 13: // OPTION8
          return OPTION8;
        case 14: // OPTION9
          return OPTION9;
        case 15: // OPTION10
          return OPTION10;
        case 16: // STATUS
          return STATUS;
        case 17: // RESERVE1
          return RESERVE1;
        case 18: // RESERVE2
          return RESERVE2;
        case 19: // RESERVE3
          return RESERVE3;
        case 20: // RESERVE4
          return RESERVE4;
        case 21: // CREATE_TIME
          return CREATE_TIME;
        case 22: // LAST_UPDATE_TIME
          return LAST_UPDATE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EVAAMOUNT_ISSET_ID = 0;
  private static final int __OPTION1_ISSET_ID = 1;
  private static final int __OPTION2_ISSET_ID = 2;
  private static final int __OPTION3_ISSET_ID = 3;
  private static final int __OPTION4_ISSET_ID = 4;
  private static final int __OPTION5_ISSET_ID = 5;
  private static final int __OPTION6_ISSET_ID = 6;
  private static final int __OPTION7_ISSET_ID = 7;
  private static final int __OPTION8_ISSET_ID = 8;
  private static final int __OPTION9_ISSET_ID = 9;
  private static final int __OPTION10_ISSET_ID = 10;
  private static final int __STATUS_ISSET_ID = 11;
  private static final int __RESERVE1_ISSET_ID = 12;
  private static final int __RESERVE2_ISSET_ID = 13;
  private BitSet __isset_bit_vector = new BitSet(14);
  private _Fields optionals[] = {_Fields.URL,_Fields.TITLE,_Fields.EVA_AMOUNT,_Fields.OPTION1,_Fields.OPTION2,_Fields.OPTION3,_Fields.OPTION4,_Fields.OPTION5,_Fields.OPTION6,_Fields.OPTION7,_Fields.OPTION8,_Fields.OPTION9,_Fields.OPTION10,_Fields.STATUS,_Fields.RESERVE1,_Fields.RESERVE2,_Fields.RESERVE3,_Fields.RESERVE4,_Fields.CREATE_TIME,_Fields.LAST_UPDATE_TIME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GROUP_TYPE, new org.apache.thrift.meta_data.FieldMetaData("groupType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("itemId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EVA_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("evaAmount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OPTION1, new org.apache.thrift.meta_data.FieldMetaData("option1", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OPTION2, new org.apache.thrift.meta_data.FieldMetaData("option2", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OPTION3, new org.apache.thrift.meta_data.FieldMetaData("option3", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OPTION4, new org.apache.thrift.meta_data.FieldMetaData("option4", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OPTION5, new org.apache.thrift.meta_data.FieldMetaData("option5", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OPTION6, new org.apache.thrift.meta_data.FieldMetaData("option6", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OPTION7, new org.apache.thrift.meta_data.FieldMetaData("option7", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OPTION8, new org.apache.thrift.meta_data.FieldMetaData("option8", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OPTION9, new org.apache.thrift.meta_data.FieldMetaData("option9", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OPTION10, new org.apache.thrift.meta_data.FieldMetaData("option10", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RESERVE1, new org.apache.thrift.meta_data.FieldMetaData("reserve1", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RESERVE2, new org.apache.thrift.meta_data.FieldMetaData("reserve2", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RESERVE3, new org.apache.thrift.meta_data.FieldMetaData("reserve3", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESERVE4, new org.apache.thrift.meta_data.FieldMetaData("reserve4", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("lastUpdateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TEvaluateInfo.class, metaDataMap);
  }

  public TEvaluateInfo() {
    this.evaAmount = -1;

    this.option1 = -1;

    this.option2 = -1;

    this.option3 = -1;

    this.option4 = -1;

    this.option5 = -1;

    this.option6 = -1;

    this.option7 = -1;

    this.option8 = -1;

    this.option9 = -1;

    this.option10 = -1;

    this.status = 0;

    this.reserve1 = 0;

    this.reserve2 = 0;

    this.reserve3 = "";

    this.reserve4 = "";

  }

  public TEvaluateInfo(
    String groupType,
    String itemId)
  {
    this();
    this.groupType = groupType;
    this.itemId = itemId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TEvaluateInfo(TEvaluateInfo other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetGroupType()) {
      this.groupType = other.groupType;
    }
    if (other.isSetItemId()) {
      this.itemId = other.itemId;
    }
    if (other.isSetUrl()) {
      this.url = other.url;
    }
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    this.evaAmount = other.evaAmount;
    this.option1 = other.option1;
    this.option2 = other.option2;
    this.option3 = other.option3;
    this.option4 = other.option4;
    this.option5 = other.option5;
    this.option6 = other.option6;
    this.option7 = other.option7;
    this.option8 = other.option8;
    this.option9 = other.option9;
    this.option10 = other.option10;
    this.status = other.status;
    this.reserve1 = other.reserve1;
    this.reserve2 = other.reserve2;
    if (other.isSetReserve3()) {
      this.reserve3 = other.reserve3;
    }
    if (other.isSetReserve4()) {
      this.reserve4 = other.reserve4;
    }
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetLastUpdateTime()) {
      this.lastUpdateTime = other.lastUpdateTime;
    }
  }

  public TEvaluateInfo deepCopy() {
    return new TEvaluateInfo(this);
  }

  @Override
  public void clear() {
    this.groupType = null;
    this.itemId = null;
    this.url = null;
    this.title = null;
    this.evaAmount = -1;

    this.option1 = -1;

    this.option2 = -1;

    this.option3 = -1;

    this.option4 = -1;

    this.option5 = -1;

    this.option6 = -1;

    this.option7 = -1;

    this.option8 = -1;

    this.option9 = -1;

    this.option10 = -1;

    this.status = 0;

    this.reserve1 = 0;

    this.reserve2 = 0;

    this.reserve3 = "";

    this.reserve4 = "";

    this.createTime = null;
    this.lastUpdateTime = null;
  }

  public String getGroupType() {
    return this.groupType;
  }

  public TEvaluateInfo setGroupType(String groupType) {
    this.groupType = groupType;
    return this;
  }

  public void unsetGroupType() {
    this.groupType = null;
  }

  /** Returns true if field groupType is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupType() {
    return this.groupType != null;
  }

  public void setGroupTypeIsSet(boolean value) {
    if (!value) {
      this.groupType = null;
    }
  }

  public String getItemId() {
    return this.itemId;
  }

  public TEvaluateInfo setItemId(String itemId) {
    this.itemId = itemId;
    return this;
  }

  public void unsetItemId() {
    this.itemId = null;
  }

  /** Returns true if field itemId is set (has been assigned a value) and false otherwise */
  public boolean isSetItemId() {
    return this.itemId != null;
  }

  public void setItemIdIsSet(boolean value) {
    if (!value) {
      this.itemId = null;
    }
  }

  public String getUrl() {
    return this.url;
  }

  public TEvaluateInfo setUrl(String url) {
    this.url = url;
    return this;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public String getTitle() {
    return this.title;
  }

  public TEvaluateInfo setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public int getEvaAmount() {
    return this.evaAmount;
  }

  public TEvaluateInfo setEvaAmount(int evaAmount) {
    this.evaAmount = evaAmount;
    setEvaAmountIsSet(true);
    return this;
  }

  public void unsetEvaAmount() {
    __isset_bit_vector.clear(__EVAAMOUNT_ISSET_ID);
  }

  /** Returns true if field evaAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetEvaAmount() {
    return __isset_bit_vector.get(__EVAAMOUNT_ISSET_ID);
  }

  public void setEvaAmountIsSet(boolean value) {
    __isset_bit_vector.set(__EVAAMOUNT_ISSET_ID, value);
  }

  public int getOption1() {
    return this.option1;
  }

  public TEvaluateInfo setOption1(int option1) {
    this.option1 = option1;
    setOption1IsSet(true);
    return this;
  }

  public void unsetOption1() {
    __isset_bit_vector.clear(__OPTION1_ISSET_ID);
  }

  /** Returns true if field option1 is set (has been assigned a value) and false otherwise */
  public boolean isSetOption1() {
    return __isset_bit_vector.get(__OPTION1_ISSET_ID);
  }

  public void setOption1IsSet(boolean value) {
    __isset_bit_vector.set(__OPTION1_ISSET_ID, value);
  }

  public int getOption2() {
    return this.option2;
  }

  public TEvaluateInfo setOption2(int option2) {
    this.option2 = option2;
    setOption2IsSet(true);
    return this;
  }

  public void unsetOption2() {
    __isset_bit_vector.clear(__OPTION2_ISSET_ID);
  }

  /** Returns true if field option2 is set (has been assigned a value) and false otherwise */
  public boolean isSetOption2() {
    return __isset_bit_vector.get(__OPTION2_ISSET_ID);
  }

  public void setOption2IsSet(boolean value) {
    __isset_bit_vector.set(__OPTION2_ISSET_ID, value);
  }

  public int getOption3() {
    return this.option3;
  }

  public TEvaluateInfo setOption3(int option3) {
    this.option3 = option3;
    setOption3IsSet(true);
    return this;
  }

  public void unsetOption3() {
    __isset_bit_vector.clear(__OPTION3_ISSET_ID);
  }

  /** Returns true if field option3 is set (has been assigned a value) and false otherwise */
  public boolean isSetOption3() {
    return __isset_bit_vector.get(__OPTION3_ISSET_ID);
  }

  public void setOption3IsSet(boolean value) {
    __isset_bit_vector.set(__OPTION3_ISSET_ID, value);
  }

  public int getOption4() {
    return this.option4;
  }

  public TEvaluateInfo setOption4(int option4) {
    this.option4 = option4;
    setOption4IsSet(true);
    return this;
  }

  public void unsetOption4() {
    __isset_bit_vector.clear(__OPTION4_ISSET_ID);
  }

  /** Returns true if field option4 is set (has been assigned a value) and false otherwise */
  public boolean isSetOption4() {
    return __isset_bit_vector.get(__OPTION4_ISSET_ID);
  }

  public void setOption4IsSet(boolean value) {
    __isset_bit_vector.set(__OPTION4_ISSET_ID, value);
  }

  public int getOption5() {
    return this.option5;
  }

  public TEvaluateInfo setOption5(int option5) {
    this.option5 = option5;
    setOption5IsSet(true);
    return this;
  }

  public void unsetOption5() {
    __isset_bit_vector.clear(__OPTION5_ISSET_ID);
  }

  /** Returns true if field option5 is set (has been assigned a value) and false otherwise */
  public boolean isSetOption5() {
    return __isset_bit_vector.get(__OPTION5_ISSET_ID);
  }

  public void setOption5IsSet(boolean value) {
    __isset_bit_vector.set(__OPTION5_ISSET_ID, value);
  }

  public int getOption6() {
    return this.option6;
  }

  public TEvaluateInfo setOption6(int option6) {
    this.option6 = option6;
    setOption6IsSet(true);
    return this;
  }

  public void unsetOption6() {
    __isset_bit_vector.clear(__OPTION6_ISSET_ID);
  }

  /** Returns true if field option6 is set (has been assigned a value) and false otherwise */
  public boolean isSetOption6() {
    return __isset_bit_vector.get(__OPTION6_ISSET_ID);
  }

  public void setOption6IsSet(boolean value) {
    __isset_bit_vector.set(__OPTION6_ISSET_ID, value);
  }

  public int getOption7() {
    return this.option7;
  }

  public TEvaluateInfo setOption7(int option7) {
    this.option7 = option7;
    setOption7IsSet(true);
    return this;
  }

  public void unsetOption7() {
    __isset_bit_vector.clear(__OPTION7_ISSET_ID);
  }

  /** Returns true if field option7 is set (has been assigned a value) and false otherwise */
  public boolean isSetOption7() {
    return __isset_bit_vector.get(__OPTION7_ISSET_ID);
  }

  public void setOption7IsSet(boolean value) {
    __isset_bit_vector.set(__OPTION7_ISSET_ID, value);
  }

  public int getOption8() {
    return this.option8;
  }

  public TEvaluateInfo setOption8(int option8) {
    this.option8 = option8;
    setOption8IsSet(true);
    return this;
  }

  public void unsetOption8() {
    __isset_bit_vector.clear(__OPTION8_ISSET_ID);
  }

  /** Returns true if field option8 is set (has been assigned a value) and false otherwise */
  public boolean isSetOption8() {
    return __isset_bit_vector.get(__OPTION8_ISSET_ID);
  }

  public void setOption8IsSet(boolean value) {
    __isset_bit_vector.set(__OPTION8_ISSET_ID, value);
  }

  public int getOption9() {
    return this.option9;
  }

  public TEvaluateInfo setOption9(int option9) {
    this.option9 = option9;
    setOption9IsSet(true);
    return this;
  }

  public void unsetOption9() {
    __isset_bit_vector.clear(__OPTION9_ISSET_ID);
  }

  /** Returns true if field option9 is set (has been assigned a value) and false otherwise */
  public boolean isSetOption9() {
    return __isset_bit_vector.get(__OPTION9_ISSET_ID);
  }

  public void setOption9IsSet(boolean value) {
    __isset_bit_vector.set(__OPTION9_ISSET_ID, value);
  }

  public int getOption10() {
    return this.option10;
  }

  public TEvaluateInfo setOption10(int option10) {
    this.option10 = option10;
    setOption10IsSet(true);
    return this;
  }

  public void unsetOption10() {
    __isset_bit_vector.clear(__OPTION10_ISSET_ID);
  }

  /** Returns true if field option10 is set (has been assigned a value) and false otherwise */
  public boolean isSetOption10() {
    return __isset_bit_vector.get(__OPTION10_ISSET_ID);
  }

  public void setOption10IsSet(boolean value) {
    __isset_bit_vector.set(__OPTION10_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public TEvaluateInfo setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bit_vector.clear(__STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return __isset_bit_vector.get(__STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bit_vector.set(__STATUS_ISSET_ID, value);
  }

  public int getReserve1() {
    return this.reserve1;
  }

  public TEvaluateInfo setReserve1(int reserve1) {
    this.reserve1 = reserve1;
    setReserve1IsSet(true);
    return this;
  }

  public void unsetReserve1() {
    __isset_bit_vector.clear(__RESERVE1_ISSET_ID);
  }

  /** Returns true if field reserve1 is set (has been assigned a value) and false otherwise */
  public boolean isSetReserve1() {
    return __isset_bit_vector.get(__RESERVE1_ISSET_ID);
  }

  public void setReserve1IsSet(boolean value) {
    __isset_bit_vector.set(__RESERVE1_ISSET_ID, value);
  }

  public int getReserve2() {
    return this.reserve2;
  }

  public TEvaluateInfo setReserve2(int reserve2) {
    this.reserve2 = reserve2;
    setReserve2IsSet(true);
    return this;
  }

  public void unsetReserve2() {
    __isset_bit_vector.clear(__RESERVE2_ISSET_ID);
  }

  /** Returns true if field reserve2 is set (has been assigned a value) and false otherwise */
  public boolean isSetReserve2() {
    return __isset_bit_vector.get(__RESERVE2_ISSET_ID);
  }

  public void setReserve2IsSet(boolean value) {
    __isset_bit_vector.set(__RESERVE2_ISSET_ID, value);
  }

  public String getReserve3() {
    return this.reserve3;
  }

  public TEvaluateInfo setReserve3(String reserve3) {
    this.reserve3 = reserve3;
    return this;
  }

  public void unsetReserve3() {
    this.reserve3 = null;
  }

  /** Returns true if field reserve3 is set (has been assigned a value) and false otherwise */
  public boolean isSetReserve3() {
    return this.reserve3 != null;
  }

  public void setReserve3IsSet(boolean value) {
    if (!value) {
      this.reserve3 = null;
    }
  }

  public String getReserve4() {
    return this.reserve4;
  }

  public TEvaluateInfo setReserve4(String reserve4) {
    this.reserve4 = reserve4;
    return this;
  }

  public void unsetReserve4() {
    this.reserve4 = null;
  }

  /** Returns true if field reserve4 is set (has been assigned a value) and false otherwise */
  public boolean isSetReserve4() {
    return this.reserve4 != null;
  }

  public void setReserve4IsSet(boolean value) {
    if (!value) {
      this.reserve4 = null;
    }
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public TEvaluateInfo setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public String getLastUpdateTime() {
    return this.lastUpdateTime;
  }

  public TEvaluateInfo setLastUpdateTime(String lastUpdateTime) {
    this.lastUpdateTime = lastUpdateTime;
    return this;
  }

  public void unsetLastUpdateTime() {
    this.lastUpdateTime = null;
  }

  /** Returns true if field lastUpdateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLastUpdateTime() {
    return this.lastUpdateTime != null;
  }

  public void setLastUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.lastUpdateTime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case GROUP_TYPE:
      if (value == null) {
        unsetGroupType();
      } else {
        setGroupType((String)value);
      }
      break;

    case ITEM_ID:
      if (value == null) {
        unsetItemId();
      } else {
        setItemId((String)value);
      }
      break;

    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((String)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case EVA_AMOUNT:
      if (value == null) {
        unsetEvaAmount();
      } else {
        setEvaAmount((Integer)value);
      }
      break;

    case OPTION1:
      if (value == null) {
        unsetOption1();
      } else {
        setOption1((Integer)value);
      }
      break;

    case OPTION2:
      if (value == null) {
        unsetOption2();
      } else {
        setOption2((Integer)value);
      }
      break;

    case OPTION3:
      if (value == null) {
        unsetOption3();
      } else {
        setOption3((Integer)value);
      }
      break;

    case OPTION4:
      if (value == null) {
        unsetOption4();
      } else {
        setOption4((Integer)value);
      }
      break;

    case OPTION5:
      if (value == null) {
        unsetOption5();
      } else {
        setOption5((Integer)value);
      }
      break;

    case OPTION6:
      if (value == null) {
        unsetOption6();
      } else {
        setOption6((Integer)value);
      }
      break;

    case OPTION7:
      if (value == null) {
        unsetOption7();
      } else {
        setOption7((Integer)value);
      }
      break;

    case OPTION8:
      if (value == null) {
        unsetOption8();
      } else {
        setOption8((Integer)value);
      }
      break;

    case OPTION9:
      if (value == null) {
        unsetOption9();
      } else {
        setOption9((Integer)value);
      }
      break;

    case OPTION10:
      if (value == null) {
        unsetOption10();
      } else {
        setOption10((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case RESERVE1:
      if (value == null) {
        unsetReserve1();
      } else {
        setReserve1((Integer)value);
      }
      break;

    case RESERVE2:
      if (value == null) {
        unsetReserve2();
      } else {
        setReserve2((Integer)value);
      }
      break;

    case RESERVE3:
      if (value == null) {
        unsetReserve3();
      } else {
        setReserve3((String)value);
      }
      break;

    case RESERVE4:
      if (value == null) {
        unsetReserve4();
      } else {
        setReserve4((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    case LAST_UPDATE_TIME:
      if (value == null) {
        unsetLastUpdateTime();
      } else {
        setLastUpdateTime((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case GROUP_TYPE:
      return getGroupType();

    case ITEM_ID:
      return getItemId();

    case URL:
      return getUrl();

    case TITLE:
      return getTitle();

    case EVA_AMOUNT:
      return Integer.valueOf(getEvaAmount());

    case OPTION1:
      return Integer.valueOf(getOption1());

    case OPTION2:
      return Integer.valueOf(getOption2());

    case OPTION3:
      return Integer.valueOf(getOption3());

    case OPTION4:
      return Integer.valueOf(getOption4());

    case OPTION5:
      return Integer.valueOf(getOption5());

    case OPTION6:
      return Integer.valueOf(getOption6());

    case OPTION7:
      return Integer.valueOf(getOption7());

    case OPTION8:
      return Integer.valueOf(getOption8());

    case OPTION9:
      return Integer.valueOf(getOption9());

    case OPTION10:
      return Integer.valueOf(getOption10());

    case STATUS:
      return Integer.valueOf(getStatus());

    case RESERVE1:
      return Integer.valueOf(getReserve1());

    case RESERVE2:
      return Integer.valueOf(getReserve2());

    case RESERVE3:
      return getReserve3();

    case RESERVE4:
      return getReserve4();

    case CREATE_TIME:
      return getCreateTime();

    case LAST_UPDATE_TIME:
      return getLastUpdateTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case GROUP_TYPE:
      return isSetGroupType();
    case ITEM_ID:
      return isSetItemId();
    case URL:
      return isSetUrl();
    case TITLE:
      return isSetTitle();
    case EVA_AMOUNT:
      return isSetEvaAmount();
    case OPTION1:
      return isSetOption1();
    case OPTION2:
      return isSetOption2();
    case OPTION3:
      return isSetOption3();
    case OPTION4:
      return isSetOption4();
    case OPTION5:
      return isSetOption5();
    case OPTION6:
      return isSetOption6();
    case OPTION7:
      return isSetOption7();
    case OPTION8:
      return isSetOption8();
    case OPTION9:
      return isSetOption9();
    case OPTION10:
      return isSetOption10();
    case STATUS:
      return isSetStatus();
    case RESERVE1:
      return isSetReserve1();
    case RESERVE2:
      return isSetReserve2();
    case RESERVE3:
      return isSetReserve3();
    case RESERVE4:
      return isSetReserve4();
    case CREATE_TIME:
      return isSetCreateTime();
    case LAST_UPDATE_TIME:
      return isSetLastUpdateTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TEvaluateInfo)
      return this.equals((TEvaluateInfo)that);
    return false;
  }

  public boolean equals(TEvaluateInfo that) {
    if (that == null)
      return false;

    boolean this_present_groupType = true && this.isSetGroupType();
    boolean that_present_groupType = true && that.isSetGroupType();
    if (this_present_groupType || that_present_groupType) {
      if (!(this_present_groupType && that_present_groupType))
        return false;
      if (!this.groupType.equals(that.groupType))
        return false;
    }

    boolean this_present_itemId = true && this.isSetItemId();
    boolean that_present_itemId = true && that.isSetItemId();
    if (this_present_itemId || that_present_itemId) {
      if (!(this_present_itemId && that_present_itemId))
        return false;
      if (!this.itemId.equals(that.itemId))
        return false;
    }

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_evaAmount = true && this.isSetEvaAmount();
    boolean that_present_evaAmount = true && that.isSetEvaAmount();
    if (this_present_evaAmount || that_present_evaAmount) {
      if (!(this_present_evaAmount && that_present_evaAmount))
        return false;
      if (this.evaAmount != that.evaAmount)
        return false;
    }

    boolean this_present_option1 = true && this.isSetOption1();
    boolean that_present_option1 = true && that.isSetOption1();
    if (this_present_option1 || that_present_option1) {
      if (!(this_present_option1 && that_present_option1))
        return false;
      if (this.option1 != that.option1)
        return false;
    }

    boolean this_present_option2 = true && this.isSetOption2();
    boolean that_present_option2 = true && that.isSetOption2();
    if (this_present_option2 || that_present_option2) {
      if (!(this_present_option2 && that_present_option2))
        return false;
      if (this.option2 != that.option2)
        return false;
    }

    boolean this_present_option3 = true && this.isSetOption3();
    boolean that_present_option3 = true && that.isSetOption3();
    if (this_present_option3 || that_present_option3) {
      if (!(this_present_option3 && that_present_option3))
        return false;
      if (this.option3 != that.option3)
        return false;
    }

    boolean this_present_option4 = true && this.isSetOption4();
    boolean that_present_option4 = true && that.isSetOption4();
    if (this_present_option4 || that_present_option4) {
      if (!(this_present_option4 && that_present_option4))
        return false;
      if (this.option4 != that.option4)
        return false;
    }

    boolean this_present_option5 = true && this.isSetOption5();
    boolean that_present_option5 = true && that.isSetOption5();
    if (this_present_option5 || that_present_option5) {
      if (!(this_present_option5 && that_present_option5))
        return false;
      if (this.option5 != that.option5)
        return false;
    }

    boolean this_present_option6 = true && this.isSetOption6();
    boolean that_present_option6 = true && that.isSetOption6();
    if (this_present_option6 || that_present_option6) {
      if (!(this_present_option6 && that_present_option6))
        return false;
      if (this.option6 != that.option6)
        return false;
    }

    boolean this_present_option7 = true && this.isSetOption7();
    boolean that_present_option7 = true && that.isSetOption7();
    if (this_present_option7 || that_present_option7) {
      if (!(this_present_option7 && that_present_option7))
        return false;
      if (this.option7 != that.option7)
        return false;
    }

    boolean this_present_option8 = true && this.isSetOption8();
    boolean that_present_option8 = true && that.isSetOption8();
    if (this_present_option8 || that_present_option8) {
      if (!(this_present_option8 && that_present_option8))
        return false;
      if (this.option8 != that.option8)
        return false;
    }

    boolean this_present_option9 = true && this.isSetOption9();
    boolean that_present_option9 = true && that.isSetOption9();
    if (this_present_option9 || that_present_option9) {
      if (!(this_present_option9 && that_present_option9))
        return false;
      if (this.option9 != that.option9)
        return false;
    }

    boolean this_present_option10 = true && this.isSetOption10();
    boolean that_present_option10 = true && that.isSetOption10();
    if (this_present_option10 || that_present_option10) {
      if (!(this_present_option10 && that_present_option10))
        return false;
      if (this.option10 != that.option10)
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_reserve1 = true && this.isSetReserve1();
    boolean that_present_reserve1 = true && that.isSetReserve1();
    if (this_present_reserve1 || that_present_reserve1) {
      if (!(this_present_reserve1 && that_present_reserve1))
        return false;
      if (this.reserve1 != that.reserve1)
        return false;
    }

    boolean this_present_reserve2 = true && this.isSetReserve2();
    boolean that_present_reserve2 = true && that.isSetReserve2();
    if (this_present_reserve2 || that_present_reserve2) {
      if (!(this_present_reserve2 && that_present_reserve2))
        return false;
      if (this.reserve2 != that.reserve2)
        return false;
    }

    boolean this_present_reserve3 = true && this.isSetReserve3();
    boolean that_present_reserve3 = true && that.isSetReserve3();
    if (this_present_reserve3 || that_present_reserve3) {
      if (!(this_present_reserve3 && that_present_reserve3))
        return false;
      if (!this.reserve3.equals(that.reserve3))
        return false;
    }

    boolean this_present_reserve4 = true && this.isSetReserve4();
    boolean that_present_reserve4 = true && that.isSetReserve4();
    if (this_present_reserve4 || that_present_reserve4) {
      if (!(this_present_reserve4 && that_present_reserve4))
        return false;
      if (!this.reserve4.equals(that.reserve4))
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_lastUpdateTime = true && this.isSetLastUpdateTime();
    boolean that_present_lastUpdateTime = true && that.isSetLastUpdateTime();
    if (this_present_lastUpdateTime || that_present_lastUpdateTime) {
      if (!(this_present_lastUpdateTime && that_present_lastUpdateTime))
        return false;
      if (!this.lastUpdateTime.equals(that.lastUpdateTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TEvaluateInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TEvaluateInfo typedOther = (TEvaluateInfo)other;

    lastComparison = Boolean.valueOf(isSetGroupType()).compareTo(typedOther.isSetGroupType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupType, typedOther.groupType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItemId()).compareTo(typedOther.isSetItemId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemId, typedOther.itemId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUrl()).compareTo(typedOther.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, typedOther.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(typedOther.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, typedOther.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEvaAmount()).compareTo(typedOther.isSetEvaAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEvaAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.evaAmount, typedOther.evaAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOption1()).compareTo(typedOther.isSetOption1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOption1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.option1, typedOther.option1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOption2()).compareTo(typedOther.isSetOption2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOption2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.option2, typedOther.option2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOption3()).compareTo(typedOther.isSetOption3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOption3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.option3, typedOther.option3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOption4()).compareTo(typedOther.isSetOption4());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOption4()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.option4, typedOther.option4);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOption5()).compareTo(typedOther.isSetOption5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOption5()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.option5, typedOther.option5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOption6()).compareTo(typedOther.isSetOption6());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOption6()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.option6, typedOther.option6);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOption7()).compareTo(typedOther.isSetOption7());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOption7()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.option7, typedOther.option7);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOption8()).compareTo(typedOther.isSetOption8());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOption8()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.option8, typedOther.option8);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOption9()).compareTo(typedOther.isSetOption9());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOption9()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.option9, typedOther.option9);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOption10()).compareTo(typedOther.isSetOption10());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOption10()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.option10, typedOther.option10);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReserve1()).compareTo(typedOther.isSetReserve1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReserve1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reserve1, typedOther.reserve1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReserve2()).compareTo(typedOther.isSetReserve2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReserve2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reserve2, typedOther.reserve2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReserve3()).compareTo(typedOther.isSetReserve3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReserve3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reserve3, typedOther.reserve3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReserve4()).compareTo(typedOther.isSetReserve4());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReserve4()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reserve4, typedOther.reserve4);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(typedOther.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, typedOther.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastUpdateTime()).compareTo(typedOther.isSetLastUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastUpdateTime, typedOther.lastUpdateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TEvaluateInfo(");
    boolean first = true;

    sb.append("groupType:");
    if (this.groupType == null) {
      sb.append("null");
    } else {
      sb.append(this.groupType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("itemId:");
    if (this.itemId == null) {
      sb.append("null");
    } else {
      sb.append(this.itemId);
    }
    first = false;
    if (isSetUrl()) {
      if (!first) sb.append(", ");
      sb.append("url:");
      if (this.url == null) {
        sb.append("null");
      } else {
        sb.append(this.url);
      }
      first = false;
    }
    if (isSetTitle()) {
      if (!first) sb.append(", ");
      sb.append("title:");
      if (this.title == null) {
        sb.append("null");
      } else {
        sb.append(this.title);
      }
      first = false;
    }
    if (isSetEvaAmount()) {
      if (!first) sb.append(", ");
      sb.append("evaAmount:");
      sb.append(this.evaAmount);
      first = false;
    }
    if (isSetOption1()) {
      if (!first) sb.append(", ");
      sb.append("option1:");
      sb.append(this.option1);
      first = false;
    }
    if (isSetOption2()) {
      if (!first) sb.append(", ");
      sb.append("option2:");
      sb.append(this.option2);
      first = false;
    }
    if (isSetOption3()) {
      if (!first) sb.append(", ");
      sb.append("option3:");
      sb.append(this.option3);
      first = false;
    }
    if (isSetOption4()) {
      if (!first) sb.append(", ");
      sb.append("option4:");
      sb.append(this.option4);
      first = false;
    }
    if (isSetOption5()) {
      if (!first) sb.append(", ");
      sb.append("option5:");
      sb.append(this.option5);
      first = false;
    }
    if (isSetOption6()) {
      if (!first) sb.append(", ");
      sb.append("option6:");
      sb.append(this.option6);
      first = false;
    }
    if (isSetOption7()) {
      if (!first) sb.append(", ");
      sb.append("option7:");
      sb.append(this.option7);
      first = false;
    }
    if (isSetOption8()) {
      if (!first) sb.append(", ");
      sb.append("option8:");
      sb.append(this.option8);
      first = false;
    }
    if (isSetOption9()) {
      if (!first) sb.append(", ");
      sb.append("option9:");
      sb.append(this.option9);
      first = false;
    }
    if (isSetOption10()) {
      if (!first) sb.append(", ");
      sb.append("option10:");
      sb.append(this.option10);
      first = false;
    }
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      sb.append(this.status);
      first = false;
    }
    if (isSetReserve1()) {
      if (!first) sb.append(", ");
      sb.append("reserve1:");
      sb.append(this.reserve1);
      first = false;
    }
    if (isSetReserve2()) {
      if (!first) sb.append(", ");
      sb.append("reserve2:");
      sb.append(this.reserve2);
      first = false;
    }
    if (isSetReserve3()) {
      if (!first) sb.append(", ");
      sb.append("reserve3:");
      if (this.reserve3 == null) {
        sb.append("null");
      } else {
        sb.append(this.reserve3);
      }
      first = false;
    }
    if (isSetReserve4()) {
      if (!first) sb.append(", ");
      sb.append("reserve4:");
      if (this.reserve4 == null) {
        sb.append("null");
      } else {
        sb.append(this.reserve4);
      }
      first = false;
    }
    if (isSetCreateTime()) {
      if (!first) sb.append(", ");
      sb.append("createTime:");
      if (this.createTime == null) {
        sb.append("null");
      } else {
        sb.append(this.createTime);
      }
      first = false;
    }
    if (isSetLastUpdateTime()) {
      if (!first) sb.append(", ");
      sb.append("lastUpdateTime:");
      if (this.lastUpdateTime == null) {
        sb.append("null");
      } else {
        sb.append(this.lastUpdateTime);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TEvaluateInfoStandardSchemeFactory implements SchemeFactory {
    public TEvaluateInfoStandardScheme getScheme() {
      return new TEvaluateInfoStandardScheme();
    }
  }

  private static class TEvaluateInfoStandardScheme extends StandardScheme<TEvaluateInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TEvaluateInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GROUP_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.groupType = iprot.readString();
              struct.setGroupTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ITEM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.itemId = iprot.readString();
              struct.setItemIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.url = iprot.readString();
              struct.setUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EVA_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.evaAmount = iprot.readI32();
              struct.setEvaAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // OPTION1
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.option1 = iprot.readI32();
              struct.setOption1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // OPTION2
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.option2 = iprot.readI32();
              struct.setOption2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // OPTION3
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.option3 = iprot.readI32();
              struct.setOption3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // OPTION4
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.option4 = iprot.readI32();
              struct.setOption4IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // OPTION5
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.option5 = iprot.readI32();
              struct.setOption5IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // OPTION6
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.option6 = iprot.readI32();
              struct.setOption6IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // OPTION7
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.option7 = iprot.readI32();
              struct.setOption7IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // OPTION8
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.option8 = iprot.readI32();
              struct.setOption8IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // OPTION9
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.option9 = iprot.readI32();
              struct.setOption9IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // OPTION10
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.option10 = iprot.readI32();
              struct.setOption10IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // RESERVE1
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.reserve1 = iprot.readI32();
              struct.setReserve1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // RESERVE2
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.reserve2 = iprot.readI32();
              struct.setReserve2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // RESERVE3
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reserve3 = iprot.readString();
              struct.setReserve3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // RESERVE4
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reserve4 = iprot.readString();
              struct.setReserve4IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // LAST_UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastUpdateTime = iprot.readString();
              struct.setLastUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TEvaluateInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.groupType != null) {
        oprot.writeFieldBegin(GROUP_TYPE_FIELD_DESC);
        oprot.writeString(struct.groupType);
        oprot.writeFieldEnd();
      }
      if (struct.itemId != null) {
        oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
        oprot.writeString(struct.itemId);
        oprot.writeFieldEnd();
      }
      if (struct.url != null) {
        if (struct.isSetUrl()) {
          oprot.writeFieldBegin(URL_FIELD_DESC);
          oprot.writeString(struct.url);
          oprot.writeFieldEnd();
        }
      }
      if (struct.title != null) {
        if (struct.isSetTitle()) {
          oprot.writeFieldBegin(TITLE_FIELD_DESC);
          oprot.writeString(struct.title);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetEvaAmount()) {
        oprot.writeFieldBegin(EVA_AMOUNT_FIELD_DESC);
        oprot.writeI32(struct.evaAmount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOption1()) {
        oprot.writeFieldBegin(OPTION1_FIELD_DESC);
        oprot.writeI32(struct.option1);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOption2()) {
        oprot.writeFieldBegin(OPTION2_FIELD_DESC);
        oprot.writeI32(struct.option2);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOption3()) {
        oprot.writeFieldBegin(OPTION3_FIELD_DESC);
        oprot.writeI32(struct.option3);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOption4()) {
        oprot.writeFieldBegin(OPTION4_FIELD_DESC);
        oprot.writeI32(struct.option4);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOption5()) {
        oprot.writeFieldBegin(OPTION5_FIELD_DESC);
        oprot.writeI32(struct.option5);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOption6()) {
        oprot.writeFieldBegin(OPTION6_FIELD_DESC);
        oprot.writeI32(struct.option6);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOption7()) {
        oprot.writeFieldBegin(OPTION7_FIELD_DESC);
        oprot.writeI32(struct.option7);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOption8()) {
        oprot.writeFieldBegin(OPTION8_FIELD_DESC);
        oprot.writeI32(struct.option8);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOption9()) {
        oprot.writeFieldBegin(OPTION9_FIELD_DESC);
        oprot.writeI32(struct.option9);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOption10()) {
        oprot.writeFieldBegin(OPTION10_FIELD_DESC);
        oprot.writeI32(struct.option10);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStatus()) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status);
        oprot.writeFieldEnd();
      }
      if (struct.isSetReserve1()) {
        oprot.writeFieldBegin(RESERVE1_FIELD_DESC);
        oprot.writeI32(struct.reserve1);
        oprot.writeFieldEnd();
      }
      if (struct.isSetReserve2()) {
        oprot.writeFieldBegin(RESERVE2_FIELD_DESC);
        oprot.writeI32(struct.reserve2);
        oprot.writeFieldEnd();
      }
      if (struct.reserve3 != null) {
        if (struct.isSetReserve3()) {
          oprot.writeFieldBegin(RESERVE3_FIELD_DESC);
          oprot.writeString(struct.reserve3);
          oprot.writeFieldEnd();
        }
      }
      if (struct.reserve4 != null) {
        if (struct.isSetReserve4()) {
          oprot.writeFieldBegin(RESERVE4_FIELD_DESC);
          oprot.writeString(struct.reserve4);
          oprot.writeFieldEnd();
        }
      }
      if (struct.createTime != null) {
        if (struct.isSetCreateTime()) {
          oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
          oprot.writeString(struct.createTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.lastUpdateTime != null) {
        if (struct.isSetLastUpdateTime()) {
          oprot.writeFieldBegin(LAST_UPDATE_TIME_FIELD_DESC);
          oprot.writeString(struct.lastUpdateTime);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TEvaluateInfoTupleSchemeFactory implements SchemeFactory {
    public TEvaluateInfoTupleScheme getScheme() {
      return new TEvaluateInfoTupleScheme();
    }
  }

  private static class TEvaluateInfoTupleScheme extends TupleScheme<TEvaluateInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TEvaluateInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetGroupType()) {
        optionals.set(0);
      }
      if (struct.isSetItemId()) {
        optionals.set(1);
      }
      if (struct.isSetUrl()) {
        optionals.set(2);
      }
      if (struct.isSetTitle()) {
        optionals.set(3);
      }
      if (struct.isSetEvaAmount()) {
        optionals.set(4);
      }
      if (struct.isSetOption1()) {
        optionals.set(5);
      }
      if (struct.isSetOption2()) {
        optionals.set(6);
      }
      if (struct.isSetOption3()) {
        optionals.set(7);
      }
      if (struct.isSetOption4()) {
        optionals.set(8);
      }
      if (struct.isSetOption5()) {
        optionals.set(9);
      }
      if (struct.isSetOption6()) {
        optionals.set(10);
      }
      if (struct.isSetOption7()) {
        optionals.set(11);
      }
      if (struct.isSetOption8()) {
        optionals.set(12);
      }
      if (struct.isSetOption9()) {
        optionals.set(13);
      }
      if (struct.isSetOption10()) {
        optionals.set(14);
      }
      if (struct.isSetStatus()) {
        optionals.set(15);
      }
      if (struct.isSetReserve1()) {
        optionals.set(16);
      }
      if (struct.isSetReserve2()) {
        optionals.set(17);
      }
      if (struct.isSetReserve3()) {
        optionals.set(18);
      }
      if (struct.isSetReserve4()) {
        optionals.set(19);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(20);
      }
      if (struct.isSetLastUpdateTime()) {
        optionals.set(21);
      }
      oprot.writeBitSet(optionals, 22);
      if (struct.isSetGroupType()) {
        oprot.writeString(struct.groupType);
      }
      if (struct.isSetItemId()) {
        oprot.writeString(struct.itemId);
      }
      if (struct.isSetUrl()) {
        oprot.writeString(struct.url);
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetEvaAmount()) {
        oprot.writeI32(struct.evaAmount);
      }
      if (struct.isSetOption1()) {
        oprot.writeI32(struct.option1);
      }
      if (struct.isSetOption2()) {
        oprot.writeI32(struct.option2);
      }
      if (struct.isSetOption3()) {
        oprot.writeI32(struct.option3);
      }
      if (struct.isSetOption4()) {
        oprot.writeI32(struct.option4);
      }
      if (struct.isSetOption5()) {
        oprot.writeI32(struct.option5);
      }
      if (struct.isSetOption6()) {
        oprot.writeI32(struct.option6);
      }
      if (struct.isSetOption7()) {
        oprot.writeI32(struct.option7);
      }
      if (struct.isSetOption8()) {
        oprot.writeI32(struct.option8);
      }
      if (struct.isSetOption9()) {
        oprot.writeI32(struct.option9);
      }
      if (struct.isSetOption10()) {
        oprot.writeI32(struct.option10);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetReserve1()) {
        oprot.writeI32(struct.reserve1);
      }
      if (struct.isSetReserve2()) {
        oprot.writeI32(struct.reserve2);
      }
      if (struct.isSetReserve3()) {
        oprot.writeString(struct.reserve3);
      }
      if (struct.isSetReserve4()) {
        oprot.writeString(struct.reserve4);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetLastUpdateTime()) {
        oprot.writeString(struct.lastUpdateTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TEvaluateInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(22);
      if (incoming.get(0)) {
        struct.groupType = iprot.readString();
        struct.setGroupTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.itemId = iprot.readString();
        struct.setItemIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.url = iprot.readString();
        struct.setUrlIsSet(true);
      }
      if (incoming.get(3)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(4)) {
        struct.evaAmount = iprot.readI32();
        struct.setEvaAmountIsSet(true);
      }
      if (incoming.get(5)) {
        struct.option1 = iprot.readI32();
        struct.setOption1IsSet(true);
      }
      if (incoming.get(6)) {
        struct.option2 = iprot.readI32();
        struct.setOption2IsSet(true);
      }
      if (incoming.get(7)) {
        struct.option3 = iprot.readI32();
        struct.setOption3IsSet(true);
      }
      if (incoming.get(8)) {
        struct.option4 = iprot.readI32();
        struct.setOption4IsSet(true);
      }
      if (incoming.get(9)) {
        struct.option5 = iprot.readI32();
        struct.setOption5IsSet(true);
      }
      if (incoming.get(10)) {
        struct.option6 = iprot.readI32();
        struct.setOption6IsSet(true);
      }
      if (incoming.get(11)) {
        struct.option7 = iprot.readI32();
        struct.setOption7IsSet(true);
      }
      if (incoming.get(12)) {
        struct.option8 = iprot.readI32();
        struct.setOption8IsSet(true);
      }
      if (incoming.get(13)) {
        struct.option9 = iprot.readI32();
        struct.setOption9IsSet(true);
      }
      if (incoming.get(14)) {
        struct.option10 = iprot.readI32();
        struct.setOption10IsSet(true);
      }
      if (incoming.get(15)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(16)) {
        struct.reserve1 = iprot.readI32();
        struct.setReserve1IsSet(true);
      }
      if (incoming.get(17)) {
        struct.reserve2 = iprot.readI32();
        struct.setReserve2IsSet(true);
      }
      if (incoming.get(18)) {
        struct.reserve3 = iprot.readString();
        struct.setReserve3IsSet(true);
      }
      if (incoming.get(19)) {
        struct.reserve4 = iprot.readString();
        struct.setReserve4IsSet(true);
      }
      if (incoming.get(20)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(21)) {
        struct.lastUpdateTime = iprot.readString();
        struct.setLastUpdateTimeIsSet(true);
      }
    }
  }

}

