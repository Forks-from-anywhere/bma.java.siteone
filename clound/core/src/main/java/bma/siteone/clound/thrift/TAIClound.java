/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package bma.siteone.clound.thrift;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.thrift.TBase;
import org.apache.thrift.TException;

import bma.common.langutil.ai.stack.AIStack;
import bma.common.thrift.ai.AIBaseStack;
import bma.common.thrift.ai.TAIBaseProcessor;
import bma.common.thrift.ai.TAIBaseServiceClient;
import bma.common.thrift.ai.TAIProcessFunction;
import bma.siteone.clound.thrift.TClound.closeCloundApp_args;
import bma.siteone.clound.thrift.TClound.closeCloundApp_result;
import bma.siteone.clound.thrift.TClound.cloundCall_args;
import bma.siteone.clound.thrift.TClound.cloundCall_result;
import bma.siteone.clound.thrift.TClound.createCloundApp_args;
import bma.siteone.clound.thrift.TClound.createCloundApp_result;
import bma.siteone.clound.thrift.TClound.getCloundApiDesc_args;
import bma.siteone.clound.thrift.TClound.getCloundApiDesc_result;
import bma.siteone.clound.thrift.TClound.getCloundAppDesc_args;
import bma.siteone.clound.thrift.TClound.getCloundAppDesc_result;
import bma.siteone.clound.thrift.TClound.getCloundNodeDesc_args;
import bma.siteone.clound.thrift.TClound.getCloundNodeDesc_result;
import bma.siteone.clound.thrift.TClound.getCloundServiceDesc_args;
import bma.siteone.clound.thrift.TClound.getCloundServiceDesc_result;
import bma.siteone.clound.thrift.TClound.listCloundApiDesc_args;
import bma.siteone.clound.thrift.TClound.listCloundApiDesc_result;
import bma.siteone.clound.thrift.TClound.listCloundAppDesc_args;
import bma.siteone.clound.thrift.TClound.listCloundAppDesc_result;
import bma.siteone.clound.thrift.TClound.listCloundServiceDesc_args;
import bma.siteone.clound.thrift.TClound.listCloundServiceDesc_result;

public class TAIClound {

	public interface Iface {

		public boolean getCloundNodeDesc(AIStack<String> stack, String nodeId)
				throws org.apache.thrift.TException;

		public boolean listCloundAppDesc(AIStack<List<String>> stack,
				String nodeId) throws org.apache.thrift.TException;

		public boolean createCloundApp(AIStack<Boolean> stack, String nodeId,
				String appId, String appName)
				throws org.apache.thrift.TException;

		public boolean closeCloundApp(AIStack<Boolean> stack, String nodeId,
				String appId) throws org.apache.thrift.TException;

		public boolean getCloundAppDesc(AIStack<String> stack, String nodeId,
				String appId) throws org.apache.thrift.TException;

		public boolean listCloundServiceDesc(AIStack<List<String>> stack,
				String nodeId, String appId)
				throws org.apache.thrift.TException;

		public boolean getCloundServiceDesc(AIStack<String> stack,
				String nodeId, String appId, String serviceId)
				throws org.apache.thrift.TException;

		public boolean listCloundApiDesc(AIStack<List<String>> stack,
				String nodeId, String appId, String serviceId)
				throws org.apache.thrift.TException;

		public boolean getCloundApiDesc(AIStack<String> stack, String nodeId,
				String appId, String serviceId, String apiId)
				throws org.apache.thrift.TException;

		public boolean cloundCall(AIStack<TCloundResponse> stack,
				TCloundRequest req) throws org.apache.thrift.TException;

	}

	public static class Client extends TAIBaseServiceClient implements Iface {

		public Client(org.apache.thrift.protocol.TProtocol prot) {
			super(prot, prot);
		}

		public Client(org.apache.thrift.protocol.TProtocol iprot,
				org.apache.thrift.protocol.TProtocol oprot) {
			super(iprot, oprot);
		}

		public boolean getCloundNodeDesc(AIStack<String> stack, String nodeId)
				throws org.apache.thrift.TException {
			return super.invoke(stack, new getCloundNodeDesc_result(),
					"getCloundNodeDesc", new getCloundNodeDesc_args(nodeId));
		}

		public boolean listCloundAppDesc(AIStack<List<String>> stack,
				String nodeId) throws org.apache.thrift.TException {
			return super.invoke(stack, new listCloundAppDesc_result(),
					"listCloundAppDesc", new listCloundAppDesc_args(nodeId));
		}

		public boolean createCloundApp(AIStack<Boolean> stack, String nodeId,
				String appId, String appName)
				throws org.apache.thrift.TException {
			return super.invoke(stack, new createCloundApp_result(),
					"createCloundApp", new createCloundApp_args(nodeId, appId,
							appName));
		}

		public boolean closeCloundApp(AIStack<Boolean> stack, String nodeId,
				String appId) throws org.apache.thrift.TException {
			return super.invoke(stack, new closeCloundApp_result(),
					"closeCloundApp", new closeCloundApp_args(nodeId, appId));
		}

		public boolean listCloundServiceDesc(AIStack<List<String>> stack,
				String nodeId, String appId)
				throws org.apache.thrift.TException {
			return super.invoke(stack, new listCloundServiceDesc_result(),
					"listCloundServiceDesc", new listCloundServiceDesc_args(
							nodeId, appId));
		}

		public boolean listCloundApiDesc(AIStack<List<String>> stack,
				String nodeId, String appId, String serviceId)
				throws org.apache.thrift.TException {
			return super.invoke(stack, new listCloundApiDesc_result(),
					"listCloundApiDesc", new listCloundApiDesc_args(nodeId,
							appId, serviceId));
		}

		public boolean cloundCall(AIStack<TCloundResponse> stack,
				TCloundRequest req) throws org.apache.thrift.TException {
			return super.invoke(stack, new cloundCall_result(), "cloundCall",
					new cloundCall_args(req));
		}

		@Override
		public boolean getCloundAppDesc(AIStack<String> stack, String nodeId,
				String appId) throws TException {
			return super.invoke(stack, new getCloundAppDesc_result(),
					"getCloundAppDesc",
					new getCloundAppDesc_args(nodeId, appId));
		}

		@Override
		public boolean getCloundServiceDesc(AIStack<String> stack,
				String nodeId, String appId, String serviceId)
				throws TException {
			return super.invoke(stack, new getCloundServiceDesc_result(),
					"getCloundServiceDesc", new getCloundServiceDesc_args(
							nodeId, appId, serviceId));
		}

		@Override
		public boolean getCloundApiDesc(AIStack<String> stack, String nodeId,
				String appId, String serviceId, String apiId) throws TException {
			return super.invoke(stack, new getCloundServiceDesc_result(),
					"getCloundApiDesc", new getCloundApiDesc_args(nodeId,
							appId, serviceId, apiId));
		}

	}

	public static class Processor<IFACE extends Iface> extends
			TAIBaseProcessor<IFACE> {

		public Processor(IFACE iface) {
			super(
					iface,
					getProcessMap(new HashMap<String, TAIProcessFunction<IFACE, ? extends TBase>>()));
		}

		private static <I extends Iface> Map<String, TAIProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(
				Map<String, TAIProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
			processMap.put("getCloundNodeDesc", new getCloundNodeDesc());
			processMap.put("listCloundAppDesc", new listCloundAppDesc());
			processMap.put("createCloundApp", new createCloundApp());
			processMap.put("closeCloundApp", new closeCloundApp());
			processMap
					.put("listCloundServiceDesc", new listCloundServiceDesc());
			processMap.put("listCloundApiDesc", new listCloundApiDesc());
			processMap.put("cloundCall", new cloundCall());

			processMap.put("getCloundAppDesc", new getCloundAppDesc());
			processMap.put("getCloundServiceDesc", new getCloundServiceDesc());
			processMap.put("getCloundApiDesc", new getCloundApiDesc());

			return processMap;
		}

		private static class getCloundNodeDesc<I extends Iface> extends
				TAIProcessFunction<I, getCloundNodeDesc_args> {
			public getCloundNodeDesc() {
				super("getCloundNodeDesc");
			}

			protected getCloundNodeDesc_args getEmptyArgsInstance() {
				return new getCloundNodeDesc_args();
			}

			protected boolean getResult(AIStack<TBase> stack, I iface,
					getCloundNodeDesc_args args) throws TException {
				getCloundNodeDesc_result result = new getCloundNodeDesc_result();
				return iface.getCloundNodeDesc(new AIBaseStack<String>(stack,
						result), args.getNodeId());
			}

		}

		private static class listCloundAppDesc<I extends Iface> extends
				TAIProcessFunction<I, listCloundAppDesc_args> {
			public listCloundAppDesc() {
				super("listCloundAppDesc");
			}

			protected listCloundAppDesc_args getEmptyArgsInstance() {
				return new listCloundAppDesc_args();
			}

			protected boolean getResult(AIStack<TBase> stack, I iface,
					listCloundAppDesc_args args) throws TException {
				listCloundAppDesc_result result = new listCloundAppDesc_result();
				return iface.listCloundAppDesc(new AIBaseStack<List<String>>(
						stack, result), args.getNodeId());
			}

		}

		private static class createCloundApp<I extends Iface> extends
				TAIProcessFunction<I, createCloundApp_args> {
			public createCloundApp() {
				super("createCloundApp");
			}

			protected createCloundApp_args getEmptyArgsInstance() {
				return new createCloundApp_args();
			}

			protected boolean getResult(AIStack<TBase> stack, I iface,
					createCloundApp_args args) throws TException {
				createCloundApp_result result = new createCloundApp_result();
				return iface.createCloundApp(new AIBaseStack<Boolean>(stack,
						result), args.getNodeId(), args.getAppId(), args
						.getAppName());
			}
		}

		private static class closeCloundApp<I extends Iface> extends
				TAIProcessFunction<I, closeCloundApp_args> {

			public closeCloundApp() {
				super("closeCloundApp");
			}

			protected closeCloundApp_args getEmptyArgsInstance() {
				return new closeCloundApp_args();
			}

			protected boolean getResult(AIStack<TBase> stack, I iface,
					closeCloundApp_args args) throws TException {
				closeCloundApp_result result = new closeCloundApp_result();
				return iface.closeCloundApp(new AIBaseStack<Boolean>(stack,
						result), args.getNodeId(), args.getAppId());
			}
		}

		private static class listCloundServiceDesc<I extends Iface> extends
				TAIProcessFunction<I, listCloundServiceDesc_args> {
			public listCloundServiceDesc() {
				super("listCloundServiceDesc");
			}

			protected listCloundServiceDesc_args getEmptyArgsInstance() {
				return new listCloundServiceDesc_args();
			}

			protected boolean getResult(AIStack<TBase> stack, I iface,
					listCloundServiceDesc_args args) throws TException {
				listCloundServiceDesc_result result = new listCloundServiceDesc_result();
				return iface.listCloundServiceDesc(
						new AIBaseStack<List<String>>(stack, result),
						args.getNodeId(), args.getAppId());
			}

		}

		private static class listCloundApiDesc<I extends Iface> extends
				TAIProcessFunction<I, listCloundApiDesc_args> {
			public listCloundApiDesc() {
				super("listCloundApiDesc");
			}

			protected listCloundApiDesc_args getEmptyArgsInstance() {
				return new listCloundApiDesc_args();
			}

			protected boolean getResult(AIStack<TBase> stack, I iface,
					listCloundApiDesc_args args) throws TException {
				listCloundApiDesc_result result = new listCloundApiDesc_result();
				return iface.listCloundApiDesc(new AIBaseStack<List<String>>(
						stack, result), args.getNodeId(), args.getAppId(), args
						.getServiceId());
			}

		}

		private static class cloundCall<I extends Iface> extends
				TAIProcessFunction<I, cloundCall_args> {
			public cloundCall() {
				super("cloundCall");
			}

			protected cloundCall_args getEmptyArgsInstance() {
				return new cloundCall_args();
			}

			protected boolean getResult(AIStack<TBase> stack, I iface,
					cloundCall_args args) throws TException {
				cloundCall_result result = new cloundCall_result();
				return iface.cloundCall(new AIBaseStack<TCloundResponse>(stack,
						result), args.getReq());
			}

		}

		private static class getCloundAppDesc<I extends Iface> extends
				TAIProcessFunction<I, getCloundAppDesc_args> {
			public getCloundAppDesc() {
				super("getCloundAppDesc");
			}

			protected getCloundAppDesc_args getEmptyArgsInstance() {
				return new getCloundAppDesc_args();
			}

			protected boolean getResult(AIStack<TBase> stack, I iface,
					getCloundAppDesc_args args) throws TException {
				getCloundAppDesc_result result = new getCloundAppDesc_result();
				return iface.getCloundAppDesc(new AIBaseStack<String>(stack,
						result), args.getNodeId(), args.getAppId());
			}

		}

		private static class getCloundServiceDesc<I extends Iface> extends
				TAIProcessFunction<I, getCloundServiceDesc_args> {

			public getCloundServiceDesc() {
				super("getCloundServiceDesc");
			}

			protected getCloundServiceDesc_args getEmptyArgsInstance() {
				return new getCloundServiceDesc_args();
			}

			protected boolean getResult(AIStack<TBase> stack, I iface,
					getCloundServiceDesc_args args) throws TException {
				getCloundServiceDesc_result result = new getCloundServiceDesc_result();
				return iface.getCloundServiceDesc(new AIBaseStack<String>(
						stack, result), args.getNodeId(), args.getAppId(), args
						.getServiceId());
			}

		}

		private static class getCloundApiDesc<I extends Iface> extends
				TAIProcessFunction<I, getCloundApiDesc_args> {

			public getCloundApiDesc() {
				super("getCloundApiDesc");
			}

			protected getCloundApiDesc_args getEmptyArgsInstance() {
				return new getCloundApiDesc_args();
			}

			protected boolean getResult(AIStack<TBase> stack, I iface,
					getCloundApiDesc_args args) throws TException {
				getCloundApiDesc_result result = new getCloundApiDesc_result();
				return iface.getCloundApiDesc(new AIBaseStack<String>(stack,
						result), args.getNodeId(), args.getAppId(), args
						.getServiceId(), args.getApiId());
			}

		}

	}

}
